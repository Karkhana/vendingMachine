
vendingMachineCurrent.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004058  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000298  00800060  00004058  000040ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000113  008002f8  008002f8  00004384  2**0
                  ALLOC
  3 .stab         0000429c  00000000  00000000  00004384  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014f3  00000000  00000000  00008620  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 da 05 	jmp	0xbb4	; 0xbb4 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e5       	ldi	r30, 0x58	; 88
      68:	f0 e4       	ldi	r31, 0x40	; 64
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 3f       	cpi	r26, 0xF8	; 248
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	14 e0       	ldi	r17, 0x04	; 4
      78:	a8 ef       	ldi	r26, 0xF8	; 248
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 30       	cpi	r26, 0x0B	; 11
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <main>
      8a:	0c 94 2a 20 	jmp	0x4054	; 0x4054 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <initLCD>:
void LCDPrint(char *str);
void LCDClear();
void LCDGotoXY(uint8_t x,uint8_t y);
void LCDSmartWrite(int x,int y,char *str);

void initLCD(void) {
      92:	0f 93       	push	r16
      94:	1f 93       	push	r17
      96:	df 93       	push	r29
      98:	cf 93       	push	r28
      9a:	cd b7       	in	r28, 0x3d	; 61
      9c:	de b7       	in	r29, 0x3e	; 62
      9e:	e8 97       	sbiw	r28, 0x38	; 56
      a0:	0f b6       	in	r0, 0x3f	; 63
      a2:	f8 94       	cli
      a4:	de bf       	out	0x3e, r29	; 62
      a6:	0f be       	out	0x3f, r0	; 63
      a8:	cd bf       	out	0x3d, r28	; 61
	LCDCmd(0x38);	 // initialization of 16X2 LCD in 8bit mode
      aa:	88 e3       	ldi	r24, 0x38	; 56
      ac:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <LCDCmd>
      b0:	80 e0       	ldi	r24, 0x00	; 0
      b2:	90 e0       	ldi	r25, 0x00	; 0
      b4:	a0 e8       	ldi	r26, 0x80	; 128
      b6:	bf e3       	ldi	r27, 0x3F	; 63
      b8:	89 83       	std	Y+1, r24	; 0x01
      ba:	9a 83       	std	Y+2, r25	; 0x02
      bc:	ab 83       	std	Y+3, r26	; 0x03
      be:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
      c0:	69 81       	ldd	r22, Y+1	; 0x01
      c2:	7a 81       	ldd	r23, Y+2	; 0x02
      c4:	8b 81       	ldd	r24, Y+3	; 0x03
      c6:	9c 81       	ldd	r25, Y+4	; 0x04
      c8:	20 e0       	ldi	r18, 0x00	; 0
      ca:	30 e8       	ldi	r19, 0x80	; 128
      cc:	4b e3       	ldi	r20, 0x3B	; 59
      ce:	55 e4       	ldi	r21, 0x45	; 69
      d0:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <__mulsf3>
      d4:	dc 01       	movw	r26, r24
      d6:	cb 01       	movw	r24, r22
      d8:	8d 83       	std	Y+5, r24	; 0x05
      da:	9e 83       	std	Y+6, r25	; 0x06
      dc:	af 83       	std	Y+7, r26	; 0x07
      de:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
      e0:	11 e0       	ldi	r17, 0x01	; 1
      e2:	6d 81       	ldd	r22, Y+5	; 0x05
      e4:	7e 81       	ldd	r23, Y+6	; 0x06
      e6:	8f 81       	ldd	r24, Y+7	; 0x07
      e8:	98 85       	ldd	r25, Y+8	; 0x08
      ea:	20 e0       	ldi	r18, 0x00	; 0
      ec:	30 e0       	ldi	r19, 0x00	; 0
      ee:	40 e8       	ldi	r20, 0x80	; 128
      f0:	5f e3       	ldi	r21, 0x3F	; 63
      f2:	0e 94 ae 1c 	call	0x395c	; 0x395c <__ltsf2>
      f6:	88 23       	and	r24, r24
      f8:	0c f0       	brlt	.+2      	; 0xfc <initLCD+0x6a>
      fa:	10 e0       	ldi	r17, 0x00	; 0
      fc:	11 23       	and	r17, r17
      fe:	29 f0       	breq	.+10     	; 0x10a <initLCD+0x78>
		__ticks = 1;
     100:	81 e0       	ldi	r24, 0x01	; 1
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	9a 87       	std	Y+10, r25	; 0x0a
     106:	89 87       	std	Y+9, r24	; 0x09
     108:	46 c0       	rjmp	.+140    	; 0x196 <initLCD+0x104>
	else if (__tmp > 65535)
     10a:	11 e0       	ldi	r17, 0x01	; 1
     10c:	6d 81       	ldd	r22, Y+5	; 0x05
     10e:	7e 81       	ldd	r23, Y+6	; 0x06
     110:	8f 81       	ldd	r24, Y+7	; 0x07
     112:	98 85       	ldd	r25, Y+8	; 0x08
     114:	20 e0       	ldi	r18, 0x00	; 0
     116:	3f ef       	ldi	r19, 0xFF	; 255
     118:	4f e7       	ldi	r20, 0x7F	; 127
     11a:	57 e4       	ldi	r21, 0x47	; 71
     11c:	0e 94 4e 1c 	call	0x389c	; 0x389c <__gtsf2>
     120:	18 16       	cp	r1, r24
     122:	0c f0       	brlt	.+2      	; 0x126 <initLCD+0x94>
     124:	10 e0       	ldi	r17, 0x00	; 0
     126:	11 23       	and	r17, r17
     128:	61 f1       	breq	.+88     	; 0x182 <initLCD+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     12a:	69 81       	ldd	r22, Y+1	; 0x01
     12c:	7a 81       	ldd	r23, Y+2	; 0x02
     12e:	8b 81       	ldd	r24, Y+3	; 0x03
     130:	9c 81       	ldd	r25, Y+4	; 0x04
     132:	20 e0       	ldi	r18, 0x00	; 0
     134:	30 e0       	ldi	r19, 0x00	; 0
     136:	40 e2       	ldi	r20, 0x20	; 32
     138:	51 e4       	ldi	r21, 0x41	; 65
     13a:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <__mulsf3>
     13e:	dc 01       	movw	r26, r24
     140:	cb 01       	movw	r24, r22
     142:	bc 01       	movw	r22, r24
     144:	cd 01       	movw	r24, r26
     146:	0e 94 80 19 	call	0x3300	; 0x3300 <__fixunssfsi>
     14a:	dc 01       	movw	r26, r24
     14c:	cb 01       	movw	r24, r22
     14e:	9a 87       	std	Y+10, r25	; 0x0a
     150:	89 87       	std	Y+9, r24	; 0x09
     152:	12 c0       	rjmp	.+36     	; 0x178 <initLCD+0xe6>
     154:	8c e2       	ldi	r24, 0x2C	; 44
     156:	91 e0       	ldi	r25, 0x01	; 1
     158:	9c 87       	std	Y+12, r25	; 0x0c
     15a:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     15c:	8b 85       	ldd	r24, Y+11	; 0x0b
     15e:	9c 85       	ldd	r25, Y+12	; 0x0c
     160:	8c 01       	movw	r16, r24
     162:	c8 01       	movw	r24, r16
     164:	01 97       	sbiw	r24, 0x01	; 1
     166:	f1 f7       	brne	.-4      	; 0x164 <initLCD+0xd2>
     168:	8c 01       	movw	r16, r24
     16a:	1c 87       	std	Y+12, r17	; 0x0c
     16c:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     16e:	89 85       	ldd	r24, Y+9	; 0x09
     170:	9a 85       	ldd	r25, Y+10	; 0x0a
     172:	01 97       	sbiw	r24, 0x01	; 1
     174:	9a 87       	std	Y+10, r25	; 0x0a
     176:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     178:	89 85       	ldd	r24, Y+9	; 0x09
     17a:	9a 85       	ldd	r25, Y+10	; 0x0a
     17c:	00 97       	sbiw	r24, 0x00	; 0
     17e:	51 f7       	brne	.-44     	; 0x154 <initLCD+0xc2>
     180:	17 c0       	rjmp	.+46     	; 0x1b0 <initLCD+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     182:	6d 81       	ldd	r22, Y+5	; 0x05
     184:	7e 81       	ldd	r23, Y+6	; 0x06
     186:	8f 81       	ldd	r24, Y+7	; 0x07
     188:	98 85       	ldd	r25, Y+8	; 0x08
     18a:	0e 94 80 19 	call	0x3300	; 0x3300 <__fixunssfsi>
     18e:	dc 01       	movw	r26, r24
     190:	cb 01       	movw	r24, r22
     192:	9a 87       	std	Y+10, r25	; 0x0a
     194:	89 87       	std	Y+9, r24	; 0x09
     196:	89 85       	ldd	r24, Y+9	; 0x09
     198:	9a 85       	ldd	r25, Y+10	; 0x0a
     19a:	9e 87       	std	Y+14, r25	; 0x0e
     19c:	8d 87       	std	Y+13, r24	; 0x0d
     19e:	8d 85       	ldd	r24, Y+13	; 0x0d
     1a0:	9e 85       	ldd	r25, Y+14	; 0x0e
     1a2:	8c 01       	movw	r16, r24
     1a4:	c8 01       	movw	r24, r16
     1a6:	01 97       	sbiw	r24, 0x01	; 1
     1a8:	f1 f7       	brne	.-4      	; 0x1a6 <initLCD+0x114>
     1aa:	8c 01       	movw	r16, r24
     1ac:	1e 87       	std	Y+14, r17	; 0x0e
     1ae:	0d 87       	std	Y+13, r16	; 0x0d
 	_delay_ms(1);

	LCDCmd(0x01);	 // clear LCD
     1b0:	81 e0       	ldi	r24, 0x01	; 1
     1b2:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <LCDCmd>
     1b6:	80 e0       	ldi	r24, 0x00	; 0
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	a0 e8       	ldi	r26, 0x80	; 128
     1bc:	bf e3       	ldi	r27, 0x3F	; 63
     1be:	8f 87       	std	Y+15, r24	; 0x0f
     1c0:	98 8b       	std	Y+16, r25	; 0x10
     1c2:	a9 8b       	std	Y+17, r26	; 0x11
     1c4:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     1c6:	6f 85       	ldd	r22, Y+15	; 0x0f
     1c8:	78 89       	ldd	r23, Y+16	; 0x10
     1ca:	89 89       	ldd	r24, Y+17	; 0x11
     1cc:	9a 89       	ldd	r25, Y+18	; 0x12
     1ce:	20 e0       	ldi	r18, 0x00	; 0
     1d0:	30 e8       	ldi	r19, 0x80	; 128
     1d2:	4b e3       	ldi	r20, 0x3B	; 59
     1d4:	55 e4       	ldi	r21, 0x45	; 69
     1d6:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <__mulsf3>
     1da:	dc 01       	movw	r26, r24
     1dc:	cb 01       	movw	r24, r22
     1de:	8b 8b       	std	Y+19, r24	; 0x13
     1e0:	9c 8b       	std	Y+20, r25	; 0x14
     1e2:	ad 8b       	std	Y+21, r26	; 0x15
     1e4:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     1e6:	11 e0       	ldi	r17, 0x01	; 1
     1e8:	6b 89       	ldd	r22, Y+19	; 0x13
     1ea:	7c 89       	ldd	r23, Y+20	; 0x14
     1ec:	8d 89       	ldd	r24, Y+21	; 0x15
     1ee:	9e 89       	ldd	r25, Y+22	; 0x16
     1f0:	20 e0       	ldi	r18, 0x00	; 0
     1f2:	30 e0       	ldi	r19, 0x00	; 0
     1f4:	40 e8       	ldi	r20, 0x80	; 128
     1f6:	5f e3       	ldi	r21, 0x3F	; 63
     1f8:	0e 94 ae 1c 	call	0x395c	; 0x395c <__ltsf2>
     1fc:	88 23       	and	r24, r24
     1fe:	0c f0       	brlt	.+2      	; 0x202 <initLCD+0x170>
     200:	10 e0       	ldi	r17, 0x00	; 0
     202:	11 23       	and	r17, r17
     204:	29 f0       	breq	.+10     	; 0x210 <initLCD+0x17e>
		__ticks = 1;
     206:	81 e0       	ldi	r24, 0x01	; 1
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	98 8f       	std	Y+24, r25	; 0x18
     20c:	8f 8b       	std	Y+23, r24	; 0x17
     20e:	46 c0       	rjmp	.+140    	; 0x29c <initLCD+0x20a>
	else if (__tmp > 65535)
     210:	11 e0       	ldi	r17, 0x01	; 1
     212:	6b 89       	ldd	r22, Y+19	; 0x13
     214:	7c 89       	ldd	r23, Y+20	; 0x14
     216:	8d 89       	ldd	r24, Y+21	; 0x15
     218:	9e 89       	ldd	r25, Y+22	; 0x16
     21a:	20 e0       	ldi	r18, 0x00	; 0
     21c:	3f ef       	ldi	r19, 0xFF	; 255
     21e:	4f e7       	ldi	r20, 0x7F	; 127
     220:	57 e4       	ldi	r21, 0x47	; 71
     222:	0e 94 4e 1c 	call	0x389c	; 0x389c <__gtsf2>
     226:	18 16       	cp	r1, r24
     228:	0c f0       	brlt	.+2      	; 0x22c <initLCD+0x19a>
     22a:	10 e0       	ldi	r17, 0x00	; 0
     22c:	11 23       	and	r17, r17
     22e:	61 f1       	breq	.+88     	; 0x288 <initLCD+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     230:	6f 85       	ldd	r22, Y+15	; 0x0f
     232:	78 89       	ldd	r23, Y+16	; 0x10
     234:	89 89       	ldd	r24, Y+17	; 0x11
     236:	9a 89       	ldd	r25, Y+18	; 0x12
     238:	20 e0       	ldi	r18, 0x00	; 0
     23a:	30 e0       	ldi	r19, 0x00	; 0
     23c:	40 e2       	ldi	r20, 0x20	; 32
     23e:	51 e4       	ldi	r21, 0x41	; 65
     240:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <__mulsf3>
     244:	dc 01       	movw	r26, r24
     246:	cb 01       	movw	r24, r22
     248:	bc 01       	movw	r22, r24
     24a:	cd 01       	movw	r24, r26
     24c:	0e 94 80 19 	call	0x3300	; 0x3300 <__fixunssfsi>
     250:	dc 01       	movw	r26, r24
     252:	cb 01       	movw	r24, r22
     254:	98 8f       	std	Y+24, r25	; 0x18
     256:	8f 8b       	std	Y+23, r24	; 0x17
     258:	12 c0       	rjmp	.+36     	; 0x27e <initLCD+0x1ec>
     25a:	8c e2       	ldi	r24, 0x2C	; 44
     25c:	91 e0       	ldi	r25, 0x01	; 1
     25e:	9a 8f       	std	Y+26, r25	; 0x1a
     260:	89 8f       	std	Y+25, r24	; 0x19
     262:	89 8d       	ldd	r24, Y+25	; 0x19
     264:	9a 8d       	ldd	r25, Y+26	; 0x1a
     266:	8c 01       	movw	r16, r24
     268:	c8 01       	movw	r24, r16
     26a:	01 97       	sbiw	r24, 0x01	; 1
     26c:	f1 f7       	brne	.-4      	; 0x26a <initLCD+0x1d8>
     26e:	8c 01       	movw	r16, r24
     270:	1a 8f       	std	Y+26, r17	; 0x1a
     272:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     274:	8f 89       	ldd	r24, Y+23	; 0x17
     276:	98 8d       	ldd	r25, Y+24	; 0x18
     278:	01 97       	sbiw	r24, 0x01	; 1
     27a:	98 8f       	std	Y+24, r25	; 0x18
     27c:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     27e:	8f 89       	ldd	r24, Y+23	; 0x17
     280:	98 8d       	ldd	r25, Y+24	; 0x18
     282:	00 97       	sbiw	r24, 0x00	; 0
     284:	51 f7       	brne	.-44     	; 0x25a <initLCD+0x1c8>
     286:	17 c0       	rjmp	.+46     	; 0x2b6 <initLCD+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     288:	6b 89       	ldd	r22, Y+19	; 0x13
     28a:	7c 89       	ldd	r23, Y+20	; 0x14
     28c:	8d 89       	ldd	r24, Y+21	; 0x15
     28e:	9e 89       	ldd	r25, Y+22	; 0x16
     290:	0e 94 80 19 	call	0x3300	; 0x3300 <__fixunssfsi>
     294:	dc 01       	movw	r26, r24
     296:	cb 01       	movw	r24, r22
     298:	98 8f       	std	Y+24, r25	; 0x18
     29a:	8f 8b       	std	Y+23, r24	; 0x17
     29c:	8f 89       	ldd	r24, Y+23	; 0x17
     29e:	98 8d       	ldd	r25, Y+24	; 0x18
     2a0:	9c 8f       	std	Y+28, r25	; 0x1c
     2a2:	8b 8f       	std	Y+27, r24	; 0x1b
     2a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     2a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     2a8:	8c 01       	movw	r16, r24
     2aa:	c8 01       	movw	r24, r16
     2ac:	01 97       	sbiw	r24, 0x01	; 1
     2ae:	f1 f7       	brne	.-4      	; 0x2ac <initLCD+0x21a>
     2b0:	8c 01       	movw	r16, r24
     2b2:	1c 8f       	std	Y+28, r17	; 0x1c
     2b4:	0b 8f       	std	Y+27, r16	; 0x1b
 	_delay_ms(1);

 	LCDCmd(0x0C);	 // cursor ON
     2b6:	8c e0       	ldi	r24, 0x0C	; 12
     2b8:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <LCDCmd>
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	a0 e8       	ldi	r26, 0x80	; 128
     2c2:	bf e3       	ldi	r27, 0x3F	; 63
     2c4:	8d 8f       	std	Y+29, r24	; 0x1d
     2c6:	9e 8f       	std	Y+30, r25	; 0x1e
     2c8:	af 8f       	std	Y+31, r26	; 0x1f
     2ca:	b8 a3       	std	Y+32, r27	; 0x20
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     2cc:	6d 8d       	ldd	r22, Y+29	; 0x1d
     2ce:	7e 8d       	ldd	r23, Y+30	; 0x1e
     2d0:	8f 8d       	ldd	r24, Y+31	; 0x1f
     2d2:	98 a1       	ldd	r25, Y+32	; 0x20
     2d4:	20 e0       	ldi	r18, 0x00	; 0
     2d6:	30 e8       	ldi	r19, 0x80	; 128
     2d8:	4b e3       	ldi	r20, 0x3B	; 59
     2da:	55 e4       	ldi	r21, 0x45	; 69
     2dc:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <__mulsf3>
     2e0:	dc 01       	movw	r26, r24
     2e2:	cb 01       	movw	r24, r22
     2e4:	89 a3       	std	Y+33, r24	; 0x21
     2e6:	9a a3       	std	Y+34, r25	; 0x22
     2e8:	ab a3       	std	Y+35, r26	; 0x23
     2ea:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
     2ec:	11 e0       	ldi	r17, 0x01	; 1
     2ee:	69 a1       	ldd	r22, Y+33	; 0x21
     2f0:	7a a1       	ldd	r23, Y+34	; 0x22
     2f2:	8b a1       	ldd	r24, Y+35	; 0x23
     2f4:	9c a1       	ldd	r25, Y+36	; 0x24
     2f6:	20 e0       	ldi	r18, 0x00	; 0
     2f8:	30 e0       	ldi	r19, 0x00	; 0
     2fa:	40 e8       	ldi	r20, 0x80	; 128
     2fc:	5f e3       	ldi	r21, 0x3F	; 63
     2fe:	0e 94 ae 1c 	call	0x395c	; 0x395c <__ltsf2>
     302:	88 23       	and	r24, r24
     304:	0c f0       	brlt	.+2      	; 0x308 <initLCD+0x276>
     306:	10 e0       	ldi	r17, 0x00	; 0
     308:	11 23       	and	r17, r17
     30a:	29 f0       	breq	.+10     	; 0x316 <initLCD+0x284>
		__ticks = 1;
     30c:	81 e0       	ldi	r24, 0x01	; 1
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	9e a3       	std	Y+38, r25	; 0x26
     312:	8d a3       	std	Y+37, r24	; 0x25
     314:	46 c0       	rjmp	.+140    	; 0x3a2 <initLCD+0x310>
	else if (__tmp > 65535)
     316:	11 e0       	ldi	r17, 0x01	; 1
     318:	69 a1       	ldd	r22, Y+33	; 0x21
     31a:	7a a1       	ldd	r23, Y+34	; 0x22
     31c:	8b a1       	ldd	r24, Y+35	; 0x23
     31e:	9c a1       	ldd	r25, Y+36	; 0x24
     320:	20 e0       	ldi	r18, 0x00	; 0
     322:	3f ef       	ldi	r19, 0xFF	; 255
     324:	4f e7       	ldi	r20, 0x7F	; 127
     326:	57 e4       	ldi	r21, 0x47	; 71
     328:	0e 94 4e 1c 	call	0x389c	; 0x389c <__gtsf2>
     32c:	18 16       	cp	r1, r24
     32e:	0c f0       	brlt	.+2      	; 0x332 <initLCD+0x2a0>
     330:	10 e0       	ldi	r17, 0x00	; 0
     332:	11 23       	and	r17, r17
     334:	61 f1       	breq	.+88     	; 0x38e <initLCD+0x2fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     336:	6d 8d       	ldd	r22, Y+29	; 0x1d
     338:	7e 8d       	ldd	r23, Y+30	; 0x1e
     33a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     33c:	98 a1       	ldd	r25, Y+32	; 0x20
     33e:	20 e0       	ldi	r18, 0x00	; 0
     340:	30 e0       	ldi	r19, 0x00	; 0
     342:	40 e2       	ldi	r20, 0x20	; 32
     344:	51 e4       	ldi	r21, 0x41	; 65
     346:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <__mulsf3>
     34a:	dc 01       	movw	r26, r24
     34c:	cb 01       	movw	r24, r22
     34e:	bc 01       	movw	r22, r24
     350:	cd 01       	movw	r24, r26
     352:	0e 94 80 19 	call	0x3300	; 0x3300 <__fixunssfsi>
     356:	dc 01       	movw	r26, r24
     358:	cb 01       	movw	r24, r22
     35a:	9e a3       	std	Y+38, r25	; 0x26
     35c:	8d a3       	std	Y+37, r24	; 0x25
     35e:	12 c0       	rjmp	.+36     	; 0x384 <initLCD+0x2f2>
     360:	8c e2       	ldi	r24, 0x2C	; 44
     362:	91 e0       	ldi	r25, 0x01	; 1
     364:	98 a7       	std	Y+40, r25	; 0x28
     366:	8f a3       	std	Y+39, r24	; 0x27
     368:	8f a1       	ldd	r24, Y+39	; 0x27
     36a:	98 a5       	ldd	r25, Y+40	; 0x28
     36c:	8c 01       	movw	r16, r24
     36e:	c8 01       	movw	r24, r16
     370:	01 97       	sbiw	r24, 0x01	; 1
     372:	f1 f7       	brne	.-4      	; 0x370 <initLCD+0x2de>
     374:	8c 01       	movw	r16, r24
     376:	18 a7       	std	Y+40, r17	; 0x28
     378:	0f a3       	std	Y+39, r16	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     37a:	8d a1       	ldd	r24, Y+37	; 0x25
     37c:	9e a1       	ldd	r25, Y+38	; 0x26
     37e:	01 97       	sbiw	r24, 0x01	; 1
     380:	9e a3       	std	Y+38, r25	; 0x26
     382:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     384:	8d a1       	ldd	r24, Y+37	; 0x25
     386:	9e a1       	ldd	r25, Y+38	; 0x26
     388:	00 97       	sbiw	r24, 0x00	; 0
     38a:	51 f7       	brne	.-44     	; 0x360 <initLCD+0x2ce>
     38c:	17 c0       	rjmp	.+46     	; 0x3bc <initLCD+0x32a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     38e:	69 a1       	ldd	r22, Y+33	; 0x21
     390:	7a a1       	ldd	r23, Y+34	; 0x22
     392:	8b a1       	ldd	r24, Y+35	; 0x23
     394:	9c a1       	ldd	r25, Y+36	; 0x24
     396:	0e 94 80 19 	call	0x3300	; 0x3300 <__fixunssfsi>
     39a:	dc 01       	movw	r26, r24
     39c:	cb 01       	movw	r24, r22
     39e:	9e a3       	std	Y+38, r25	; 0x26
     3a0:	8d a3       	std	Y+37, r24	; 0x25
     3a2:	8d a1       	ldd	r24, Y+37	; 0x25
     3a4:	9e a1       	ldd	r25, Y+38	; 0x26
     3a6:	9a a7       	std	Y+42, r25	; 0x2a
     3a8:	89 a7       	std	Y+41, r24	; 0x29
     3aa:	89 a5       	ldd	r24, Y+41	; 0x29
     3ac:	9a a5       	ldd	r25, Y+42	; 0x2a
     3ae:	8c 01       	movw	r16, r24
     3b0:	c8 01       	movw	r24, r16
     3b2:	01 97       	sbiw	r24, 0x01	; 1
     3b4:	f1 f7       	brne	.-4      	; 0x3b2 <initLCD+0x320>
     3b6:	8c 01       	movw	r16, r24
     3b8:	1a a7       	std	Y+42, r17	; 0x2a
     3ba:	09 a7       	std	Y+41, r16	; 0x29
 	_delay_ms(1);

 	LCDCmd(0x80);	 // ---8 go to first line and --0 is for 0th position
     3bc:	80 e8       	ldi	r24, 0x80	; 128
     3be:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <LCDCmd>
     3c2:	80 e0       	ldi	r24, 0x00	; 0
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	a0 e8       	ldi	r26, 0x80	; 128
     3c8:	bf e3       	ldi	r27, 0x3F	; 63
     3ca:	8b a7       	std	Y+43, r24	; 0x2b
     3cc:	9c a7       	std	Y+44, r25	; 0x2c
     3ce:	ad a7       	std	Y+45, r26	; 0x2d
     3d0:	be a7       	std	Y+46, r27	; 0x2e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     3d2:	6b a5       	ldd	r22, Y+43	; 0x2b
     3d4:	7c a5       	ldd	r23, Y+44	; 0x2c
     3d6:	8d a5       	ldd	r24, Y+45	; 0x2d
     3d8:	9e a5       	ldd	r25, Y+46	; 0x2e
     3da:	20 e0       	ldi	r18, 0x00	; 0
     3dc:	30 e8       	ldi	r19, 0x80	; 128
     3de:	4b e3       	ldi	r20, 0x3B	; 59
     3e0:	55 e4       	ldi	r21, 0x45	; 69
     3e2:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <__mulsf3>
     3e6:	dc 01       	movw	r26, r24
     3e8:	cb 01       	movw	r24, r22
     3ea:	8f a7       	std	Y+47, r24	; 0x2f
     3ec:	98 ab       	std	Y+48, r25	; 0x30
     3ee:	a9 ab       	std	Y+49, r26	; 0x31
     3f0:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
     3f2:	11 e0       	ldi	r17, 0x01	; 1
     3f4:	6f a5       	ldd	r22, Y+47	; 0x2f
     3f6:	78 a9       	ldd	r23, Y+48	; 0x30
     3f8:	89 a9       	ldd	r24, Y+49	; 0x31
     3fa:	9a a9       	ldd	r25, Y+50	; 0x32
     3fc:	20 e0       	ldi	r18, 0x00	; 0
     3fe:	30 e0       	ldi	r19, 0x00	; 0
     400:	40 e8       	ldi	r20, 0x80	; 128
     402:	5f e3       	ldi	r21, 0x3F	; 63
     404:	0e 94 ae 1c 	call	0x395c	; 0x395c <__ltsf2>
     408:	88 23       	and	r24, r24
     40a:	0c f0       	brlt	.+2      	; 0x40e <initLCD+0x37c>
     40c:	10 e0       	ldi	r17, 0x00	; 0
     40e:	11 23       	and	r17, r17
     410:	29 f0       	breq	.+10     	; 0x41c <initLCD+0x38a>
		__ticks = 1;
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	9c ab       	std	Y+52, r25	; 0x34
     418:	8b ab       	std	Y+51, r24	; 0x33
     41a:	46 c0       	rjmp	.+140    	; 0x4a8 <initLCD+0x416>
	else if (__tmp > 65535)
     41c:	11 e0       	ldi	r17, 0x01	; 1
     41e:	6f a5       	ldd	r22, Y+47	; 0x2f
     420:	78 a9       	ldd	r23, Y+48	; 0x30
     422:	89 a9       	ldd	r24, Y+49	; 0x31
     424:	9a a9       	ldd	r25, Y+50	; 0x32
     426:	20 e0       	ldi	r18, 0x00	; 0
     428:	3f ef       	ldi	r19, 0xFF	; 255
     42a:	4f e7       	ldi	r20, 0x7F	; 127
     42c:	57 e4       	ldi	r21, 0x47	; 71
     42e:	0e 94 4e 1c 	call	0x389c	; 0x389c <__gtsf2>
     432:	18 16       	cp	r1, r24
     434:	0c f0       	brlt	.+2      	; 0x438 <initLCD+0x3a6>
     436:	10 e0       	ldi	r17, 0x00	; 0
     438:	11 23       	and	r17, r17
     43a:	61 f1       	breq	.+88     	; 0x494 <initLCD+0x402>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     43c:	6b a5       	ldd	r22, Y+43	; 0x2b
     43e:	7c a5       	ldd	r23, Y+44	; 0x2c
     440:	8d a5       	ldd	r24, Y+45	; 0x2d
     442:	9e a5       	ldd	r25, Y+46	; 0x2e
     444:	20 e0       	ldi	r18, 0x00	; 0
     446:	30 e0       	ldi	r19, 0x00	; 0
     448:	40 e2       	ldi	r20, 0x20	; 32
     44a:	51 e4       	ldi	r21, 0x41	; 65
     44c:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <__mulsf3>
     450:	dc 01       	movw	r26, r24
     452:	cb 01       	movw	r24, r22
     454:	bc 01       	movw	r22, r24
     456:	cd 01       	movw	r24, r26
     458:	0e 94 80 19 	call	0x3300	; 0x3300 <__fixunssfsi>
     45c:	dc 01       	movw	r26, r24
     45e:	cb 01       	movw	r24, r22
     460:	9c ab       	std	Y+52, r25	; 0x34
     462:	8b ab       	std	Y+51, r24	; 0x33
     464:	12 c0       	rjmp	.+36     	; 0x48a <initLCD+0x3f8>
     466:	8c e2       	ldi	r24, 0x2C	; 44
     468:	91 e0       	ldi	r25, 0x01	; 1
     46a:	9e ab       	std	Y+54, r25	; 0x36
     46c:	8d ab       	std	Y+53, r24	; 0x35
     46e:	8d a9       	ldd	r24, Y+53	; 0x35
     470:	9e a9       	ldd	r25, Y+54	; 0x36
     472:	8c 01       	movw	r16, r24
     474:	c8 01       	movw	r24, r16
     476:	01 97       	sbiw	r24, 0x01	; 1
     478:	f1 f7       	brne	.-4      	; 0x476 <initLCD+0x3e4>
     47a:	8c 01       	movw	r16, r24
     47c:	1e ab       	std	Y+54, r17	; 0x36
     47e:	0d ab       	std	Y+53, r16	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     480:	8b a9       	ldd	r24, Y+51	; 0x33
     482:	9c a9       	ldd	r25, Y+52	; 0x34
     484:	01 97       	sbiw	r24, 0x01	; 1
     486:	9c ab       	std	Y+52, r25	; 0x34
     488:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     48a:	8b a9       	ldd	r24, Y+51	; 0x33
     48c:	9c a9       	ldd	r25, Y+52	; 0x34
     48e:	00 97       	sbiw	r24, 0x00	; 0
     490:	51 f7       	brne	.-44     	; 0x466 <initLCD+0x3d4>
     492:	17 c0       	rjmp	.+46     	; 0x4c2 <initLCD+0x430>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     494:	6f a5       	ldd	r22, Y+47	; 0x2f
     496:	78 a9       	ldd	r23, Y+48	; 0x30
     498:	89 a9       	ldd	r24, Y+49	; 0x31
     49a:	9a a9       	ldd	r25, Y+50	; 0x32
     49c:	0e 94 80 19 	call	0x3300	; 0x3300 <__fixunssfsi>
     4a0:	dc 01       	movw	r26, r24
     4a2:	cb 01       	movw	r24, r22
     4a4:	9c ab       	std	Y+52, r25	; 0x34
     4a6:	8b ab       	std	Y+51, r24	; 0x33
     4a8:	8b a9       	ldd	r24, Y+51	; 0x33
     4aa:	9c a9       	ldd	r25, Y+52	; 0x34
     4ac:	98 af       	std	Y+56, r25	; 0x38
     4ae:	8f ab       	std	Y+55, r24	; 0x37
     4b0:	8f a9       	ldd	r24, Y+55	; 0x37
     4b2:	98 ad       	ldd	r25, Y+56	; 0x38
     4b4:	8c 01       	movw	r16, r24
     4b6:	c8 01       	movw	r24, r16
     4b8:	01 97       	sbiw	r24, 0x01	; 1
     4ba:	f1 f7       	brne	.-4      	; 0x4b8 <initLCD+0x426>
     4bc:	8c 01       	movw	r16, r24
     4be:	18 af       	std	Y+56, r17	; 0x38
     4c0:	0f ab       	std	Y+55, r16	; 0x37
 	_delay_ms(1);
}
     4c2:	e8 96       	adiw	r28, 0x38	; 56
     4c4:	0f b6       	in	r0, 0x3f	; 63
     4c6:	f8 94       	cli
     4c8:	de bf       	out	0x3e, r29	; 62
     4ca:	0f be       	out	0x3f, r0	; 63
     4cc:	cd bf       	out	0x3d, r28	; 61
     4ce:	cf 91       	pop	r28
     4d0:	df 91       	pop	r29
     4d2:	1f 91       	pop	r17
     4d4:	0f 91       	pop	r16
     4d6:	08 95       	ret

000004d8 <LCDCmd>:
void LCDCmd(unsigned char cmd) {
     4d8:	0f 93       	push	r16
     4da:	1f 93       	push	r17
     4dc:	df 93       	push	r29
     4de:	cf 93       	push	r28
     4e0:	cd b7       	in	r28, 0x3d	; 61
     4e2:	de b7       	in	r29, 0x3e	; 62
     4e4:	6d 97       	sbiw	r28, 0x1d	; 29
     4e6:	0f b6       	in	r0, 0x3f	; 63
     4e8:	f8 94       	cli
     4ea:	de bf       	out	0x3e, r29	; 62
     4ec:	0f be       	out	0x3f, r0	; 63
     4ee:	cd bf       	out	0x3d, r28	; 61
     4f0:	8d 8f       	std	Y+29, r24	; 0x1d
	LCD_DATA=cmd;
     4f2:	88 e3       	ldi	r24, 0x38	; 56
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	2d 8d       	ldd	r18, Y+29	; 0x1d
     4f8:	fc 01       	movw	r30, r24
     4fa:	20 83       	st	Z, r18
	ctrl =(0<<rs)|(0<<rw)|(1<<en);
     4fc:	82 e3       	ldi	r24, 0x32	; 50
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	20 e2       	ldi	r18, 0x20	; 32
     502:	fc 01       	movw	r30, r24
     504:	20 83       	st	Z, r18
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	a0 e8       	ldi	r26, 0x80	; 128
     50c:	bf e3       	ldi	r27, 0x3F	; 63
     50e:	89 83       	std	Y+1, r24	; 0x01
     510:	9a 83       	std	Y+2, r25	; 0x02
     512:	ab 83       	std	Y+3, r26	; 0x03
     514:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     516:	69 81       	ldd	r22, Y+1	; 0x01
     518:	7a 81       	ldd	r23, Y+2	; 0x02
     51a:	8b 81       	ldd	r24, Y+3	; 0x03
     51c:	9c 81       	ldd	r25, Y+4	; 0x04
     51e:	20 e0       	ldi	r18, 0x00	; 0
     520:	30 e8       	ldi	r19, 0x80	; 128
     522:	4b e3       	ldi	r20, 0x3B	; 59
     524:	55 e4       	ldi	r21, 0x45	; 69
     526:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <__mulsf3>
     52a:	dc 01       	movw	r26, r24
     52c:	cb 01       	movw	r24, r22
     52e:	8d 83       	std	Y+5, r24	; 0x05
     530:	9e 83       	std	Y+6, r25	; 0x06
     532:	af 83       	std	Y+7, r26	; 0x07
     534:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     536:	11 e0       	ldi	r17, 0x01	; 1
     538:	6d 81       	ldd	r22, Y+5	; 0x05
     53a:	7e 81       	ldd	r23, Y+6	; 0x06
     53c:	8f 81       	ldd	r24, Y+7	; 0x07
     53e:	98 85       	ldd	r25, Y+8	; 0x08
     540:	20 e0       	ldi	r18, 0x00	; 0
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	40 e8       	ldi	r20, 0x80	; 128
     546:	5f e3       	ldi	r21, 0x3F	; 63
     548:	0e 94 ae 1c 	call	0x395c	; 0x395c <__ltsf2>
     54c:	88 23       	and	r24, r24
     54e:	0c f0       	brlt	.+2      	; 0x552 <LCDCmd+0x7a>
     550:	10 e0       	ldi	r17, 0x00	; 0
     552:	11 23       	and	r17, r17
     554:	29 f0       	breq	.+10     	; 0x560 <LCDCmd+0x88>
		__ticks = 1;
     556:	81 e0       	ldi	r24, 0x01	; 1
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	9a 87       	std	Y+10, r25	; 0x0a
     55c:	89 87       	std	Y+9, r24	; 0x09
     55e:	46 c0       	rjmp	.+140    	; 0x5ec <LCDCmd+0x114>
	else if (__tmp > 65535)
     560:	11 e0       	ldi	r17, 0x01	; 1
     562:	6d 81       	ldd	r22, Y+5	; 0x05
     564:	7e 81       	ldd	r23, Y+6	; 0x06
     566:	8f 81       	ldd	r24, Y+7	; 0x07
     568:	98 85       	ldd	r25, Y+8	; 0x08
     56a:	20 e0       	ldi	r18, 0x00	; 0
     56c:	3f ef       	ldi	r19, 0xFF	; 255
     56e:	4f e7       	ldi	r20, 0x7F	; 127
     570:	57 e4       	ldi	r21, 0x47	; 71
     572:	0e 94 4e 1c 	call	0x389c	; 0x389c <__gtsf2>
     576:	18 16       	cp	r1, r24
     578:	0c f0       	brlt	.+2      	; 0x57c <LCDCmd+0xa4>
     57a:	10 e0       	ldi	r17, 0x00	; 0
     57c:	11 23       	and	r17, r17
     57e:	61 f1       	breq	.+88     	; 0x5d8 <LCDCmd+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     580:	69 81       	ldd	r22, Y+1	; 0x01
     582:	7a 81       	ldd	r23, Y+2	; 0x02
     584:	8b 81       	ldd	r24, Y+3	; 0x03
     586:	9c 81       	ldd	r25, Y+4	; 0x04
     588:	20 e0       	ldi	r18, 0x00	; 0
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	40 e2       	ldi	r20, 0x20	; 32
     58e:	51 e4       	ldi	r21, 0x41	; 65
     590:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <__mulsf3>
     594:	dc 01       	movw	r26, r24
     596:	cb 01       	movw	r24, r22
     598:	bc 01       	movw	r22, r24
     59a:	cd 01       	movw	r24, r26
     59c:	0e 94 80 19 	call	0x3300	; 0x3300 <__fixunssfsi>
     5a0:	dc 01       	movw	r26, r24
     5a2:	cb 01       	movw	r24, r22
     5a4:	9a 87       	std	Y+10, r25	; 0x0a
     5a6:	89 87       	std	Y+9, r24	; 0x09
     5a8:	12 c0       	rjmp	.+36     	; 0x5ce <LCDCmd+0xf6>
     5aa:	8c e2       	ldi	r24, 0x2C	; 44
     5ac:	91 e0       	ldi	r25, 0x01	; 1
     5ae:	9c 87       	std	Y+12, r25	; 0x0c
     5b0:	8b 87       	std	Y+11, r24	; 0x0b
     5b2:	8b 85       	ldd	r24, Y+11	; 0x0b
     5b4:	9c 85       	ldd	r25, Y+12	; 0x0c
     5b6:	8c 01       	movw	r16, r24
     5b8:	c8 01       	movw	r24, r16
     5ba:	01 97       	sbiw	r24, 0x01	; 1
     5bc:	f1 f7       	brne	.-4      	; 0x5ba <LCDCmd+0xe2>
     5be:	8c 01       	movw	r16, r24
     5c0:	1c 87       	std	Y+12, r17	; 0x0c
     5c2:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5c4:	89 85       	ldd	r24, Y+9	; 0x09
     5c6:	9a 85       	ldd	r25, Y+10	; 0x0a
     5c8:	01 97       	sbiw	r24, 0x01	; 1
     5ca:	9a 87       	std	Y+10, r25	; 0x0a
     5cc:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5ce:	89 85       	ldd	r24, Y+9	; 0x09
     5d0:	9a 85       	ldd	r25, Y+10	; 0x0a
     5d2:	00 97       	sbiw	r24, 0x00	; 0
     5d4:	51 f7       	brne	.-44     	; 0x5aa <LCDCmd+0xd2>
     5d6:	17 c0       	rjmp	.+46     	; 0x606 <LCDCmd+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5d8:	6d 81       	ldd	r22, Y+5	; 0x05
     5da:	7e 81       	ldd	r23, Y+6	; 0x06
     5dc:	8f 81       	ldd	r24, Y+7	; 0x07
     5de:	98 85       	ldd	r25, Y+8	; 0x08
     5e0:	0e 94 80 19 	call	0x3300	; 0x3300 <__fixunssfsi>
     5e4:	dc 01       	movw	r26, r24
     5e6:	cb 01       	movw	r24, r22
     5e8:	9a 87       	std	Y+10, r25	; 0x0a
     5ea:	89 87       	std	Y+9, r24	; 0x09
     5ec:	89 85       	ldd	r24, Y+9	; 0x09
     5ee:	9a 85       	ldd	r25, Y+10	; 0x0a
     5f0:	9e 87       	std	Y+14, r25	; 0x0e
     5f2:	8d 87       	std	Y+13, r24	; 0x0d
     5f4:	8d 85       	ldd	r24, Y+13	; 0x0d
     5f6:	9e 85       	ldd	r25, Y+14	; 0x0e
     5f8:	8c 01       	movw	r16, r24
     5fa:	f8 01       	movw	r30, r16
     5fc:	31 97       	sbiw	r30, 0x01	; 1
     5fe:	f1 f7       	brne	.-4      	; 0x5fc <LCDCmd+0x124>
     600:	8f 01       	movw	r16, r30
     602:	1e 87       	std	Y+14, r17	; 0x0e
     604:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(1);
	ctrl =(0<<rs)|(0<<rw)|(0<<en);
     606:	82 e3       	ldi	r24, 0x32	; 50
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	fc 01       	movw	r30, r24
     60c:	10 82       	st	Z, r1
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	a8 e4       	ldi	r26, 0x48	; 72
     614:	b2 e4       	ldi	r27, 0x42	; 66
     616:	8f 87       	std	Y+15, r24	; 0x0f
     618:	98 8b       	std	Y+16, r25	; 0x10
     61a:	a9 8b       	std	Y+17, r26	; 0x11
     61c:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     61e:	6f 85       	ldd	r22, Y+15	; 0x0f
     620:	78 89       	ldd	r23, Y+16	; 0x10
     622:	89 89       	ldd	r24, Y+17	; 0x11
     624:	9a 89       	ldd	r25, Y+18	; 0x12
     626:	20 e0       	ldi	r18, 0x00	; 0
     628:	30 e8       	ldi	r19, 0x80	; 128
     62a:	4b e3       	ldi	r20, 0x3B	; 59
     62c:	55 e4       	ldi	r21, 0x45	; 69
     62e:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <__mulsf3>
     632:	dc 01       	movw	r26, r24
     634:	cb 01       	movw	r24, r22
     636:	8b 8b       	std	Y+19, r24	; 0x13
     638:	9c 8b       	std	Y+20, r25	; 0x14
     63a:	ad 8b       	std	Y+21, r26	; 0x15
     63c:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     63e:	11 e0       	ldi	r17, 0x01	; 1
     640:	6b 89       	ldd	r22, Y+19	; 0x13
     642:	7c 89       	ldd	r23, Y+20	; 0x14
     644:	8d 89       	ldd	r24, Y+21	; 0x15
     646:	9e 89       	ldd	r25, Y+22	; 0x16
     648:	20 e0       	ldi	r18, 0x00	; 0
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	40 e8       	ldi	r20, 0x80	; 128
     64e:	5f e3       	ldi	r21, 0x3F	; 63
     650:	0e 94 ae 1c 	call	0x395c	; 0x395c <__ltsf2>
     654:	88 23       	and	r24, r24
     656:	0c f0       	brlt	.+2      	; 0x65a <LCDCmd+0x182>
     658:	10 e0       	ldi	r17, 0x00	; 0
     65a:	11 23       	and	r17, r17
     65c:	29 f0       	breq	.+10     	; 0x668 <LCDCmd+0x190>
		__ticks = 1;
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	98 8f       	std	Y+24, r25	; 0x18
     664:	8f 8b       	std	Y+23, r24	; 0x17
     666:	46 c0       	rjmp	.+140    	; 0x6f4 <LCDCmd+0x21c>
	else if (__tmp > 65535)
     668:	11 e0       	ldi	r17, 0x01	; 1
     66a:	6b 89       	ldd	r22, Y+19	; 0x13
     66c:	7c 89       	ldd	r23, Y+20	; 0x14
     66e:	8d 89       	ldd	r24, Y+21	; 0x15
     670:	9e 89       	ldd	r25, Y+22	; 0x16
     672:	20 e0       	ldi	r18, 0x00	; 0
     674:	3f ef       	ldi	r19, 0xFF	; 255
     676:	4f e7       	ldi	r20, 0x7F	; 127
     678:	57 e4       	ldi	r21, 0x47	; 71
     67a:	0e 94 4e 1c 	call	0x389c	; 0x389c <__gtsf2>
     67e:	18 16       	cp	r1, r24
     680:	0c f0       	brlt	.+2      	; 0x684 <LCDCmd+0x1ac>
     682:	10 e0       	ldi	r17, 0x00	; 0
     684:	11 23       	and	r17, r17
     686:	61 f1       	breq	.+88     	; 0x6e0 <LCDCmd+0x208>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     688:	6f 85       	ldd	r22, Y+15	; 0x0f
     68a:	78 89       	ldd	r23, Y+16	; 0x10
     68c:	89 89       	ldd	r24, Y+17	; 0x11
     68e:	9a 89       	ldd	r25, Y+18	; 0x12
     690:	20 e0       	ldi	r18, 0x00	; 0
     692:	30 e0       	ldi	r19, 0x00	; 0
     694:	40 e2       	ldi	r20, 0x20	; 32
     696:	51 e4       	ldi	r21, 0x41	; 65
     698:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <__mulsf3>
     69c:	dc 01       	movw	r26, r24
     69e:	cb 01       	movw	r24, r22
     6a0:	bc 01       	movw	r22, r24
     6a2:	cd 01       	movw	r24, r26
     6a4:	0e 94 80 19 	call	0x3300	; 0x3300 <__fixunssfsi>
     6a8:	dc 01       	movw	r26, r24
     6aa:	cb 01       	movw	r24, r22
     6ac:	98 8f       	std	Y+24, r25	; 0x18
     6ae:	8f 8b       	std	Y+23, r24	; 0x17
     6b0:	12 c0       	rjmp	.+36     	; 0x6d6 <LCDCmd+0x1fe>
     6b2:	8c e2       	ldi	r24, 0x2C	; 44
     6b4:	91 e0       	ldi	r25, 0x01	; 1
     6b6:	9a 8f       	std	Y+26, r25	; 0x1a
     6b8:	89 8f       	std	Y+25, r24	; 0x19
     6ba:	89 8d       	ldd	r24, Y+25	; 0x19
     6bc:	9a 8d       	ldd	r25, Y+26	; 0x1a
     6be:	8c 01       	movw	r16, r24
     6c0:	c8 01       	movw	r24, r16
     6c2:	01 97       	sbiw	r24, 0x01	; 1
     6c4:	f1 f7       	brne	.-4      	; 0x6c2 <LCDCmd+0x1ea>
     6c6:	8c 01       	movw	r16, r24
     6c8:	1a 8f       	std	Y+26, r17	; 0x1a
     6ca:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6cc:	8f 89       	ldd	r24, Y+23	; 0x17
     6ce:	98 8d       	ldd	r25, Y+24	; 0x18
     6d0:	01 97       	sbiw	r24, 0x01	; 1
     6d2:	98 8f       	std	Y+24, r25	; 0x18
     6d4:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6d6:	8f 89       	ldd	r24, Y+23	; 0x17
     6d8:	98 8d       	ldd	r25, Y+24	; 0x18
     6da:	00 97       	sbiw	r24, 0x00	; 0
     6dc:	51 f7       	brne	.-44     	; 0x6b2 <LCDCmd+0x1da>
     6de:	17 c0       	rjmp	.+46     	; 0x70e <LCDCmd+0x236>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6e0:	6b 89       	ldd	r22, Y+19	; 0x13
     6e2:	7c 89       	ldd	r23, Y+20	; 0x14
     6e4:	8d 89       	ldd	r24, Y+21	; 0x15
     6e6:	9e 89       	ldd	r25, Y+22	; 0x16
     6e8:	0e 94 80 19 	call	0x3300	; 0x3300 <__fixunssfsi>
     6ec:	dc 01       	movw	r26, r24
     6ee:	cb 01       	movw	r24, r22
     6f0:	98 8f       	std	Y+24, r25	; 0x18
     6f2:	8f 8b       	std	Y+23, r24	; 0x17
     6f4:	8f 89       	ldd	r24, Y+23	; 0x17
     6f6:	98 8d       	ldd	r25, Y+24	; 0x18
     6f8:	9c 8f       	std	Y+28, r25	; 0x1c
     6fa:	8b 8f       	std	Y+27, r24	; 0x1b
     6fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     6fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
     700:	8c 01       	movw	r16, r24
     702:	f8 01       	movw	r30, r16
     704:	31 97       	sbiw	r30, 0x01	; 1
     706:	f1 f7       	brne	.-4      	; 0x704 <LCDCmd+0x22c>
     708:	8f 01       	movw	r16, r30
     70a:	1c 8f       	std	Y+28, r17	; 0x1c
     70c:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(50);
}
     70e:	6d 96       	adiw	r28, 0x1d	; 29
     710:	0f b6       	in	r0, 0x3f	; 63
     712:	f8 94       	cli
     714:	de bf       	out	0x3e, r29	; 62
     716:	0f be       	out	0x3f, r0	; 63
     718:	cd bf       	out	0x3d, r28	; 61
     71a:	cf 91       	pop	r28
     71c:	df 91       	pop	r29
     71e:	1f 91       	pop	r17
     720:	0f 91       	pop	r16
     722:	08 95       	ret

00000724 <LCDData>:
void LCDData(unsigned char data) {
     724:	0f 93       	push	r16
     726:	1f 93       	push	r17
     728:	df 93       	push	r29
     72a:	cf 93       	push	r28
     72c:	cd b7       	in	r28, 0x3d	; 61
     72e:	de b7       	in	r29, 0x3e	; 62
     730:	6d 97       	sbiw	r28, 0x1d	; 29
     732:	0f b6       	in	r0, 0x3f	; 63
     734:	f8 94       	cli
     736:	de bf       	out	0x3e, r29	; 62
     738:	0f be       	out	0x3f, r0	; 63
     73a:	cd bf       	out	0x3d, r28	; 61
     73c:	8d 8f       	std	Y+29, r24	; 0x1d
	LCD_DATA= data;
     73e:	88 e3       	ldi	r24, 0x38	; 56
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	2d 8d       	ldd	r18, Y+29	; 0x1d
     744:	fc 01       	movw	r30, r24
     746:	20 83       	st	Z, r18
	ctrl = (1<<rs)|(0<<rw)|(1<<en);
     748:	82 e3       	ldi	r24, 0x32	; 50
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	28 e2       	ldi	r18, 0x28	; 40
     74e:	fc 01       	movw	r30, r24
     750:	20 83       	st	Z, r18
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	a0 e8       	ldi	r26, 0x80	; 128
     758:	bf e3       	ldi	r27, 0x3F	; 63
     75a:	89 83       	std	Y+1, r24	; 0x01
     75c:	9a 83       	std	Y+2, r25	; 0x02
     75e:	ab 83       	std	Y+3, r26	; 0x03
     760:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     762:	69 81       	ldd	r22, Y+1	; 0x01
     764:	7a 81       	ldd	r23, Y+2	; 0x02
     766:	8b 81       	ldd	r24, Y+3	; 0x03
     768:	9c 81       	ldd	r25, Y+4	; 0x04
     76a:	20 e0       	ldi	r18, 0x00	; 0
     76c:	30 e8       	ldi	r19, 0x80	; 128
     76e:	4b e3       	ldi	r20, 0x3B	; 59
     770:	55 e4       	ldi	r21, 0x45	; 69
     772:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <__mulsf3>
     776:	dc 01       	movw	r26, r24
     778:	cb 01       	movw	r24, r22
     77a:	8d 83       	std	Y+5, r24	; 0x05
     77c:	9e 83       	std	Y+6, r25	; 0x06
     77e:	af 83       	std	Y+7, r26	; 0x07
     780:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     782:	11 e0       	ldi	r17, 0x01	; 1
     784:	6d 81       	ldd	r22, Y+5	; 0x05
     786:	7e 81       	ldd	r23, Y+6	; 0x06
     788:	8f 81       	ldd	r24, Y+7	; 0x07
     78a:	98 85       	ldd	r25, Y+8	; 0x08
     78c:	20 e0       	ldi	r18, 0x00	; 0
     78e:	30 e0       	ldi	r19, 0x00	; 0
     790:	40 e8       	ldi	r20, 0x80	; 128
     792:	5f e3       	ldi	r21, 0x3F	; 63
     794:	0e 94 ae 1c 	call	0x395c	; 0x395c <__ltsf2>
     798:	88 23       	and	r24, r24
     79a:	0c f0       	brlt	.+2      	; 0x79e <LCDData+0x7a>
     79c:	10 e0       	ldi	r17, 0x00	; 0
     79e:	11 23       	and	r17, r17
     7a0:	29 f0       	breq	.+10     	; 0x7ac <LCDData+0x88>
		__ticks = 1;
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	9a 87       	std	Y+10, r25	; 0x0a
     7a8:	89 87       	std	Y+9, r24	; 0x09
     7aa:	46 c0       	rjmp	.+140    	; 0x838 <LCDData+0x114>
	else if (__tmp > 65535)
     7ac:	11 e0       	ldi	r17, 0x01	; 1
     7ae:	6d 81       	ldd	r22, Y+5	; 0x05
     7b0:	7e 81       	ldd	r23, Y+6	; 0x06
     7b2:	8f 81       	ldd	r24, Y+7	; 0x07
     7b4:	98 85       	ldd	r25, Y+8	; 0x08
     7b6:	20 e0       	ldi	r18, 0x00	; 0
     7b8:	3f ef       	ldi	r19, 0xFF	; 255
     7ba:	4f e7       	ldi	r20, 0x7F	; 127
     7bc:	57 e4       	ldi	r21, 0x47	; 71
     7be:	0e 94 4e 1c 	call	0x389c	; 0x389c <__gtsf2>
     7c2:	18 16       	cp	r1, r24
     7c4:	0c f0       	brlt	.+2      	; 0x7c8 <LCDData+0xa4>
     7c6:	10 e0       	ldi	r17, 0x00	; 0
     7c8:	11 23       	and	r17, r17
     7ca:	61 f1       	breq	.+88     	; 0x824 <LCDData+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7cc:	69 81       	ldd	r22, Y+1	; 0x01
     7ce:	7a 81       	ldd	r23, Y+2	; 0x02
     7d0:	8b 81       	ldd	r24, Y+3	; 0x03
     7d2:	9c 81       	ldd	r25, Y+4	; 0x04
     7d4:	20 e0       	ldi	r18, 0x00	; 0
     7d6:	30 e0       	ldi	r19, 0x00	; 0
     7d8:	40 e2       	ldi	r20, 0x20	; 32
     7da:	51 e4       	ldi	r21, 0x41	; 65
     7dc:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <__mulsf3>
     7e0:	dc 01       	movw	r26, r24
     7e2:	cb 01       	movw	r24, r22
     7e4:	bc 01       	movw	r22, r24
     7e6:	cd 01       	movw	r24, r26
     7e8:	0e 94 80 19 	call	0x3300	; 0x3300 <__fixunssfsi>
     7ec:	dc 01       	movw	r26, r24
     7ee:	cb 01       	movw	r24, r22
     7f0:	9a 87       	std	Y+10, r25	; 0x0a
     7f2:	89 87       	std	Y+9, r24	; 0x09
     7f4:	12 c0       	rjmp	.+36     	; 0x81a <LCDData+0xf6>
     7f6:	8c e2       	ldi	r24, 0x2C	; 44
     7f8:	91 e0       	ldi	r25, 0x01	; 1
     7fa:	9c 87       	std	Y+12, r25	; 0x0c
     7fc:	8b 87       	std	Y+11, r24	; 0x0b
     7fe:	8b 85       	ldd	r24, Y+11	; 0x0b
     800:	9c 85       	ldd	r25, Y+12	; 0x0c
     802:	8c 01       	movw	r16, r24
     804:	c8 01       	movw	r24, r16
     806:	01 97       	sbiw	r24, 0x01	; 1
     808:	f1 f7       	brne	.-4      	; 0x806 <LCDData+0xe2>
     80a:	8c 01       	movw	r16, r24
     80c:	1c 87       	std	Y+12, r17	; 0x0c
     80e:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     810:	89 85       	ldd	r24, Y+9	; 0x09
     812:	9a 85       	ldd	r25, Y+10	; 0x0a
     814:	01 97       	sbiw	r24, 0x01	; 1
     816:	9a 87       	std	Y+10, r25	; 0x0a
     818:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	9a 85       	ldd	r25, Y+10	; 0x0a
     81e:	00 97       	sbiw	r24, 0x00	; 0
     820:	51 f7       	brne	.-44     	; 0x7f6 <LCDData+0xd2>
     822:	17 c0       	rjmp	.+46     	; 0x852 <LCDData+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     824:	6d 81       	ldd	r22, Y+5	; 0x05
     826:	7e 81       	ldd	r23, Y+6	; 0x06
     828:	8f 81       	ldd	r24, Y+7	; 0x07
     82a:	98 85       	ldd	r25, Y+8	; 0x08
     82c:	0e 94 80 19 	call	0x3300	; 0x3300 <__fixunssfsi>
     830:	dc 01       	movw	r26, r24
     832:	cb 01       	movw	r24, r22
     834:	9a 87       	std	Y+10, r25	; 0x0a
     836:	89 87       	std	Y+9, r24	; 0x09
     838:	89 85       	ldd	r24, Y+9	; 0x09
     83a:	9a 85       	ldd	r25, Y+10	; 0x0a
     83c:	9e 87       	std	Y+14, r25	; 0x0e
     83e:	8d 87       	std	Y+13, r24	; 0x0d
     840:	8d 85       	ldd	r24, Y+13	; 0x0d
     842:	9e 85       	ldd	r25, Y+14	; 0x0e
     844:	8c 01       	movw	r16, r24
     846:	f8 01       	movw	r30, r16
     848:	31 97       	sbiw	r30, 0x01	; 1
     84a:	f1 f7       	brne	.-4      	; 0x848 <LCDData+0x124>
     84c:	8f 01       	movw	r16, r30
     84e:	1e 87       	std	Y+14, r17	; 0x0e
     850:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(1);
	ctrl = (1<<rs)|(0<<rw)|(0<<en);
     852:	82 e3       	ldi	r24, 0x32	; 50
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	28 e0       	ldi	r18, 0x08	; 8
     858:	fc 01       	movw	r30, r24
     85a:	20 83       	st	Z, r18
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	a0 ea       	ldi	r26, 0xA0	; 160
     862:	b0 e4       	ldi	r27, 0x40	; 64
     864:	8f 87       	std	Y+15, r24	; 0x0f
     866:	98 8b       	std	Y+16, r25	; 0x10
     868:	a9 8b       	std	Y+17, r26	; 0x11
     86a:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     86c:	6f 85       	ldd	r22, Y+15	; 0x0f
     86e:	78 89       	ldd	r23, Y+16	; 0x10
     870:	89 89       	ldd	r24, Y+17	; 0x11
     872:	9a 89       	ldd	r25, Y+18	; 0x12
     874:	20 e0       	ldi	r18, 0x00	; 0
     876:	30 e8       	ldi	r19, 0x80	; 128
     878:	4b e3       	ldi	r20, 0x3B	; 59
     87a:	55 e4       	ldi	r21, 0x45	; 69
     87c:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <__mulsf3>
     880:	dc 01       	movw	r26, r24
     882:	cb 01       	movw	r24, r22
     884:	8b 8b       	std	Y+19, r24	; 0x13
     886:	9c 8b       	std	Y+20, r25	; 0x14
     888:	ad 8b       	std	Y+21, r26	; 0x15
     88a:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     88c:	11 e0       	ldi	r17, 0x01	; 1
     88e:	6b 89       	ldd	r22, Y+19	; 0x13
     890:	7c 89       	ldd	r23, Y+20	; 0x14
     892:	8d 89       	ldd	r24, Y+21	; 0x15
     894:	9e 89       	ldd	r25, Y+22	; 0x16
     896:	20 e0       	ldi	r18, 0x00	; 0
     898:	30 e0       	ldi	r19, 0x00	; 0
     89a:	40 e8       	ldi	r20, 0x80	; 128
     89c:	5f e3       	ldi	r21, 0x3F	; 63
     89e:	0e 94 ae 1c 	call	0x395c	; 0x395c <__ltsf2>
     8a2:	88 23       	and	r24, r24
     8a4:	0c f0       	brlt	.+2      	; 0x8a8 <__stack+0x49>
     8a6:	10 e0       	ldi	r17, 0x00	; 0
     8a8:	11 23       	and	r17, r17
     8aa:	29 f0       	breq	.+10     	; 0x8b6 <__stack+0x57>
		__ticks = 1;
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	98 8f       	std	Y+24, r25	; 0x18
     8b2:	8f 8b       	std	Y+23, r24	; 0x17
     8b4:	46 c0       	rjmp	.+140    	; 0x942 <__stack+0xe3>
	else if (__tmp > 65535)
     8b6:	11 e0       	ldi	r17, 0x01	; 1
     8b8:	6b 89       	ldd	r22, Y+19	; 0x13
     8ba:	7c 89       	ldd	r23, Y+20	; 0x14
     8bc:	8d 89       	ldd	r24, Y+21	; 0x15
     8be:	9e 89       	ldd	r25, Y+22	; 0x16
     8c0:	20 e0       	ldi	r18, 0x00	; 0
     8c2:	3f ef       	ldi	r19, 0xFF	; 255
     8c4:	4f e7       	ldi	r20, 0x7F	; 127
     8c6:	57 e4       	ldi	r21, 0x47	; 71
     8c8:	0e 94 4e 1c 	call	0x389c	; 0x389c <__gtsf2>
     8cc:	18 16       	cp	r1, r24
     8ce:	0c f0       	brlt	.+2      	; 0x8d2 <__stack+0x73>
     8d0:	10 e0       	ldi	r17, 0x00	; 0
     8d2:	11 23       	and	r17, r17
     8d4:	61 f1       	breq	.+88     	; 0x92e <__stack+0xcf>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8d6:	6f 85       	ldd	r22, Y+15	; 0x0f
     8d8:	78 89       	ldd	r23, Y+16	; 0x10
     8da:	89 89       	ldd	r24, Y+17	; 0x11
     8dc:	9a 89       	ldd	r25, Y+18	; 0x12
     8de:	20 e0       	ldi	r18, 0x00	; 0
     8e0:	30 e0       	ldi	r19, 0x00	; 0
     8e2:	40 e2       	ldi	r20, 0x20	; 32
     8e4:	51 e4       	ldi	r21, 0x41	; 65
     8e6:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <__mulsf3>
     8ea:	dc 01       	movw	r26, r24
     8ec:	cb 01       	movw	r24, r22
     8ee:	bc 01       	movw	r22, r24
     8f0:	cd 01       	movw	r24, r26
     8f2:	0e 94 80 19 	call	0x3300	; 0x3300 <__fixunssfsi>
     8f6:	dc 01       	movw	r26, r24
     8f8:	cb 01       	movw	r24, r22
     8fa:	98 8f       	std	Y+24, r25	; 0x18
     8fc:	8f 8b       	std	Y+23, r24	; 0x17
     8fe:	12 c0       	rjmp	.+36     	; 0x924 <__stack+0xc5>
     900:	8c e2       	ldi	r24, 0x2C	; 44
     902:	91 e0       	ldi	r25, 0x01	; 1
     904:	9a 8f       	std	Y+26, r25	; 0x1a
     906:	89 8f       	std	Y+25, r24	; 0x19
     908:	89 8d       	ldd	r24, Y+25	; 0x19
     90a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     90c:	8c 01       	movw	r16, r24
     90e:	c8 01       	movw	r24, r16
     910:	01 97       	sbiw	r24, 0x01	; 1
     912:	f1 f7       	brne	.-4      	; 0x910 <__stack+0xb1>
     914:	8c 01       	movw	r16, r24
     916:	1a 8f       	std	Y+26, r17	; 0x1a
     918:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     91a:	8f 89       	ldd	r24, Y+23	; 0x17
     91c:	98 8d       	ldd	r25, Y+24	; 0x18
     91e:	01 97       	sbiw	r24, 0x01	; 1
     920:	98 8f       	std	Y+24, r25	; 0x18
     922:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     924:	8f 89       	ldd	r24, Y+23	; 0x17
     926:	98 8d       	ldd	r25, Y+24	; 0x18
     928:	00 97       	sbiw	r24, 0x00	; 0
     92a:	51 f7       	brne	.-44     	; 0x900 <__stack+0xa1>
     92c:	17 c0       	rjmp	.+46     	; 0x95c <__stack+0xfd>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     92e:	6b 89       	ldd	r22, Y+19	; 0x13
     930:	7c 89       	ldd	r23, Y+20	; 0x14
     932:	8d 89       	ldd	r24, Y+21	; 0x15
     934:	9e 89       	ldd	r25, Y+22	; 0x16
     936:	0e 94 80 19 	call	0x3300	; 0x3300 <__fixunssfsi>
     93a:	dc 01       	movw	r26, r24
     93c:	cb 01       	movw	r24, r22
     93e:	98 8f       	std	Y+24, r25	; 0x18
     940:	8f 8b       	std	Y+23, r24	; 0x17
     942:	8f 89       	ldd	r24, Y+23	; 0x17
     944:	98 8d       	ldd	r25, Y+24	; 0x18
     946:	9c 8f       	std	Y+28, r25	; 0x1c
     948:	8b 8f       	std	Y+27, r24	; 0x1b
     94a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     94c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     94e:	8c 01       	movw	r16, r24
     950:	f8 01       	movw	r30, r16
     952:	31 97       	sbiw	r30, 0x01	; 1
     954:	f1 f7       	brne	.-4      	; 0x952 <__stack+0xf3>
     956:	8f 01       	movw	r16, r30
     958:	1c 8f       	std	Y+28, r17	; 0x1c
     95a:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(5);
}
     95c:	6d 96       	adiw	r28, 0x1d	; 29
     95e:	0f b6       	in	r0, 0x3f	; 63
     960:	f8 94       	cli
     962:	de bf       	out	0x3e, r29	; 62
     964:	0f be       	out	0x3f, r0	; 63
     966:	cd bf       	out	0x3d, r28	; 61
     968:	cf 91       	pop	r28
     96a:	df 91       	pop	r29
     96c:	1f 91       	pop	r17
     96e:	0f 91       	pop	r16
     970:	08 95       	ret

00000972 <LCDPrint>:
void LCDPrint(char *str){
     972:	df 93       	push	r29
     974:	cf 93       	push	r28
     976:	00 d0       	rcall	.+0      	; 0x978 <LCDPrint+0x6>
     978:	00 d0       	rcall	.+0      	; 0x97a <LCDPrint+0x8>
     97a:	cd b7       	in	r28, 0x3d	; 61
     97c:	de b7       	in	r29, 0x3e	; 62
     97e:	9c 83       	std	Y+4, r25	; 0x04
     980:	8b 83       	std	Y+3, r24	; 0x03
 	unsigned int i=0;
     982:	1a 82       	std	Y+2, r1	; 0x02
     984:	19 82       	std	Y+1, r1	; 0x01
 	while(str[i]!='\0')	{
     986:	0f c0       	rjmp	.+30     	; 0x9a6 <LCDPrint+0x34>
    	LCDData(str[i]);	 // sending data on LCD byte by byte
     988:	2b 81       	ldd	r18, Y+3	; 0x03
     98a:	3c 81       	ldd	r19, Y+4	; 0x04
     98c:	89 81       	ldd	r24, Y+1	; 0x01
     98e:	9a 81       	ldd	r25, Y+2	; 0x02
     990:	82 0f       	add	r24, r18
     992:	93 1f       	adc	r25, r19
     994:	fc 01       	movw	r30, r24
     996:	80 81       	ld	r24, Z
     998:	0e 94 92 03 	call	0x724	; 0x724 <LCDData>
    	i++;
     99c:	89 81       	ldd	r24, Y+1	; 0x01
     99e:	9a 81       	ldd	r25, Y+2	; 0x02
     9a0:	01 96       	adiw	r24, 0x01	; 1
     9a2:	9a 83       	std	Y+2, r25	; 0x02
     9a4:	89 83       	std	Y+1, r24	; 0x01
	ctrl = (1<<rs)|(0<<rw)|(0<<en);
	_delay_ms(5);
}
void LCDPrint(char *str){
 	unsigned int i=0;
 	while(str[i]!='\0')	{
     9a6:	2b 81       	ldd	r18, Y+3	; 0x03
     9a8:	3c 81       	ldd	r19, Y+4	; 0x04
     9aa:	89 81       	ldd	r24, Y+1	; 0x01
     9ac:	9a 81       	ldd	r25, Y+2	; 0x02
     9ae:	82 0f       	add	r24, r18
     9b0:	93 1f       	adc	r25, r19
     9b2:	fc 01       	movw	r30, r24
     9b4:	80 81       	ld	r24, Z
     9b6:	88 23       	and	r24, r24
     9b8:	39 f7       	brne	.-50     	; 0x988 <LCDPrint+0x16>
    	LCDData(str[i]);	 // sending data on LCD byte by byte
    	i++;
  	}
}
     9ba:	0f 90       	pop	r0
     9bc:	0f 90       	pop	r0
     9be:	0f 90       	pop	r0
     9c0:	0f 90       	pop	r0
     9c2:	cf 91       	pop	r28
     9c4:	df 91       	pop	r29
     9c6:	08 95       	ret

000009c8 <LCDClear>:
void LCDClear() {
     9c8:	df 93       	push	r29
     9ca:	cf 93       	push	r28
     9cc:	cd b7       	in	r28, 0x3d	; 61
     9ce:	de b7       	in	r29, 0x3e	; 62
	LCDCmd(0x01);
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <LCDCmd>
}
     9d6:	cf 91       	pop	r28
     9d8:	df 91       	pop	r29
     9da:	08 95       	ret

000009dc <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y) {
     9dc:	df 93       	push	r29
     9de:	cf 93       	push	r28
     9e0:	00 d0       	rcall	.+0      	; 0x9e2 <LCDGotoXY+0x6>
     9e2:	0f 92       	push	r0
     9e4:	cd b7       	in	r28, 0x3d	; 61
     9e6:	de b7       	in	r29, 0x3e	; 62
     9e8:	8a 83       	std	Y+2, r24	; 0x02
     9ea:	6b 83       	std	Y+3, r22	; 0x03
 	uint8_t address=0x80;
     9ec:	80 e8       	ldi	r24, 0x80	; 128
     9ee:	89 83       	std	Y+1, r24	; 0x01
 	if(y==1) {
     9f0:	8b 81       	ldd	r24, Y+3	; 0x03
     9f2:	81 30       	cpi	r24, 0x01	; 1
     9f4:	11 f4       	brne	.+4      	; 0x9fa <LCDGotoXY+0x1e>
  		address=0xC0;
     9f6:	80 ec       	ldi	r24, 0xC0	; 192
     9f8:	89 83       	std	Y+1, r24	; 0x01
  	}

	address+=x;
     9fa:	99 81       	ldd	r25, Y+1	; 0x01
     9fc:	8a 81       	ldd	r24, Y+2	; 0x02
     9fe:	89 0f       	add	r24, r25
     a00:	89 83       	std	Y+1, r24	; 0x01
  	LCDCmd(address);
     a02:	89 81       	ldd	r24, Y+1	; 0x01
     a04:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <LCDCmd>
}
     a08:	0f 90       	pop	r0
     a0a:	0f 90       	pop	r0
     a0c:	0f 90       	pop	r0
     a0e:	cf 91       	pop	r28
     a10:	df 91       	pop	r29
     a12:	08 95       	ret

00000a14 <LCDSmartWrite>:
void LCDSmartWrite(int x,int y,char *str) {
     a14:	df 93       	push	r29
     a16:	cf 93       	push	r28
     a18:	cd b7       	in	r28, 0x3d	; 61
     a1a:	de b7       	in	r29, 0x3e	; 62
     a1c:	28 97       	sbiw	r28, 0x08	; 8
     a1e:	0f b6       	in	r0, 0x3f	; 63
     a20:	f8 94       	cli
     a22:	de bf       	out	0x3e, r29	; 62
     a24:	0f be       	out	0x3f, r0	; 63
     a26:	cd bf       	out	0x3d, r28	; 61
     a28:	9c 83       	std	Y+4, r25	; 0x04
     a2a:	8b 83       	std	Y+3, r24	; 0x03
     a2c:	7e 83       	std	Y+6, r23	; 0x06
     a2e:	6d 83       	std	Y+5, r22	; 0x05
     a30:	58 87       	std	Y+8, r21	; 0x08
     a32:	4f 83       	std	Y+7, r20	; 0x07
	int j=0;
     a34:	1a 82       	std	Y+2, r1	; 0x02
     a36:	19 82       	std	Y+1, r1	; 0x01
 	while(str[j]) {
     a38:	25 c0       	rjmp	.+74     	; 0xa84 <LCDSmartWrite+0x70>
  		if(x>15) {
     a3a:	8b 81       	ldd	r24, Y+3	; 0x03
     a3c:	9c 81       	ldd	r25, Y+4	; 0x04
     a3e:	80 31       	cpi	r24, 0x10	; 16
     a40:	91 05       	cpc	r25, r1
     a42:	3c f0       	brlt	.+14     	; 0xa52 <LCDSmartWrite+0x3e>
    		x=0;
     a44:	1c 82       	std	Y+4, r1	; 0x04
     a46:	1b 82       	std	Y+3, r1	; 0x03
			y++;
     a48:	8d 81       	ldd	r24, Y+5	; 0x05
     a4a:	9e 81       	ldd	r25, Y+6	; 0x06
     a4c:	01 96       	adiw	r24, 0x01	; 1
     a4e:	9e 83       	std	Y+6, r25	; 0x06
     a50:	8d 83       	std	Y+5, r24	; 0x05
   		}

		LCDGotoXY(x,y);
     a52:	8b 81       	ldd	r24, Y+3	; 0x03
     a54:	9d 81       	ldd	r25, Y+5	; 0x05
     a56:	69 2f       	mov	r22, r25
     a58:	0e 94 ee 04 	call	0x9dc	; 0x9dc <LCDGotoXY>
  		LCDData(str[j]);
     a5c:	89 81       	ldd	r24, Y+1	; 0x01
     a5e:	9a 81       	ldd	r25, Y+2	; 0x02
     a60:	2f 81       	ldd	r18, Y+7	; 0x07
     a62:	38 85       	ldd	r19, Y+8	; 0x08
     a64:	82 0f       	add	r24, r18
     a66:	93 1f       	adc	r25, r19
     a68:	fc 01       	movw	r30, r24
     a6a:	80 81       	ld	r24, Z
     a6c:	0e 94 92 03 	call	0x724	; 0x724 <LCDData>
  		j++;
     a70:	89 81       	ldd	r24, Y+1	; 0x01
     a72:	9a 81       	ldd	r25, Y+2	; 0x02
     a74:	01 96       	adiw	r24, 0x01	; 1
     a76:	9a 83       	std	Y+2, r25	; 0x02
     a78:	89 83       	std	Y+1, r24	; 0x01
  		x++;
     a7a:	8b 81       	ldd	r24, Y+3	; 0x03
     a7c:	9c 81       	ldd	r25, Y+4	; 0x04
     a7e:	01 96       	adiw	r24, 0x01	; 1
     a80:	9c 83       	std	Y+4, r25	; 0x04
     a82:	8b 83       	std	Y+3, r24	; 0x03
	address+=x;
  	LCDCmd(address);
}
void LCDSmartWrite(int x,int y,char *str) {
	int j=0;
 	while(str[j]) {
     a84:	89 81       	ldd	r24, Y+1	; 0x01
     a86:	9a 81       	ldd	r25, Y+2	; 0x02
     a88:	2f 81       	ldd	r18, Y+7	; 0x07
     a8a:	38 85       	ldd	r19, Y+8	; 0x08
     a8c:	82 0f       	add	r24, r18
     a8e:	93 1f       	adc	r25, r19
     a90:	fc 01       	movw	r30, r24
     a92:	80 81       	ld	r24, Z
     a94:	88 23       	and	r24, r24
     a96:	89 f6       	brne	.-94     	; 0xa3a <LCDSmartWrite+0x26>
		LCDGotoXY(x,y);
  		LCDData(str[j]);
  		j++;
  		x++;
 	}
}
     a98:	28 96       	adiw	r28, 0x08	; 8
     a9a:	0f b6       	in	r0, 0x3f	; 63
     a9c:	f8 94       	cli
     a9e:	de bf       	out	0x3e, r29	; 62
     aa0:	0f be       	out	0x3f, r0	; 63
     aa2:	cd bf       	out	0x3d, r28	; 61
     aa4:	cf 91       	pop	r28
     aa6:	df 91       	pop	r29
     aa8:	08 95       	ret

00000aaa <initLcd>:
void initLcd() { initLCD(); }
     aaa:	df 93       	push	r29
     aac:	cf 93       	push	r28
     aae:	cd b7       	in	r28, 0x3d	; 61
     ab0:	de b7       	in	r29, 0x3e	; 62
     ab2:	0e 94 49 00 	call	0x92	; 0x92 <initLCD>
     ab6:	cf 91       	pop	r28
     ab8:	df 91       	pop	r29
     aba:	08 95       	ret

00000abc <USART_Init>:

void USART_Init( unsigned char ubrr) {
     abc:	df 93       	push	r29
     abe:	cf 93       	push	r28
     ac0:	0f 92       	push	r0
     ac2:	cd b7       	in	r28, 0x3d	; 61
     ac4:	de b7       	in	r29, 0x3e	; 62
     ac6:	89 83       	std	Y+1, r24	; 0x01
	UBRRH = 0;
     ac8:	80 e4       	ldi	r24, 0x40	; 64
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	fc 01       	movw	r30, r24
     ace:	10 82       	st	Z, r1
	UBRRL = ubrr;
     ad0:	89 e2       	ldi	r24, 0x29	; 41
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	29 81       	ldd	r18, Y+1	; 0x01
     ad6:	fc 01       	movw	r30, r24
     ad8:	20 83       	st	Z, r18

	UCSRB|= (1<<RXEN)|(1<<TXEN) | (1<<RXCIE);
     ada:	8a e2       	ldi	r24, 0x2A	; 42
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	2a e2       	ldi	r18, 0x2A	; 42
     ae0:	30 e0       	ldi	r19, 0x00	; 0
     ae2:	f9 01       	movw	r30, r18
     ae4:	20 81       	ld	r18, Z
     ae6:	28 69       	ori	r18, 0x98	; 152
     ae8:	fc 01       	movw	r30, r24
     aea:	20 83       	st	Z, r18
	UCSRC |= (1 << URSEL)|(3<<UCSZ0);
     aec:	80 e4       	ldi	r24, 0x40	; 64
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	20 e4       	ldi	r18, 0x40	; 64
     af2:	30 e0       	ldi	r19, 0x00	; 0
     af4:	f9 01       	movw	r30, r18
     af6:	20 81       	ld	r18, Z
     af8:	26 68       	ori	r18, 0x86	; 134
     afa:	fc 01       	movw	r30, r24
     afc:	20 83       	st	Z, r18
}
     afe:	0f 90       	pop	r0
     b00:	cf 91       	pop	r28
     b02:	df 91       	pop	r29
     b04:	08 95       	ret

00000b06 <USART_Transmit>:
void USART_Transmit( unsigned char data ) {
     b06:	df 93       	push	r29
     b08:	cf 93       	push	r28
     b0a:	0f 92       	push	r0
     b0c:	cd b7       	in	r28, 0x3d	; 61
     b0e:	de b7       	in	r29, 0x3e	; 62
     b10:	89 83       	std	Y+1, r24	; 0x01
	while ( !( UCSRA & (1<<UDRE))) ;
     b12:	00 00       	nop
     b14:	8b e2       	ldi	r24, 0x2B	; 43
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	fc 01       	movw	r30, r24
     b1a:	80 81       	ld	r24, Z
     b1c:	88 2f       	mov	r24, r24
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	80 72       	andi	r24, 0x20	; 32
     b22:	90 70       	andi	r25, 0x00	; 0
     b24:	00 97       	sbiw	r24, 0x00	; 0
     b26:	b1 f3       	breq	.-20     	; 0xb14 <USART_Transmit+0xe>
	UDR = data;
     b28:	8c e2       	ldi	r24, 0x2C	; 44
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	29 81       	ldd	r18, Y+1	; 0x01
     b2e:	fc 01       	movw	r30, r24
     b30:	20 83       	st	Z, r18
}
     b32:	0f 90       	pop	r0
     b34:	cf 91       	pop	r28
     b36:	df 91       	pop	r29
     b38:	08 95       	ret

00000b3a <USART_Receive>:
unsigned char USART_Receive( void ) {
     b3a:	df 93       	push	r29
     b3c:	cf 93       	push	r28
     b3e:	cd b7       	in	r28, 0x3d	; 61
     b40:	de b7       	in	r29, 0x3e	; 62
	while ( !(UCSRA & (1<<RXC))) ;
     b42:	00 00       	nop
     b44:	8b e2       	ldi	r24, 0x2B	; 43
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	fc 01       	movw	r30, r24
     b4a:	80 81       	ld	r24, Z
     b4c:	88 23       	and	r24, r24
     b4e:	d4 f7       	brge	.-12     	; 0xb44 <USART_Receive+0xa>
	return UDR;
     b50:	8c e2       	ldi	r24, 0x2C	; 44
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	fc 01       	movw	r30, r24
     b56:	80 81       	ld	r24, Z
}
     b58:	cf 91       	pop	r28
     b5a:	df 91       	pop	r29
     b5c:	08 95       	ret

00000b5e <usartPrintString>:
void usartPrintString(char *buffer){
     b5e:	df 93       	push	r29
     b60:	cf 93       	push	r28
     b62:	00 d0       	rcall	.+0      	; 0xb64 <usartPrintString+0x6>
     b64:	00 d0       	rcall	.+0      	; 0xb66 <usartPrintString+0x8>
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62
     b6a:	9c 83       	std	Y+4, r25	; 0x04
     b6c:	8b 83       	std	Y+3, r24	; 0x03
	int count = 0;
     b6e:	1a 82       	std	Y+2, r1	; 0x02
     b70:	19 82       	std	Y+1, r1	; 0x01
	while (buffer[count] != '\0'){
     b72:	0f c0       	rjmp	.+30     	; 0xb92 <usartPrintString+0x34>
		USART_Transmit(buffer[count]);
     b74:	89 81       	ldd	r24, Y+1	; 0x01
     b76:	9a 81       	ldd	r25, Y+2	; 0x02
     b78:	2b 81       	ldd	r18, Y+3	; 0x03
     b7a:	3c 81       	ldd	r19, Y+4	; 0x04
     b7c:	82 0f       	add	r24, r18
     b7e:	93 1f       	adc	r25, r19
     b80:	fc 01       	movw	r30, r24
     b82:	80 81       	ld	r24, Z
     b84:	0e 94 83 05 	call	0xb06	; 0xb06 <USART_Transmit>
		count++;
     b88:	89 81       	ldd	r24, Y+1	; 0x01
     b8a:	9a 81       	ldd	r25, Y+2	; 0x02
     b8c:	01 96       	adiw	r24, 0x01	; 1
     b8e:	9a 83       	std	Y+2, r25	; 0x02
     b90:	89 83       	std	Y+1, r24	; 0x01
	while ( !(UCSRA & (1<<RXC))) ;
	return UDR;
}
void usartPrintString(char *buffer){
	int count = 0;
	while (buffer[count] != '\0'){
     b92:	89 81       	ldd	r24, Y+1	; 0x01
     b94:	9a 81       	ldd	r25, Y+2	; 0x02
     b96:	2b 81       	ldd	r18, Y+3	; 0x03
     b98:	3c 81       	ldd	r19, Y+4	; 0x04
     b9a:	82 0f       	add	r24, r18
     b9c:	93 1f       	adc	r25, r19
     b9e:	fc 01       	movw	r30, r24
     ba0:	80 81       	ld	r24, Z
     ba2:	88 23       	and	r24, r24
     ba4:	39 f7       	brne	.-50     	; 0xb74 <usartPrintString+0x16>
		USART_Transmit(buffer[count]);
		count++;
	}
}
     ba6:	0f 90       	pop	r0
     ba8:	0f 90       	pop	r0
     baa:	0f 90       	pop	r0
     bac:	0f 90       	pop	r0
     bae:	cf 91       	pop	r28
     bb0:	df 91       	pop	r29
     bb2:	08 95       	ret

00000bb4 <__vector_13>:

ISR(USART_RXC_vect){
     bb4:	1f 92       	push	r1
     bb6:	0f 92       	push	r0
     bb8:	0f b6       	in	r0, 0x3f	; 63
     bba:	0f 92       	push	r0
     bbc:	11 24       	eor	r1, r1
     bbe:	2f 93       	push	r18
     bc0:	8f 93       	push	r24
     bc2:	9f 93       	push	r25
     bc4:	ef 93       	push	r30
     bc6:	ff 93       	push	r31
     bc8:	df 93       	push	r29
     bca:	cf 93       	push	r28
     bcc:	00 d0       	rcall	.+0      	; 0xbce <__vector_13+0x1a>
     bce:	cd b7       	in	r28, 0x3d	; 61
     bd0:	de b7       	in	r29, 0x3e	; 62
	unsigned char a;
	char done = 0;
     bd2:	19 82       	std	Y+1, r1	; 0x01
	a = UDR;
     bd4:	8c e2       	ldi	r24, 0x2C	; 44
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	fc 01       	movw	r30, r24
     bda:	80 81       	ld	r24, Z
     bdc:	8a 83       	std	Y+2, r24	; 0x02
	buffer[bufferCount] = a;
     bde:	80 91 f9 02 	lds	r24, 0x02F9
     be2:	90 91 fa 02 	lds	r25, 0x02FA
     be6:	85 50       	subi	r24, 0x05	; 5
     be8:	9d 4f       	sbci	r25, 0xFD	; 253
     bea:	2a 81       	ldd	r18, Y+2	; 0x02
     bec:	fc 01       	movw	r30, r24
     bee:	20 83       	st	Z, r18
	bufferCount++;
     bf0:	80 91 f9 02 	lds	r24, 0x02F9
     bf4:	90 91 fa 02 	lds	r25, 0x02FA
     bf8:	01 96       	adiw	r24, 0x01	; 1
     bfa:	90 93 fa 02 	sts	0x02FA, r25
     bfe:	80 93 f9 02 	sts	0x02F9, r24

	/************* Check for OK *******************************/
	if (buffer[bufferCount-4] == 'O'){
     c02:	80 91 f9 02 	lds	r24, 0x02F9
     c06:	90 91 fa 02 	lds	r25, 0x02FA
     c0a:	04 97       	sbiw	r24, 0x04	; 4
     c0c:	85 50       	subi	r24, 0x05	; 5
     c0e:	9d 4f       	sbci	r25, 0xFD	; 253
     c10:	fc 01       	movw	r30, r24
     c12:	80 81       	ld	r24, Z
     c14:	8f 34       	cpi	r24, 0x4F	; 79
     c16:	91 f5       	brne	.+100    	; 0xc7c <__vector_13+0xc8>
		if (buffer[bufferCount-3] == 'K'){
     c18:	80 91 f9 02 	lds	r24, 0x02F9
     c1c:	90 91 fa 02 	lds	r25, 0x02FA
     c20:	03 97       	sbiw	r24, 0x03	; 3
     c22:	85 50       	subi	r24, 0x05	; 5
     c24:	9d 4f       	sbci	r25, 0xFD	; 253
     c26:	fc 01       	movw	r30, r24
     c28:	80 81       	ld	r24, Z
     c2a:	8b 34       	cpi	r24, 0x4B	; 75
     c2c:	39 f5       	brne	.+78     	; 0xc7c <__vector_13+0xc8>
			if (buffer[bufferCount-2] == SR){
     c2e:	80 91 f9 02 	lds	r24, 0x02F9
     c32:	90 91 fa 02 	lds	r25, 0x02FA
     c36:	02 97       	sbiw	r24, 0x02	; 2
     c38:	85 50       	subi	r24, 0x05	; 5
     c3a:	9d 4f       	sbci	r25, 0xFD	; 253
     c3c:	fc 01       	movw	r30, r24
     c3e:	80 81       	ld	r24, Z
     c40:	8d 30       	cpi	r24, 0x0D	; 13
     c42:	e1 f4       	brne	.+56     	; 0xc7c <__vector_13+0xc8>
				if (buffer[bufferCount-1] == SN){
     c44:	80 91 f9 02 	lds	r24, 0x02F9
     c48:	90 91 fa 02 	lds	r25, 0x02FA
     c4c:	01 97       	sbiw	r24, 0x01	; 1
     c4e:	85 50       	subi	r24, 0x05	; 5
     c50:	9d 4f       	sbci	r25, 0xFD	; 253
     c52:	fc 01       	movw	r30, r24
     c54:	80 81       	ld	r24, Z
     c56:	8a 30       	cpi	r24, 0x0A	; 10
     c58:	89 f4       	brne	.+34     	; 0xc7c <__vector_13+0xc8>
					buffer[bufferCount] = '\0';
     c5a:	80 91 f9 02 	lds	r24, 0x02F9
     c5e:	90 91 fa 02 	lds	r25, 0x02FA
     c62:	85 50       	subi	r24, 0x05	; 5
     c64:	9d 4f       	sbci	r25, 0xFD	; 253
     c66:	fc 01       	movw	r30, r24
     c68:	10 82       	st	Z, r1
					okComplete = 1;
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	80 93 f8 02 	sts	0x02F8, r24

					bufferCount = 0;
     c70:	10 92 fa 02 	sts	0x02FA, r1
     c74:	10 92 f9 02 	sts	0x02F9, r1
					done = 1;
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	/***********************************************************/

	/************************ Check for ERROR ******************/
	if (buffer[bufferCount-4] == 'O' && !(done)){
     c7c:	80 91 f9 02 	lds	r24, 0x02F9
     c80:	90 91 fa 02 	lds	r25, 0x02FA
     c84:	04 97       	sbiw	r24, 0x04	; 4
     c86:	85 50       	subi	r24, 0x05	; 5
     c88:	9d 4f       	sbci	r25, 0xFD	; 253
     c8a:	fc 01       	movw	r30, r24
     c8c:	80 81       	ld	r24, Z
     c8e:	8f 34       	cpi	r24, 0x4F	; 79
     c90:	a9 f5       	brne	.+106    	; 0xcfc <__vector_13+0x148>
     c92:	89 81       	ldd	r24, Y+1	; 0x01
     c94:	88 23       	and	r24, r24
     c96:	91 f5       	brne	.+100    	; 0xcfc <__vector_13+0x148>
		if (buffer[bufferCount-3] == 'R'){
     c98:	80 91 f9 02 	lds	r24, 0x02F9
     c9c:	90 91 fa 02 	lds	r25, 0x02FA
     ca0:	03 97       	sbiw	r24, 0x03	; 3
     ca2:	85 50       	subi	r24, 0x05	; 5
     ca4:	9d 4f       	sbci	r25, 0xFD	; 253
     ca6:	fc 01       	movw	r30, r24
     ca8:	80 81       	ld	r24, Z
     caa:	82 35       	cpi	r24, 0x52	; 82
     cac:	39 f5       	brne	.+78     	; 0xcfc <__vector_13+0x148>
			if (buffer[bufferCount-2] == SR){
     cae:	80 91 f9 02 	lds	r24, 0x02F9
     cb2:	90 91 fa 02 	lds	r25, 0x02FA
     cb6:	02 97       	sbiw	r24, 0x02	; 2
     cb8:	85 50       	subi	r24, 0x05	; 5
     cba:	9d 4f       	sbci	r25, 0xFD	; 253
     cbc:	fc 01       	movw	r30, r24
     cbe:	80 81       	ld	r24, Z
     cc0:	8d 30       	cpi	r24, 0x0D	; 13
     cc2:	e1 f4       	brne	.+56     	; 0xcfc <__vector_13+0x148>
				if (buffer[bufferCount-1] == SN){
     cc4:	80 91 f9 02 	lds	r24, 0x02F9
     cc8:	90 91 fa 02 	lds	r25, 0x02FA
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	85 50       	subi	r24, 0x05	; 5
     cd0:	9d 4f       	sbci	r25, 0xFD	; 253
     cd2:	fc 01       	movw	r30, r24
     cd4:	80 81       	ld	r24, Z
     cd6:	8a 30       	cpi	r24, 0x0A	; 10
     cd8:	89 f4       	brne	.+34     	; 0xcfc <__vector_13+0x148>
					buffer[bufferCount] = '\0';
     cda:	80 91 f9 02 	lds	r24, 0x02F9
     cde:	90 91 fa 02 	lds	r25, 0x02FA
     ce2:	85 50       	subi	r24, 0x05	; 5
     ce4:	9d 4f       	sbci	r25, 0xFD	; 253
     ce6:	fc 01       	movw	r30, r24
     ce8:	10 82       	st	Z, r1
					okComplete = 2;
     cea:	82 e0       	ldi	r24, 0x02	; 2
     cec:	80 93 f8 02 	sts	0x02F8, r24

					bufferCount = 0;
     cf0:	10 92 fa 02 	sts	0x02FA, r1
     cf4:	10 92 f9 02 	sts	0x02F9, r1
					done = 1;
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	/***********************************************************/

	/************** Check for New Message 1 bit**********************/
	if (buffer[bufferCount-1] == SN && !(done)){
     cfc:	80 91 f9 02 	lds	r24, 0x02F9
     d00:	90 91 fa 02 	lds	r25, 0x02FA
     d04:	01 97       	sbiw	r24, 0x01	; 1
     d06:	85 50       	subi	r24, 0x05	; 5
     d08:	9d 4f       	sbci	r25, 0xFD	; 253
     d0a:	fc 01       	movw	r30, r24
     d0c:	80 81       	ld	r24, Z
     d0e:	8a 30       	cpi	r24, 0x0A	; 10
     d10:	09 f0       	breq	.+2      	; 0xd14 <__vector_13+0x160>
     d12:	68 c0       	rjmp	.+208    	; 0xde4 <__vector_13+0x230>
     d14:	89 81       	ldd	r24, Y+1	; 0x01
     d16:	88 23       	and	r24, r24
     d18:	09 f0       	breq	.+2      	; 0xd1c <__vector_13+0x168>
     d1a:	64 c0       	rjmp	.+200    	; 0xde4 <__vector_13+0x230>
		if (buffer[bufferCount-2] == SR){
     d1c:	80 91 f9 02 	lds	r24, 0x02F9
     d20:	90 91 fa 02 	lds	r25, 0x02FA
     d24:	02 97       	sbiw	r24, 0x02	; 2
     d26:	85 50       	subi	r24, 0x05	; 5
     d28:	9d 4f       	sbci	r25, 0xFD	; 253
     d2a:	fc 01       	movw	r30, r24
     d2c:	80 81       	ld	r24, Z
     d2e:	8d 30       	cpi	r24, 0x0D	; 13
     d30:	09 f0       	breq	.+2      	; 0xd34 <__vector_13+0x180>
     d32:	58 c0       	rjmp	.+176    	; 0xde4 <__vector_13+0x230>
			if (buffer[bufferCount-4] == ','){
     d34:	80 91 f9 02 	lds	r24, 0x02F9
     d38:	90 91 fa 02 	lds	r25, 0x02FA
     d3c:	04 97       	sbiw	r24, 0x04	; 4
     d3e:	85 50       	subi	r24, 0x05	; 5
     d40:	9d 4f       	sbci	r25, 0xFD	; 253
     d42:	fc 01       	movw	r30, r24
     d44:	80 81       	ld	r24, Z
     d46:	8c 32       	cpi	r24, 0x2C	; 44
     d48:	09 f0       	breq	.+2      	; 0xd4c <__vector_13+0x198>
     d4a:	4c c0       	rjmp	.+152    	; 0xde4 <__vector_13+0x230>
				if (buffer[bufferCount-5] == 34){
     d4c:	80 91 f9 02 	lds	r24, 0x02F9
     d50:	90 91 fa 02 	lds	r25, 0x02FA
     d54:	05 97       	sbiw	r24, 0x05	; 5
     d56:	85 50       	subi	r24, 0x05	; 5
     d58:	9d 4f       	sbci	r25, 0xFD	; 253
     d5a:	fc 01       	movw	r30, r24
     d5c:	80 81       	ld	r24, Z
     d5e:	82 32       	cpi	r24, 0x22	; 34
     d60:	09 f0       	breq	.+2      	; 0xd64 <__vector_13+0x1b0>
     d62:	40 c0       	rjmp	.+128    	; 0xde4 <__vector_13+0x230>
					if (buffer[bufferCount-6] == 'M'){
     d64:	80 91 f9 02 	lds	r24, 0x02F9
     d68:	90 91 fa 02 	lds	r25, 0x02FA
     d6c:	06 97       	sbiw	r24, 0x06	; 6
     d6e:	85 50       	subi	r24, 0x05	; 5
     d70:	9d 4f       	sbci	r25, 0xFD	; 253
     d72:	fc 01       	movw	r30, r24
     d74:	80 81       	ld	r24, Z
     d76:	8d 34       	cpi	r24, 0x4D	; 77
     d78:	a9 f5       	brne	.+106    	; 0xde4 <__vector_13+0x230>
						if (buffer[bufferCount-7] == 'S'){
     d7a:	80 91 f9 02 	lds	r24, 0x02F9
     d7e:	90 91 fa 02 	lds	r25, 0x02FA
     d82:	07 97       	sbiw	r24, 0x07	; 7
     d84:	85 50       	subi	r24, 0x05	; 5
     d86:	9d 4f       	sbci	r25, 0xFD	; 253
     d88:	fc 01       	movw	r30, r24
     d8a:	80 81       	ld	r24, Z
     d8c:	83 35       	cpi	r24, 0x53	; 83
     d8e:	51 f5       	brne	.+84     	; 0xde4 <__vector_13+0x230>
							if (buffer[bufferCount-8] == 34){
     d90:	80 91 f9 02 	lds	r24, 0x02F9
     d94:	90 91 fa 02 	lds	r25, 0x02FA
     d98:	08 97       	sbiw	r24, 0x08	; 8
     d9a:	85 50       	subi	r24, 0x05	; 5
     d9c:	9d 4f       	sbci	r25, 0xFD	; 253
     d9e:	fc 01       	movw	r30, r24
     da0:	80 81       	ld	r24, Z
     da2:	82 32       	cpi	r24, 0x22	; 34
     da4:	f9 f4       	brne	.+62     	; 0xde4 <__vector_13+0x230>
								msgReceived = 1;
     da6:	81 e0       	ldi	r24, 0x01	; 1
     da8:	80 93 fa 03 	sts	0x03FA, r24
								msgNumber = buffer[bufferCount-3];
     dac:	80 91 f9 02 	lds	r24, 0x02F9
     db0:	90 91 fa 02 	lds	r25, 0x02FA
     db4:	03 97       	sbiw	r24, 0x03	; 3
     db6:	85 50       	subi	r24, 0x05	; 5
     db8:	9d 4f       	sbci	r25, 0xFD	; 253
     dba:	fc 01       	movw	r30, r24
     dbc:	80 81       	ld	r24, Z
     dbe:	80 93 60 00 	sts	0x0060, r24
								msgNumber1 = -1;
     dc2:	8f ef       	ldi	r24, 0xFF	; 255
     dc4:	80 93 61 00 	sts	0x0061, r24
								buffer[bufferCount] = '\0';
     dc8:	80 91 f9 02 	lds	r24, 0x02F9
     dcc:	90 91 fa 02 	lds	r25, 0x02FA
     dd0:	85 50       	subi	r24, 0x05	; 5
     dd2:	9d 4f       	sbci	r25, 0xFD	; 253
     dd4:	fc 01       	movw	r30, r24
     dd6:	10 82       	st	Z, r1

								done = 1;
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	89 83       	std	Y+1, r24	; 0x01
								bufferCount = 0;
     ddc:	10 92 fa 02 	sts	0x02FA, r1
     de0:	10 92 f9 02 	sts	0x02F9, r1
		}
	}
	/***********************************************************/

	/************** Check for New Message 2 bit**********************/
		if (buffer[bufferCount-1] == SN && !(done)){
     de4:	80 91 f9 02 	lds	r24, 0x02F9
     de8:	90 91 fa 02 	lds	r25, 0x02FA
     dec:	01 97       	sbiw	r24, 0x01	; 1
     dee:	85 50       	subi	r24, 0x05	; 5
     df0:	9d 4f       	sbci	r25, 0xFD	; 253
     df2:	fc 01       	movw	r30, r24
     df4:	80 81       	ld	r24, Z
     df6:	8a 30       	cpi	r24, 0x0A	; 10
     df8:	09 f0       	breq	.+2      	; 0xdfc <__vector_13+0x248>
     dfa:	70 c0       	rjmp	.+224    	; 0xedc <__vector_13+0x328>
     dfc:	89 81       	ldd	r24, Y+1	; 0x01
     dfe:	88 23       	and	r24, r24
     e00:	09 f0       	breq	.+2      	; 0xe04 <__vector_13+0x250>
     e02:	6c c0       	rjmp	.+216    	; 0xedc <__vector_13+0x328>
			if (buffer[bufferCount-2] == SR){
     e04:	80 91 f9 02 	lds	r24, 0x02F9
     e08:	90 91 fa 02 	lds	r25, 0x02FA
     e0c:	02 97       	sbiw	r24, 0x02	; 2
     e0e:	85 50       	subi	r24, 0x05	; 5
     e10:	9d 4f       	sbci	r25, 0xFD	; 253
     e12:	fc 01       	movw	r30, r24
     e14:	80 81       	ld	r24, Z
     e16:	8d 30       	cpi	r24, 0x0D	; 13
     e18:	09 f0       	breq	.+2      	; 0xe1c <__vector_13+0x268>
     e1a:	60 c0       	rjmp	.+192    	; 0xedc <__vector_13+0x328>
				if (buffer[bufferCount-5] == ','){
     e1c:	80 91 f9 02 	lds	r24, 0x02F9
     e20:	90 91 fa 02 	lds	r25, 0x02FA
     e24:	05 97       	sbiw	r24, 0x05	; 5
     e26:	85 50       	subi	r24, 0x05	; 5
     e28:	9d 4f       	sbci	r25, 0xFD	; 253
     e2a:	fc 01       	movw	r30, r24
     e2c:	80 81       	ld	r24, Z
     e2e:	8c 32       	cpi	r24, 0x2C	; 44
     e30:	09 f0       	breq	.+2      	; 0xe34 <__vector_13+0x280>
     e32:	54 c0       	rjmp	.+168    	; 0xedc <__vector_13+0x328>
					if (buffer[bufferCount-6] == 34){
     e34:	80 91 f9 02 	lds	r24, 0x02F9
     e38:	90 91 fa 02 	lds	r25, 0x02FA
     e3c:	06 97       	sbiw	r24, 0x06	; 6
     e3e:	85 50       	subi	r24, 0x05	; 5
     e40:	9d 4f       	sbci	r25, 0xFD	; 253
     e42:	fc 01       	movw	r30, r24
     e44:	80 81       	ld	r24, Z
     e46:	82 32       	cpi	r24, 0x22	; 34
     e48:	09 f0       	breq	.+2      	; 0xe4c <__vector_13+0x298>
     e4a:	48 c0       	rjmp	.+144    	; 0xedc <__vector_13+0x328>
						if (buffer[bufferCount-7] == 'M'){
     e4c:	80 91 f9 02 	lds	r24, 0x02F9
     e50:	90 91 fa 02 	lds	r25, 0x02FA
     e54:	07 97       	sbiw	r24, 0x07	; 7
     e56:	85 50       	subi	r24, 0x05	; 5
     e58:	9d 4f       	sbci	r25, 0xFD	; 253
     e5a:	fc 01       	movw	r30, r24
     e5c:	80 81       	ld	r24, Z
     e5e:	8d 34       	cpi	r24, 0x4D	; 77
     e60:	e9 f5       	brne	.+122    	; 0xedc <__vector_13+0x328>
							if (buffer[bufferCount-8] == 'S'){
     e62:	80 91 f9 02 	lds	r24, 0x02F9
     e66:	90 91 fa 02 	lds	r25, 0x02FA
     e6a:	08 97       	sbiw	r24, 0x08	; 8
     e6c:	85 50       	subi	r24, 0x05	; 5
     e6e:	9d 4f       	sbci	r25, 0xFD	; 253
     e70:	fc 01       	movw	r30, r24
     e72:	80 81       	ld	r24, Z
     e74:	83 35       	cpi	r24, 0x53	; 83
     e76:	91 f5       	brne	.+100    	; 0xedc <__vector_13+0x328>
								if (buffer[bufferCount-9] == 34){
     e78:	80 91 f9 02 	lds	r24, 0x02F9
     e7c:	90 91 fa 02 	lds	r25, 0x02FA
     e80:	09 97       	sbiw	r24, 0x09	; 9
     e82:	85 50       	subi	r24, 0x05	; 5
     e84:	9d 4f       	sbci	r25, 0xFD	; 253
     e86:	fc 01       	movw	r30, r24
     e88:	80 81       	ld	r24, Z
     e8a:	82 32       	cpi	r24, 0x22	; 34
     e8c:	39 f5       	brne	.+78     	; 0xedc <__vector_13+0x328>
									msgReceived = 1;
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	80 93 fa 03 	sts	0x03FA, r24
									msgNumber = buffer[bufferCount - 4];
     e94:	80 91 f9 02 	lds	r24, 0x02F9
     e98:	90 91 fa 02 	lds	r25, 0x02FA
     e9c:	04 97       	sbiw	r24, 0x04	; 4
     e9e:	85 50       	subi	r24, 0x05	; 5
     ea0:	9d 4f       	sbci	r25, 0xFD	; 253
     ea2:	fc 01       	movw	r30, r24
     ea4:	80 81       	ld	r24, Z
     ea6:	80 93 60 00 	sts	0x0060, r24
									msgNumber1 = buffer[bufferCount - 3];
     eaa:	80 91 f9 02 	lds	r24, 0x02F9
     eae:	90 91 fa 02 	lds	r25, 0x02FA
     eb2:	03 97       	sbiw	r24, 0x03	; 3
     eb4:	85 50       	subi	r24, 0x05	; 5
     eb6:	9d 4f       	sbci	r25, 0xFD	; 253
     eb8:	fc 01       	movw	r30, r24
     eba:	80 81       	ld	r24, Z
     ebc:	80 93 61 00 	sts	0x0061, r24
									buffer[bufferCount] = '\0';
     ec0:	80 91 f9 02 	lds	r24, 0x02F9
     ec4:	90 91 fa 02 	lds	r25, 0x02FA
     ec8:	85 50       	subi	r24, 0x05	; 5
     eca:	9d 4f       	sbci	r25, 0xFD	; 253
     ecc:	fc 01       	movw	r30, r24
     ece:	10 82       	st	Z, r1

									done = 1;
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	89 83       	std	Y+1, r24	; 0x01
									bufferCount = 0;
     ed4:	10 92 fa 02 	sts	0x02FA, r1
     ed8:	10 92 f9 02 	sts	0x02F9, r1
			}
		}
		/***********************************************************/

	/********************** check for RING *********************/
	if (buffer[bufferCount-1] == SN && !(done)){
     edc:	80 91 f9 02 	lds	r24, 0x02F9
     ee0:	90 91 fa 02 	lds	r25, 0x02FA
     ee4:	01 97       	sbiw	r24, 0x01	; 1
     ee6:	85 50       	subi	r24, 0x05	; 5
     ee8:	9d 4f       	sbci	r25, 0xFD	; 253
     eea:	fc 01       	movw	r30, r24
     eec:	80 81       	ld	r24, Z
     eee:	8a 30       	cpi	r24, 0x0A	; 10
     ef0:	09 f0       	breq	.+2      	; 0xef4 <__vector_13+0x340>
     ef2:	44 c0       	rjmp	.+136    	; 0xf7c <__vector_13+0x3c8>
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
     ef6:	88 23       	and	r24, r24
     ef8:	09 f0       	breq	.+2      	; 0xefc <__vector_13+0x348>
     efa:	40 c0       	rjmp	.+128    	; 0xf7c <__vector_13+0x3c8>
		if (buffer[bufferCount - 2] == SR){
     efc:	80 91 f9 02 	lds	r24, 0x02F9
     f00:	90 91 fa 02 	lds	r25, 0x02FA
     f04:	02 97       	sbiw	r24, 0x02	; 2
     f06:	85 50       	subi	r24, 0x05	; 5
     f08:	9d 4f       	sbci	r25, 0xFD	; 253
     f0a:	fc 01       	movw	r30, r24
     f0c:	80 81       	ld	r24, Z
     f0e:	8d 30       	cpi	r24, 0x0D	; 13
     f10:	a9 f5       	brne	.+106    	; 0xf7c <__vector_13+0x3c8>
			if (buffer[bufferCount - 3] == 'G'){
     f12:	80 91 f9 02 	lds	r24, 0x02F9
     f16:	90 91 fa 02 	lds	r25, 0x02FA
     f1a:	03 97       	sbiw	r24, 0x03	; 3
     f1c:	85 50       	subi	r24, 0x05	; 5
     f1e:	9d 4f       	sbci	r25, 0xFD	; 253
     f20:	fc 01       	movw	r30, r24
     f22:	80 81       	ld	r24, Z
     f24:	87 34       	cpi	r24, 0x47	; 71
     f26:	51 f5       	brne	.+84     	; 0xf7c <__vector_13+0x3c8>
				if (buffer[bufferCount - 4] == 'N'){
     f28:	80 91 f9 02 	lds	r24, 0x02F9
     f2c:	90 91 fa 02 	lds	r25, 0x02FA
     f30:	04 97       	sbiw	r24, 0x04	; 4
     f32:	85 50       	subi	r24, 0x05	; 5
     f34:	9d 4f       	sbci	r25, 0xFD	; 253
     f36:	fc 01       	movw	r30, r24
     f38:	80 81       	ld	r24, Z
     f3a:	8e 34       	cpi	r24, 0x4E	; 78
     f3c:	f9 f4       	brne	.+62     	; 0xf7c <__vector_13+0x3c8>
					if (buffer[bufferCount - 5] == 'I'){
     f3e:	80 91 f9 02 	lds	r24, 0x02F9
     f42:	90 91 fa 02 	lds	r25, 0x02FA
     f46:	05 97       	sbiw	r24, 0x05	; 5
     f48:	85 50       	subi	r24, 0x05	; 5
     f4a:	9d 4f       	sbci	r25, 0xFD	; 253
     f4c:	fc 01       	movw	r30, r24
     f4e:	80 81       	ld	r24, Z
     f50:	89 34       	cpi	r24, 0x49	; 73
     f52:	a1 f4       	brne	.+40     	; 0xf7c <__vector_13+0x3c8>
						if (buffer[bufferCount - 6] == 'R'){
     f54:	80 91 f9 02 	lds	r24, 0x02F9
     f58:	90 91 fa 02 	lds	r25, 0x02FA
     f5c:	06 97       	sbiw	r24, 0x06	; 6
     f5e:	85 50       	subi	r24, 0x05	; 5
     f60:	9d 4f       	sbci	r25, 0xFD	; 253
     f62:	fc 01       	movw	r30, r24
     f64:	80 81       	ld	r24, Z
     f66:	82 35       	cpi	r24, 0x52	; 82
     f68:	49 f4       	brne	.+18     	; 0xf7c <__vector_13+0x3c8>
							ringReceived = 1;
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	80 93 fb 03 	sts	0x03FB, r24

							done = 1;
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	89 83       	std	Y+1, r24	; 0x01
							bufferCount = 0;
     f74:	10 92 fa 02 	sts	0x02FA, r1
     f78:	10 92 f9 02 	sts	0x02F9, r1
		}
	}
	/**************************************************************/

	/*************** bit advance check for error ******************/
	if (buffer[bufferCount - 1] == 'R' && !(done)){
     f7c:	80 91 f9 02 	lds	r24, 0x02F9
     f80:	90 91 fa 02 	lds	r25, 0x02FA
     f84:	01 97       	sbiw	r24, 0x01	; 1
     f86:	85 50       	subi	r24, 0x05	; 5
     f88:	9d 4f       	sbci	r25, 0xFD	; 253
     f8a:	fc 01       	movw	r30, r24
     f8c:	80 81       	ld	r24, Z
     f8e:	82 35       	cpi	r24, 0x52	; 82
     f90:	09 f0       	breq	.+2      	; 0xf94 <__vector_13+0x3e0>
     f92:	40 c0       	rjmp	.+128    	; 0x1014 <__vector_13+0x460>
     f94:	89 81       	ldd	r24, Y+1	; 0x01
     f96:	88 23       	and	r24, r24
     f98:	e9 f5       	brne	.+122    	; 0x1014 <__vector_13+0x460>
		if (buffer[bufferCount - 2] == 'O'){
     f9a:	80 91 f9 02 	lds	r24, 0x02F9
     f9e:	90 91 fa 02 	lds	r25, 0x02FA
     fa2:	02 97       	sbiw	r24, 0x02	; 2
     fa4:	85 50       	subi	r24, 0x05	; 5
     fa6:	9d 4f       	sbci	r25, 0xFD	; 253
     fa8:	fc 01       	movw	r30, r24
     faa:	80 81       	ld	r24, Z
     fac:	8f 34       	cpi	r24, 0x4F	; 79
     fae:	91 f5       	brne	.+100    	; 0x1014 <__vector_13+0x460>
			if (buffer[bufferCount - 3] == 'R'){
     fb0:	80 91 f9 02 	lds	r24, 0x02F9
     fb4:	90 91 fa 02 	lds	r25, 0x02FA
     fb8:	03 97       	sbiw	r24, 0x03	; 3
     fba:	85 50       	subi	r24, 0x05	; 5
     fbc:	9d 4f       	sbci	r25, 0xFD	; 253
     fbe:	fc 01       	movw	r30, r24
     fc0:	80 81       	ld	r24, Z
     fc2:	82 35       	cpi	r24, 0x52	; 82
     fc4:	39 f5       	brne	.+78     	; 0x1014 <__vector_13+0x460>
				if (buffer[bufferCount - 4] == 'R'){
     fc6:	80 91 f9 02 	lds	r24, 0x02F9
     fca:	90 91 fa 02 	lds	r25, 0x02FA
     fce:	04 97       	sbiw	r24, 0x04	; 4
     fd0:	85 50       	subi	r24, 0x05	; 5
     fd2:	9d 4f       	sbci	r25, 0xFD	; 253
     fd4:	fc 01       	movw	r30, r24
     fd6:	80 81       	ld	r24, Z
     fd8:	82 35       	cpi	r24, 0x52	; 82
     fda:	e1 f4       	brne	.+56     	; 0x1014 <__vector_13+0x460>
					if (buffer[bufferCount - 5] == 'E'){
     fdc:	80 91 f9 02 	lds	r24, 0x02F9
     fe0:	90 91 fa 02 	lds	r25, 0x02FA
     fe4:	05 97       	sbiw	r24, 0x05	; 5
     fe6:	85 50       	subi	r24, 0x05	; 5
     fe8:	9d 4f       	sbci	r25, 0xFD	; 253
     fea:	fc 01       	movw	r30, r24
     fec:	80 81       	ld	r24, Z
     fee:	85 34       	cpi	r24, 0x45	; 69
     ff0:	89 f4       	brne	.+34     	; 0x1014 <__vector_13+0x460>
						buffer[bufferCount] = '\0';
     ff2:	80 91 f9 02 	lds	r24, 0x02F9
     ff6:	90 91 fa 02 	lds	r25, 0x02FA
     ffa:	85 50       	subi	r24, 0x05	; 5
     ffc:	9d 4f       	sbci	r25, 0xFD	; 253
     ffe:	fc 01       	movw	r30, r24
    1000:	10 82       	st	Z, r1
						okComplete = 2;
    1002:	82 e0       	ldi	r24, 0x02	; 2
    1004:	80 93 f8 02 	sts	0x02F8, r24
						bufferCount = 0;
    1008:	10 92 fa 02 	sts	0x02FA, r1
    100c:	10 92 f9 02 	sts	0x02F9, r1
						done = 1;
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	89 83       	std	Y+1, r24	; 0x01
				}
			}
		}
	}
	/**************************************************************/
}
    1014:	0f 90       	pop	r0
    1016:	0f 90       	pop	r0
    1018:	cf 91       	pop	r28
    101a:	df 91       	pop	r29
    101c:	ff 91       	pop	r31
    101e:	ef 91       	pop	r30
    1020:	9f 91       	pop	r25
    1022:	8f 91       	pop	r24
    1024:	2f 91       	pop	r18
    1026:	0f 90       	pop	r0
    1028:	0f be       	out	0x3f, r0	; 63
    102a:	0f 90       	pop	r0
    102c:	1f 90       	pop	r1
    102e:	18 95       	reti

00001030 <length>:
/***************** String Manipulation Functions *********************/
//@ string manipulation functions algorithm
//@ copyright: Binayak Dhakal,
//@ Functions: length, indexOf, indexOfWithStart, subString, strCmp, occuranceOf
//@ split, freeSplitedString, replace
int length(char *string){
    1030:	df 93       	push	r29
    1032:	cf 93       	push	r28
    1034:	00 d0       	rcall	.+0      	; 0x1036 <length+0x6>
    1036:	00 d0       	rcall	.+0      	; 0x1038 <length+0x8>
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
    103c:	9c 83       	std	Y+4, r25	; 0x04
    103e:	8b 83       	std	Y+3, r24	; 0x03
	int x = 0;
    1040:	1a 82       	std	Y+2, r1	; 0x02
    1042:	19 82       	std	Y+1, r1	; 0x01
	while (string[x] != '\0'){
    1044:	05 c0       	rjmp	.+10     	; 0x1050 <length+0x20>
		x++;
    1046:	89 81       	ldd	r24, Y+1	; 0x01
    1048:	9a 81       	ldd	r25, Y+2	; 0x02
    104a:	01 96       	adiw	r24, 0x01	; 1
    104c:	9a 83       	std	Y+2, r25	; 0x02
    104e:	89 83       	std	Y+1, r24	; 0x01
//@ copyright: Binayak Dhakal,
//@ Functions: length, indexOf, indexOfWithStart, subString, strCmp, occuranceOf
//@ split, freeSplitedString, replace
int length(char *string){
	int x = 0;
	while (string[x] != '\0'){
    1050:	89 81       	ldd	r24, Y+1	; 0x01
    1052:	9a 81       	ldd	r25, Y+2	; 0x02
    1054:	2b 81       	ldd	r18, Y+3	; 0x03
    1056:	3c 81       	ldd	r19, Y+4	; 0x04
    1058:	82 0f       	add	r24, r18
    105a:	93 1f       	adc	r25, r19
    105c:	fc 01       	movw	r30, r24
    105e:	80 81       	ld	r24, Z
    1060:	88 23       	and	r24, r24
    1062:	89 f7       	brne	.-30     	; 0x1046 <length+0x16>
		x++;
	}
	return x;
    1064:	89 81       	ldd	r24, Y+1	; 0x01
    1066:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1068:	0f 90       	pop	r0
    106a:	0f 90       	pop	r0
    106c:	0f 90       	pop	r0
    106e:	0f 90       	pop	r0
    1070:	cf 91       	pop	r28
    1072:	df 91       	pop	r29
    1074:	08 95       	ret

00001076 <indexOf>:
int indexOf(char *string, char *subString) {
    1076:	df 93       	push	r29
    1078:	cf 93       	push	r28
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62
    107e:	62 97       	sbiw	r28, 0x12	; 18
    1080:	0f b6       	in	r0, 0x3f	; 63
    1082:	f8 94       	cli
    1084:	de bf       	out	0x3e, r29	; 62
    1086:	0f be       	out	0x3f, r0	; 63
    1088:	cd bf       	out	0x3d, r28	; 61
    108a:	98 8b       	std	Y+16, r25	; 0x10
    108c:	8f 87       	std	Y+15, r24	; 0x0f
    108e:	7a 8b       	std	Y+18, r23	; 0x12
    1090:	69 8b       	std	Y+17, r22	; 0x11
	//@ result is zero base
	int lenSubString = 0;
    1092:	1a 86       	std	Y+10, r1	; 0x0a
    1094:	19 86       	std	Y+9, r1	; 0x09
	int lenString = 0;
    1096:	1c 86       	std	Y+12, r1	; 0x0c
    1098:	1b 86       	std	Y+11, r1	; 0x0b
	int x, loopEnd, y;
	int flag;
	int indexOf = -1;
    109a:	8f ef       	ldi	r24, 0xFF	; 255
    109c:	9f ef       	ldi	r25, 0xFF	; 255
    109e:	98 87       	std	Y+8, r25	; 0x08
    10a0:	8f 83       	std	Y+7, r24	; 0x07

	lenSubString = length(subString);
    10a2:	89 89       	ldd	r24, Y+17	; 0x11
    10a4:	9a 89       	ldd	r25, Y+18	; 0x12
    10a6:	0e 94 18 08 	call	0x1030	; 0x1030 <length>
    10aa:	9a 87       	std	Y+10, r25	; 0x0a
    10ac:	89 87       	std	Y+9, r24	; 0x09
	lenString = length(string);
    10ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    10b0:	98 89       	ldd	r25, Y+16	; 0x10
    10b2:	0e 94 18 08 	call	0x1030	; 0x1030 <length>
    10b6:	9c 87       	std	Y+12, r25	; 0x0c
    10b8:	8b 87       	std	Y+11, r24	; 0x0b
	loopEnd = (lenString-lenSubString);
    10ba:	2b 85       	ldd	r18, Y+11	; 0x0b
    10bc:	3c 85       	ldd	r19, Y+12	; 0x0c
    10be:	89 85       	ldd	r24, Y+9	; 0x09
    10c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10c2:	a9 01       	movw	r20, r18
    10c4:	48 1b       	sub	r20, r24
    10c6:	59 0b       	sbc	r21, r25
    10c8:	ca 01       	movw	r24, r20
    10ca:	9e 87       	std	Y+14, r25	; 0x0e
    10cc:	8d 87       	std	Y+13, r24	; 0x0d

	for (x=0; x<=loopEnd; x++){
    10ce:	1a 82       	std	Y+2, r1	; 0x02
    10d0:	19 82       	std	Y+1, r1	; 0x01
    10d2:	42 c0       	rjmp	.+132    	; 0x1158 <indexOf+0xe2>
		flag = 1;
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	9e 83       	std	Y+6, r25	; 0x06
    10da:	8d 83       	std	Y+5, r24	; 0x05
		for (y=0; y<lenSubString; y++){
    10dc:	1c 82       	std	Y+4, r1	; 0x04
    10de:	1b 82       	std	Y+3, r1	; 0x03
    10e0:	1f c0       	rjmp	.+62     	; 0x1120 <indexOf+0xaa>
			if (string[x] != subString[y]){
    10e2:	89 81       	ldd	r24, Y+1	; 0x01
    10e4:	9a 81       	ldd	r25, Y+2	; 0x02
    10e6:	2f 85       	ldd	r18, Y+15	; 0x0f
    10e8:	38 89       	ldd	r19, Y+16	; 0x10
    10ea:	82 0f       	add	r24, r18
    10ec:	93 1f       	adc	r25, r19
    10ee:	fc 01       	movw	r30, r24
    10f0:	40 81       	ld	r20, Z
    10f2:	8b 81       	ldd	r24, Y+3	; 0x03
    10f4:	9c 81       	ldd	r25, Y+4	; 0x04
    10f6:	29 89       	ldd	r18, Y+17	; 0x11
    10f8:	3a 89       	ldd	r19, Y+18	; 0x12
    10fa:	82 0f       	add	r24, r18
    10fc:	93 1f       	adc	r25, r19
    10fe:	fc 01       	movw	r30, r24
    1100:	80 81       	ld	r24, Z
    1102:	48 17       	cp	r20, r24
    1104:	19 f0       	breq	.+6      	; 0x110c <indexOf+0x96>
				flag = 0;
    1106:	1e 82       	std	Y+6, r1	; 0x06
    1108:	1d 82       	std	Y+5, r1	; 0x05
				break;
    110a:	11 c0       	rjmp	.+34     	; 0x112e <indexOf+0xb8>
			} else {
				x++;
    110c:	89 81       	ldd	r24, Y+1	; 0x01
    110e:	9a 81       	ldd	r25, Y+2	; 0x02
    1110:	01 96       	adiw	r24, 0x01	; 1
    1112:	9a 83       	std	Y+2, r25	; 0x02
    1114:	89 83       	std	Y+1, r24	; 0x01
	lenString = length(string);
	loopEnd = (lenString-lenSubString);

	for (x=0; x<=loopEnd; x++){
		flag = 1;
		for (y=0; y<lenSubString; y++){
    1116:	8b 81       	ldd	r24, Y+3	; 0x03
    1118:	9c 81       	ldd	r25, Y+4	; 0x04
    111a:	01 96       	adiw	r24, 0x01	; 1
    111c:	9c 83       	std	Y+4, r25	; 0x04
    111e:	8b 83       	std	Y+3, r24	; 0x03
    1120:	2b 81       	ldd	r18, Y+3	; 0x03
    1122:	3c 81       	ldd	r19, Y+4	; 0x04
    1124:	89 85       	ldd	r24, Y+9	; 0x09
    1126:	9a 85       	ldd	r25, Y+10	; 0x0a
    1128:	28 17       	cp	r18, r24
    112a:	39 07       	cpc	r19, r25
    112c:	d4 f2       	brlt	.-76     	; 0x10e2 <indexOf+0x6c>
				break;
			} else {
				x++;
			}
		}
		if (flag == 1){
    112e:	8d 81       	ldd	r24, Y+5	; 0x05
    1130:	9e 81       	ldd	r25, Y+6	; 0x06
    1132:	81 30       	cpi	r24, 0x01	; 1
    1134:	91 05       	cpc	r25, r1
    1136:	59 f4       	brne	.+22     	; 0x114e <indexOf+0xd8>
			indexOf = x - lenSubString;
    1138:	29 81       	ldd	r18, Y+1	; 0x01
    113a:	3a 81       	ldd	r19, Y+2	; 0x02
    113c:	89 85       	ldd	r24, Y+9	; 0x09
    113e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1140:	a9 01       	movw	r20, r18
    1142:	48 1b       	sub	r20, r24
    1144:	59 0b       	sbc	r21, r25
    1146:	ca 01       	movw	r24, r20
    1148:	98 87       	std	Y+8, r25	; 0x08
    114a:	8f 83       	std	Y+7, r24	; 0x07
			break;
    114c:	0d c0       	rjmp	.+26     	; 0x1168 <indexOf+0xf2>

	lenSubString = length(subString);
	lenString = length(string);
	loopEnd = (lenString-lenSubString);

	for (x=0; x<=loopEnd; x++){
    114e:	89 81       	ldd	r24, Y+1	; 0x01
    1150:	9a 81       	ldd	r25, Y+2	; 0x02
    1152:	01 96       	adiw	r24, 0x01	; 1
    1154:	9a 83       	std	Y+2, r25	; 0x02
    1156:	89 83       	std	Y+1, r24	; 0x01
    1158:	29 81       	ldd	r18, Y+1	; 0x01
    115a:	3a 81       	ldd	r19, Y+2	; 0x02
    115c:	8d 85       	ldd	r24, Y+13	; 0x0d
    115e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1160:	82 17       	cp	r24, r18
    1162:	93 07       	cpc	r25, r19
    1164:	0c f0       	brlt	.+2      	; 0x1168 <indexOf+0xf2>
    1166:	b6 cf       	rjmp	.-148    	; 0x10d4 <indexOf+0x5e>
		if (flag == 1){
			indexOf = x - lenSubString;
			break;
		}
	}
	return indexOf;
    1168:	8f 81       	ldd	r24, Y+7	; 0x07
    116a:	98 85       	ldd	r25, Y+8	; 0x08
}
    116c:	62 96       	adiw	r28, 0x12	; 18
    116e:	0f b6       	in	r0, 0x3f	; 63
    1170:	f8 94       	cli
    1172:	de bf       	out	0x3e, r29	; 62
    1174:	0f be       	out	0x3f, r0	; 63
    1176:	cd bf       	out	0x3d, r28	; 61
    1178:	cf 91       	pop	r28
    117a:	df 91       	pop	r29
    117c:	08 95       	ret

0000117e <indexOfWithStart>:
int indexOfWithStart(char *string, char *subString, int start) {
    117e:	df 93       	push	r29
    1180:	cf 93       	push	r28
    1182:	cd b7       	in	r28, 0x3d	; 61
    1184:	de b7       	in	r29, 0x3e	; 62
    1186:	64 97       	sbiw	r28, 0x14	; 20
    1188:	0f b6       	in	r0, 0x3f	; 63
    118a:	f8 94       	cli
    118c:	de bf       	out	0x3e, r29	; 62
    118e:	0f be       	out	0x3f, r0	; 63
    1190:	cd bf       	out	0x3d, r28	; 61
    1192:	98 8b       	std	Y+16, r25	; 0x10
    1194:	8f 87       	std	Y+15, r24	; 0x0f
    1196:	7a 8b       	std	Y+18, r23	; 0x12
    1198:	69 8b       	std	Y+17, r22	; 0x11
    119a:	5c 8b       	std	Y+20, r21	; 0x14
    119c:	4b 8b       	std	Y+19, r20	; 0x13
	//@ result is zero base
	int lenSubString = 0;
    119e:	1a 86       	std	Y+10, r1	; 0x0a
    11a0:	19 86       	std	Y+9, r1	; 0x09
	int lenString = 0;
    11a2:	1c 86       	std	Y+12, r1	; 0x0c
    11a4:	1b 86       	std	Y+11, r1	; 0x0b
	int x, loopEnd, y;
	int flag;
	int indexOf = -1;
    11a6:	8f ef       	ldi	r24, 0xFF	; 255
    11a8:	9f ef       	ldi	r25, 0xFF	; 255
    11aa:	98 87       	std	Y+8, r25	; 0x08
    11ac:	8f 83       	std	Y+7, r24	; 0x07

	lenSubString = length(subString);
    11ae:	89 89       	ldd	r24, Y+17	; 0x11
    11b0:	9a 89       	ldd	r25, Y+18	; 0x12
    11b2:	0e 94 18 08 	call	0x1030	; 0x1030 <length>
    11b6:	9a 87       	std	Y+10, r25	; 0x0a
    11b8:	89 87       	std	Y+9, r24	; 0x09
	lenString = length(string);
    11ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    11bc:	98 89       	ldd	r25, Y+16	; 0x10
    11be:	0e 94 18 08 	call	0x1030	; 0x1030 <length>
    11c2:	9c 87       	std	Y+12, r25	; 0x0c
    11c4:	8b 87       	std	Y+11, r24	; 0x0b
	loopEnd = (lenString-lenSubString);
    11c6:	2b 85       	ldd	r18, Y+11	; 0x0b
    11c8:	3c 85       	ldd	r19, Y+12	; 0x0c
    11ca:	89 85       	ldd	r24, Y+9	; 0x09
    11cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ce:	a9 01       	movw	r20, r18
    11d0:	48 1b       	sub	r20, r24
    11d2:	59 0b       	sbc	r21, r25
    11d4:	ca 01       	movw	r24, r20
    11d6:	9e 87       	std	Y+14, r25	; 0x0e
    11d8:	8d 87       	std	Y+13, r24	; 0x0d

	for (x=start; x<=loopEnd; x++){
    11da:	8b 89       	ldd	r24, Y+19	; 0x13
    11dc:	9c 89       	ldd	r25, Y+20	; 0x14
    11de:	9a 83       	std	Y+2, r25	; 0x02
    11e0:	89 83       	std	Y+1, r24	; 0x01
    11e2:	42 c0       	rjmp	.+132    	; 0x1268 <indexOfWithStart+0xea>
		flag = 1;
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	9e 83       	std	Y+6, r25	; 0x06
    11ea:	8d 83       	std	Y+5, r24	; 0x05
		for (y=0; y<lenSubString; y++){
    11ec:	1c 82       	std	Y+4, r1	; 0x04
    11ee:	1b 82       	std	Y+3, r1	; 0x03
    11f0:	1f c0       	rjmp	.+62     	; 0x1230 <indexOfWithStart+0xb2>
			if (string[x] != subString[y]){
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
    11f4:	9a 81       	ldd	r25, Y+2	; 0x02
    11f6:	2f 85       	ldd	r18, Y+15	; 0x0f
    11f8:	38 89       	ldd	r19, Y+16	; 0x10
    11fa:	82 0f       	add	r24, r18
    11fc:	93 1f       	adc	r25, r19
    11fe:	fc 01       	movw	r30, r24
    1200:	40 81       	ld	r20, Z
    1202:	8b 81       	ldd	r24, Y+3	; 0x03
    1204:	9c 81       	ldd	r25, Y+4	; 0x04
    1206:	29 89       	ldd	r18, Y+17	; 0x11
    1208:	3a 89       	ldd	r19, Y+18	; 0x12
    120a:	82 0f       	add	r24, r18
    120c:	93 1f       	adc	r25, r19
    120e:	fc 01       	movw	r30, r24
    1210:	80 81       	ld	r24, Z
    1212:	48 17       	cp	r20, r24
    1214:	19 f0       	breq	.+6      	; 0x121c <indexOfWithStart+0x9e>
				flag = 0;
    1216:	1e 82       	std	Y+6, r1	; 0x06
    1218:	1d 82       	std	Y+5, r1	; 0x05
				break;
    121a:	11 c0       	rjmp	.+34     	; 0x123e <indexOfWithStart+0xc0>
			} else {
				x++;
    121c:	89 81       	ldd	r24, Y+1	; 0x01
    121e:	9a 81       	ldd	r25, Y+2	; 0x02
    1220:	01 96       	adiw	r24, 0x01	; 1
    1222:	9a 83       	std	Y+2, r25	; 0x02
    1224:	89 83       	std	Y+1, r24	; 0x01
	lenString = length(string);
	loopEnd = (lenString-lenSubString);

	for (x=start; x<=loopEnd; x++){
		flag = 1;
		for (y=0; y<lenSubString; y++){
    1226:	8b 81       	ldd	r24, Y+3	; 0x03
    1228:	9c 81       	ldd	r25, Y+4	; 0x04
    122a:	01 96       	adiw	r24, 0x01	; 1
    122c:	9c 83       	std	Y+4, r25	; 0x04
    122e:	8b 83       	std	Y+3, r24	; 0x03
    1230:	2b 81       	ldd	r18, Y+3	; 0x03
    1232:	3c 81       	ldd	r19, Y+4	; 0x04
    1234:	89 85       	ldd	r24, Y+9	; 0x09
    1236:	9a 85       	ldd	r25, Y+10	; 0x0a
    1238:	28 17       	cp	r18, r24
    123a:	39 07       	cpc	r19, r25
    123c:	d4 f2       	brlt	.-76     	; 0x11f2 <indexOfWithStart+0x74>
				break;
			} else {
				x++;
			}
		}
		if (flag == 1){
    123e:	8d 81       	ldd	r24, Y+5	; 0x05
    1240:	9e 81       	ldd	r25, Y+6	; 0x06
    1242:	81 30       	cpi	r24, 0x01	; 1
    1244:	91 05       	cpc	r25, r1
    1246:	59 f4       	brne	.+22     	; 0x125e <indexOfWithStart+0xe0>
			indexOf = x - lenSubString;
    1248:	29 81       	ldd	r18, Y+1	; 0x01
    124a:	3a 81       	ldd	r19, Y+2	; 0x02
    124c:	89 85       	ldd	r24, Y+9	; 0x09
    124e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1250:	a9 01       	movw	r20, r18
    1252:	48 1b       	sub	r20, r24
    1254:	59 0b       	sbc	r21, r25
    1256:	ca 01       	movw	r24, r20
    1258:	98 87       	std	Y+8, r25	; 0x08
    125a:	8f 83       	std	Y+7, r24	; 0x07
			break;
    125c:	0d c0       	rjmp	.+26     	; 0x1278 <indexOfWithStart+0xfa>

	lenSubString = length(subString);
	lenString = length(string);
	loopEnd = (lenString-lenSubString);

	for (x=start; x<=loopEnd; x++){
    125e:	89 81       	ldd	r24, Y+1	; 0x01
    1260:	9a 81       	ldd	r25, Y+2	; 0x02
    1262:	01 96       	adiw	r24, 0x01	; 1
    1264:	9a 83       	std	Y+2, r25	; 0x02
    1266:	89 83       	std	Y+1, r24	; 0x01
    1268:	29 81       	ldd	r18, Y+1	; 0x01
    126a:	3a 81       	ldd	r19, Y+2	; 0x02
    126c:	8d 85       	ldd	r24, Y+13	; 0x0d
    126e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1270:	82 17       	cp	r24, r18
    1272:	93 07       	cpc	r25, r19
    1274:	0c f0       	brlt	.+2      	; 0x1278 <indexOfWithStart+0xfa>
    1276:	b6 cf       	rjmp	.-148    	; 0x11e4 <indexOfWithStart+0x66>
		if (flag == 1){
			indexOf = x - lenSubString;
			break;
		}
	}
	return indexOf;
    1278:	8f 81       	ldd	r24, Y+7	; 0x07
    127a:	98 85       	ldd	r25, Y+8	; 0x08
}
    127c:	64 96       	adiw	r28, 0x14	; 20
    127e:	0f b6       	in	r0, 0x3f	; 63
    1280:	f8 94       	cli
    1282:	de bf       	out	0x3e, r29	; 62
    1284:	0f be       	out	0x3f, r0	; 63
    1286:	cd bf       	out	0x3d, r28	; 61
    1288:	cf 91       	pop	r28
    128a:	df 91       	pop	r29
    128c:	08 95       	ret

0000128e <subString>:
char* subString(char* string, int start, int length){
    128e:	df 93       	push	r29
    1290:	cf 93       	push	r28
    1292:	cd b7       	in	r28, 0x3d	; 61
    1294:	de b7       	in	r29, 0x3e	; 62
    1296:	2a 97       	sbiw	r28, 0x0a	; 10
    1298:	0f b6       	in	r0, 0x3f	; 63
    129a:	f8 94       	cli
    129c:	de bf       	out	0x3e, r29	; 62
    129e:	0f be       	out	0x3f, r0	; 63
    12a0:	cd bf       	out	0x3d, r28	; 61
    12a2:	9e 83       	std	Y+6, r25	; 0x06
    12a4:	8d 83       	std	Y+5, r24	; 0x05
    12a6:	78 87       	std	Y+8, r23	; 0x08
    12a8:	6f 83       	std	Y+7, r22	; 0x07
    12aa:	5a 87       	std	Y+10, r21	; 0x0a
    12ac:	49 87       	std	Y+9, r20	; 0x09
	//@ Start is zero based
	char *a = (char*) malloc (length+1);
    12ae:	89 85       	ldd	r24, Y+9	; 0x09
    12b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    12b2:	01 96       	adiw	r24, 0x01	; 1
    12b4:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <malloc>
    12b8:	9c 83       	std	Y+4, r25	; 0x04
    12ba:	8b 83       	std	Y+3, r24	; 0x03
	int x;
	for (x=0; x<length; x++){
    12bc:	1a 82       	std	Y+2, r1	; 0x02
    12be:	19 82       	std	Y+1, r1	; 0x01
    12c0:	19 c0       	rjmp	.+50     	; 0x12f4 <subString+0x66>
		a[x] = string[x+start];
    12c2:	89 81       	ldd	r24, Y+1	; 0x01
    12c4:	9a 81       	ldd	r25, Y+2	; 0x02
    12c6:	2b 81       	ldd	r18, Y+3	; 0x03
    12c8:	3c 81       	ldd	r19, Y+4	; 0x04
    12ca:	82 0f       	add	r24, r18
    12cc:	93 1f       	adc	r25, r19
    12ce:	49 81       	ldd	r20, Y+1	; 0x01
    12d0:	5a 81       	ldd	r21, Y+2	; 0x02
    12d2:	2f 81       	ldd	r18, Y+7	; 0x07
    12d4:	38 85       	ldd	r19, Y+8	; 0x08
    12d6:	24 0f       	add	r18, r20
    12d8:	35 1f       	adc	r19, r21
    12da:	4d 81       	ldd	r20, Y+5	; 0x05
    12dc:	5e 81       	ldd	r21, Y+6	; 0x06
    12de:	24 0f       	add	r18, r20
    12e0:	35 1f       	adc	r19, r21
    12e2:	f9 01       	movw	r30, r18
    12e4:	20 81       	ld	r18, Z
    12e6:	fc 01       	movw	r30, r24
    12e8:	20 83       	st	Z, r18
}
char* subString(char* string, int start, int length){
	//@ Start is zero based
	char *a = (char*) malloc (length+1);
	int x;
	for (x=0; x<length; x++){
    12ea:	89 81       	ldd	r24, Y+1	; 0x01
    12ec:	9a 81       	ldd	r25, Y+2	; 0x02
    12ee:	01 96       	adiw	r24, 0x01	; 1
    12f0:	9a 83       	std	Y+2, r25	; 0x02
    12f2:	89 83       	std	Y+1, r24	; 0x01
    12f4:	29 81       	ldd	r18, Y+1	; 0x01
    12f6:	3a 81       	ldd	r19, Y+2	; 0x02
    12f8:	89 85       	ldd	r24, Y+9	; 0x09
    12fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    12fc:	28 17       	cp	r18, r24
    12fe:	39 07       	cpc	r19, r25
    1300:	04 f3       	brlt	.-64     	; 0x12c2 <subString+0x34>
		a[x] = string[x+start];
	}
	a[x] = '\0';
    1302:	89 81       	ldd	r24, Y+1	; 0x01
    1304:	9a 81       	ldd	r25, Y+2	; 0x02
    1306:	2b 81       	ldd	r18, Y+3	; 0x03
    1308:	3c 81       	ldd	r19, Y+4	; 0x04
    130a:	82 0f       	add	r24, r18
    130c:	93 1f       	adc	r25, r19
    130e:	fc 01       	movw	r30, r24
    1310:	10 82       	st	Z, r1

	return a;
    1312:	8b 81       	ldd	r24, Y+3	; 0x03
    1314:	9c 81       	ldd	r25, Y+4	; 0x04
}
    1316:	2a 96       	adiw	r28, 0x0a	; 10
    1318:	0f b6       	in	r0, 0x3f	; 63
    131a:	f8 94       	cli
    131c:	de bf       	out	0x3e, r29	; 62
    131e:	0f be       	out	0x3f, r0	; 63
    1320:	cd bf       	out	0x3d, r28	; 61
    1322:	cf 91       	pop	r28
    1324:	df 91       	pop	r29
    1326:	08 95       	ret

00001328 <equals>:
char equals(char *stringA, char *stringB){
    1328:	0f 93       	push	r16
    132a:	1f 93       	push	r17
    132c:	df 93       	push	r29
    132e:	cf 93       	push	r28
    1330:	cd b7       	in	r28, 0x3d	; 61
    1332:	de b7       	in	r29, 0x3e	; 62
    1334:	27 97       	sbiw	r28, 0x07	; 7
    1336:	0f b6       	in	r0, 0x3f	; 63
    1338:	f8 94       	cli
    133a:	de bf       	out	0x3e, r29	; 62
    133c:	0f be       	out	0x3f, r0	; 63
    133e:	cd bf       	out	0x3d, r28	; 61
    1340:	9d 83       	std	Y+5, r25	; 0x05
    1342:	8c 83       	std	Y+4, r24	; 0x04
    1344:	7f 83       	std	Y+7, r23	; 0x07
    1346:	6e 83       	std	Y+6, r22	; 0x06
	char returnResult = 0;
    1348:	19 82       	std	Y+1, r1	; 0x01
	int x;

	if (length(stringA) == length(stringB)){
    134a:	8c 81       	ldd	r24, Y+4	; 0x04
    134c:	9d 81       	ldd	r25, Y+5	; 0x05
    134e:	0e 94 18 08 	call	0x1030	; 0x1030 <length>
    1352:	8c 01       	movw	r16, r24
    1354:	8e 81       	ldd	r24, Y+6	; 0x06
    1356:	9f 81       	ldd	r25, Y+7	; 0x07
    1358:	0e 94 18 08 	call	0x1030	; 0x1030 <length>
    135c:	08 17       	cp	r16, r24
    135e:	19 07       	cpc	r17, r25
    1360:	41 f5       	brne	.+80     	; 0x13b2 <equals+0x8a>
		returnResult = 1;
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	89 83       	std	Y+1, r24	; 0x01
		for (x=0; x<=length(stringA); x++){
    1366:	1b 82       	std	Y+3, r1	; 0x03
    1368:	1a 82       	std	Y+2, r1	; 0x02
    136a:	19 c0       	rjmp	.+50     	; 0x139e <equals+0x76>
			if (stringA[x] != stringB[x]){
    136c:	8a 81       	ldd	r24, Y+2	; 0x02
    136e:	9b 81       	ldd	r25, Y+3	; 0x03
    1370:	2c 81       	ldd	r18, Y+4	; 0x04
    1372:	3d 81       	ldd	r19, Y+5	; 0x05
    1374:	82 0f       	add	r24, r18
    1376:	93 1f       	adc	r25, r19
    1378:	fc 01       	movw	r30, r24
    137a:	40 81       	ld	r20, Z
    137c:	8a 81       	ldd	r24, Y+2	; 0x02
    137e:	9b 81       	ldd	r25, Y+3	; 0x03
    1380:	2e 81       	ldd	r18, Y+6	; 0x06
    1382:	3f 81       	ldd	r19, Y+7	; 0x07
    1384:	82 0f       	add	r24, r18
    1386:	93 1f       	adc	r25, r19
    1388:	fc 01       	movw	r30, r24
    138a:	80 81       	ld	r24, Z
    138c:	48 17       	cp	r20, r24
    138e:	11 f0       	breq	.+4      	; 0x1394 <equals+0x6c>
				returnResult = 0;
    1390:	19 82       	std	Y+1, r1	; 0x01
				break;
    1392:	0f c0       	rjmp	.+30     	; 0x13b2 <equals+0x8a>
	char returnResult = 0;
	int x;

	if (length(stringA) == length(stringB)){
		returnResult = 1;
		for (x=0; x<=length(stringA); x++){
    1394:	8a 81       	ldd	r24, Y+2	; 0x02
    1396:	9b 81       	ldd	r25, Y+3	; 0x03
    1398:	01 96       	adiw	r24, 0x01	; 1
    139a:	9b 83       	std	Y+3, r25	; 0x03
    139c:	8a 83       	std	Y+2, r24	; 0x02
    139e:	8c 81       	ldd	r24, Y+4	; 0x04
    13a0:	9d 81       	ldd	r25, Y+5	; 0x05
    13a2:	0e 94 18 08 	call	0x1030	; 0x1030 <length>
    13a6:	9c 01       	movw	r18, r24
    13a8:	8a 81       	ldd	r24, Y+2	; 0x02
    13aa:	9b 81       	ldd	r25, Y+3	; 0x03
    13ac:	28 17       	cp	r18, r24
    13ae:	39 07       	cpc	r19, r25
    13b0:	ec f6       	brge	.-70     	; 0x136c <equals+0x44>
				returnResult = 0;
				break;
			}
		}
	}
	return returnResult;
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    13b4:	27 96       	adiw	r28, 0x07	; 7
    13b6:	0f b6       	in	r0, 0x3f	; 63
    13b8:	f8 94       	cli
    13ba:	de bf       	out	0x3e, r29	; 62
    13bc:	0f be       	out	0x3f, r0	; 63
    13be:	cd bf       	out	0x3d, r28	; 61
    13c0:	cf 91       	pop	r28
    13c2:	df 91       	pop	r29
    13c4:	1f 91       	pop	r17
    13c6:	0f 91       	pop	r16
    13c8:	08 95       	ret

000013ca <occuranceOf>:
int occuranceOf(char *string, char *delimiter){
    13ca:	df 93       	push	r29
    13cc:	cf 93       	push	r28
    13ce:	cd b7       	in	r28, 0x3d	; 61
    13d0:	de b7       	in	r29, 0x3e	; 62
    13d2:	2a 97       	sbiw	r28, 0x0a	; 10
    13d4:	0f b6       	in	r0, 0x3f	; 63
    13d6:	f8 94       	cli
    13d8:	de bf       	out	0x3e, r29	; 62
    13da:	0f be       	out	0x3f, r0	; 63
    13dc:	cd bf       	out	0x3d, r28	; 61
    13de:	98 87       	std	Y+8, r25	; 0x08
    13e0:	8f 83       	std	Y+7, r24	; 0x07
    13e2:	7a 87       	std	Y+10, r23	; 0x0a
    13e4:	69 87       	std	Y+9, r22	; 0x09
	int index, start;
	int delimiterCount=0;
    13e6:	1c 82       	std	Y+4, r1	; 0x04
    13e8:	1b 82       	std	Y+3, r1	; 0x03
	start = 0;
    13ea:	1a 82       	std	Y+2, r1	; 0x02
    13ec:	19 82       	std	Y+1, r1	; 0x01
	while (1){
		index = indexOfWithStart(string, delimiter, start);
    13ee:	8f 81       	ldd	r24, Y+7	; 0x07
    13f0:	98 85       	ldd	r25, Y+8	; 0x08
    13f2:	49 85       	ldd	r20, Y+9	; 0x09
    13f4:	5a 85       	ldd	r21, Y+10	; 0x0a
    13f6:	29 81       	ldd	r18, Y+1	; 0x01
    13f8:	3a 81       	ldd	r19, Y+2	; 0x02
    13fa:	ba 01       	movw	r22, r20
    13fc:	a9 01       	movw	r20, r18
    13fe:	0e 94 bf 08 	call	0x117e	; 0x117e <indexOfWithStart>
    1402:	9e 83       	std	Y+6, r25	; 0x06
    1404:	8d 83       	std	Y+5, r24	; 0x05
		if (index != -1){
    1406:	8d 81       	ldd	r24, Y+5	; 0x05
    1408:	9e 81       	ldd	r25, Y+6	; 0x06
    140a:	2f ef       	ldi	r18, 0xFF	; 255
    140c:	8f 3f       	cpi	r24, 0xFF	; 255
    140e:	92 07       	cpc	r25, r18
    1410:	59 f0       	breq	.+22     	; 0x1428 <occuranceOf+0x5e>
			delimiterCount ++;
    1412:	8b 81       	ldd	r24, Y+3	; 0x03
    1414:	9c 81       	ldd	r25, Y+4	; 0x04
    1416:	01 96       	adiw	r24, 0x01	; 1
    1418:	9c 83       	std	Y+4, r25	; 0x04
    141a:	8b 83       	std	Y+3, r24	; 0x03
		} else {
			break;
		}
		start = index + 1;
    141c:	8d 81       	ldd	r24, Y+5	; 0x05
    141e:	9e 81       	ldd	r25, Y+6	; 0x06
    1420:	01 96       	adiw	r24, 0x01	; 1
    1422:	9a 83       	std	Y+2, r25	; 0x02
    1424:	89 83       	std	Y+1, r24	; 0x01
	}
    1426:	e3 cf       	rjmp	.-58     	; 0x13ee <occuranceOf+0x24>
	return delimiterCount;
    1428:	8b 81       	ldd	r24, Y+3	; 0x03
    142a:	9c 81       	ldd	r25, Y+4	; 0x04
}
    142c:	2a 96       	adiw	r28, 0x0a	; 10
    142e:	0f b6       	in	r0, 0x3f	; 63
    1430:	f8 94       	cli
    1432:	de bf       	out	0x3e, r29	; 62
    1434:	0f be       	out	0x3f, r0	; 63
    1436:	cd bf       	out	0x3d, r28	; 61
    1438:	cf 91       	pop	r28
    143a:	df 91       	pop	r29
    143c:	08 95       	ret

0000143e <strCpy>:
void strCpy(char *source, char *dest){
    143e:	df 93       	push	r29
    1440:	cf 93       	push	r28
    1442:	00 d0       	rcall	.+0      	; 0x1444 <strCpy+0x6>
    1444:	00 d0       	rcall	.+0      	; 0x1446 <strCpy+0x8>
    1446:	00 d0       	rcall	.+0      	; 0x1448 <strCpy+0xa>
    1448:	cd b7       	in	r28, 0x3d	; 61
    144a:	de b7       	in	r29, 0x3e	; 62
    144c:	9c 83       	std	Y+4, r25	; 0x04
    144e:	8b 83       	std	Y+3, r24	; 0x03
    1450:	7e 83       	std	Y+6, r23	; 0x06
    1452:	6d 83       	std	Y+5, r22	; 0x05
	int count =0;
    1454:	1a 82       	std	Y+2, r1	; 0x02
    1456:	19 82       	std	Y+1, r1	; 0x01
	while (source[count] != '\0'){
    1458:	15 c0       	rjmp	.+42     	; 0x1484 <strCpy+0x46>
		dest[count] = source[count];
    145a:	89 81       	ldd	r24, Y+1	; 0x01
    145c:	9a 81       	ldd	r25, Y+2	; 0x02
    145e:	2d 81       	ldd	r18, Y+5	; 0x05
    1460:	3e 81       	ldd	r19, Y+6	; 0x06
    1462:	82 0f       	add	r24, r18
    1464:	93 1f       	adc	r25, r19
    1466:	29 81       	ldd	r18, Y+1	; 0x01
    1468:	3a 81       	ldd	r19, Y+2	; 0x02
    146a:	4b 81       	ldd	r20, Y+3	; 0x03
    146c:	5c 81       	ldd	r21, Y+4	; 0x04
    146e:	24 0f       	add	r18, r20
    1470:	35 1f       	adc	r19, r21
    1472:	f9 01       	movw	r30, r18
    1474:	20 81       	ld	r18, Z
    1476:	fc 01       	movw	r30, r24
    1478:	20 83       	st	Z, r18
		count ++;
    147a:	89 81       	ldd	r24, Y+1	; 0x01
    147c:	9a 81       	ldd	r25, Y+2	; 0x02
    147e:	01 96       	adiw	r24, 0x01	; 1
    1480:	9a 83       	std	Y+2, r25	; 0x02
    1482:	89 83       	std	Y+1, r24	; 0x01
	}
	return delimiterCount;
}
void strCpy(char *source, char *dest){
	int count =0;
	while (source[count] != '\0'){
    1484:	89 81       	ldd	r24, Y+1	; 0x01
    1486:	9a 81       	ldd	r25, Y+2	; 0x02
    1488:	2b 81       	ldd	r18, Y+3	; 0x03
    148a:	3c 81       	ldd	r19, Y+4	; 0x04
    148c:	82 0f       	add	r24, r18
    148e:	93 1f       	adc	r25, r19
    1490:	fc 01       	movw	r30, r24
    1492:	80 81       	ld	r24, Z
    1494:	88 23       	and	r24, r24
    1496:	09 f7       	brne	.-62     	; 0x145a <strCpy+0x1c>
		dest[count] = source[count];
		count ++;
	}
	dest[count] = '\0';
    1498:	89 81       	ldd	r24, Y+1	; 0x01
    149a:	9a 81       	ldd	r25, Y+2	; 0x02
    149c:	2d 81       	ldd	r18, Y+5	; 0x05
    149e:	3e 81       	ldd	r19, Y+6	; 0x06
    14a0:	82 0f       	add	r24, r18
    14a2:	93 1f       	adc	r25, r19
    14a4:	fc 01       	movw	r30, r24
    14a6:	10 82       	st	Z, r1
}
    14a8:	26 96       	adiw	r28, 0x06	; 6
    14aa:	0f b6       	in	r0, 0x3f	; 63
    14ac:	f8 94       	cli
    14ae:	de bf       	out	0x3e, r29	; 62
    14b0:	0f be       	out	0x3f, r0	; 63
    14b2:	cd bf       	out	0x3d, r28	; 61
    14b4:	cf 91       	pop	r28
    14b6:	df 91       	pop	r29
    14b8:	08 95       	ret

000014ba <split>:
char **split(char *string, char *delimiter, int *ubound){
    14ba:	0f 93       	push	r16
    14bc:	1f 93       	push	r17
    14be:	df 93       	push	r29
    14c0:	cf 93       	push	r28
    14c2:	cd b7       	in	r28, 0x3d	; 61
    14c4:	de b7       	in	r29, 0x3e	; 62
    14c6:	62 97       	sbiw	r28, 0x12	; 18
    14c8:	0f b6       	in	r0, 0x3f	; 63
    14ca:	f8 94       	cli
    14cc:	de bf       	out	0x3e, r29	; 62
    14ce:	0f be       	out	0x3f, r0	; 63
    14d0:	cd bf       	out	0x3d, r28	; 61
    14d2:	9e 87       	std	Y+14, r25	; 0x0e
    14d4:	8d 87       	std	Y+13, r24	; 0x0d
    14d6:	78 8b       	std	Y+16, r23	; 0x10
    14d8:	6f 87       	std	Y+15, r22	; 0x0f
    14da:	5a 8b       	std	Y+18, r21	; 0x12
    14dc:	49 8b       	std	Y+17, r20	; 0x11
		char **retVal;
		int delimiterCount = 0;
    14de:	18 86       	std	Y+8, r1	; 0x08
    14e0:	1f 82       	std	Y+7, r1	; 0x07
		int index, start = 0;
    14e2:	1a 82       	std	Y+2, r1	; 0x02
    14e4:	19 82       	std	Y+1, r1	; 0x01
		int count = 0, prevCount = 0;
    14e6:	1c 82       	std	Y+4, r1	; 0x04
    14e8:	1b 82       	std	Y+3, r1	; 0x03
    14ea:	1e 82       	std	Y+6, r1	; 0x06
    14ec:	1d 82       	std	Y+5, r1	; 0x05

		delimiterCount = occuranceOf(string, delimiter);
    14ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    14f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    14f2:	2f 85       	ldd	r18, Y+15	; 0x0f
    14f4:	38 89       	ldd	r19, Y+16	; 0x10
    14f6:	b9 01       	movw	r22, r18
    14f8:	0e 94 e5 09 	call	0x13ca	; 0x13ca <occuranceOf>
    14fc:	98 87       	std	Y+8, r25	; 0x08
    14fe:	8f 83       	std	Y+7, r24	; 0x07
		*ubound = delimiterCount;
    1500:	89 89       	ldd	r24, Y+17	; 0x11
    1502:	9a 89       	ldd	r25, Y+18	; 0x12
    1504:	2f 81       	ldd	r18, Y+7	; 0x07
    1506:	38 85       	ldd	r19, Y+8	; 0x08
    1508:	fc 01       	movw	r30, r24
    150a:	31 83       	std	Z+1, r19	; 0x01
    150c:	20 83       	st	Z, r18

		retVal = (char **) malloc ((sizeof(char*)) * ((delimiterCount) + 1));
    150e:	8f 81       	ldd	r24, Y+7	; 0x07
    1510:	98 85       	ldd	r25, Y+8	; 0x08
    1512:	01 96       	adiw	r24, 0x01	; 1
    1514:	88 0f       	add	r24, r24
    1516:	99 1f       	adc	r25, r25
    1518:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <malloc>
    151c:	9a 87       	std	Y+10, r25	; 0x0a
    151e:	89 87       	std	Y+9, r24	; 0x09
		start = 0;
    1520:	1a 82       	std	Y+2, r1	; 0x02
    1522:	19 82       	std	Y+1, r1	; 0x01
		while (1){
			index = indexOfWithStart(string, delimiter, start);
    1524:	8d 85       	ldd	r24, Y+13	; 0x0d
    1526:	9e 85       	ldd	r25, Y+14	; 0x0e
    1528:	4f 85       	ldd	r20, Y+15	; 0x0f
    152a:	58 89       	ldd	r21, Y+16	; 0x10
    152c:	29 81       	ldd	r18, Y+1	; 0x01
    152e:	3a 81       	ldd	r19, Y+2	; 0x02
    1530:	ba 01       	movw	r22, r20
    1532:	a9 01       	movw	r20, r18
    1534:	0e 94 bf 08 	call	0x117e	; 0x117e <indexOfWithStart>
    1538:	9c 87       	std	Y+12, r25	; 0x0c
    153a:	8b 87       	std	Y+11, r24	; 0x0b

			if (index != -1)
    153c:	8b 85       	ldd	r24, Y+11	; 0x0b
    153e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1540:	ff ef       	ldi	r31, 0xFF	; 255
    1542:	8f 3f       	cpi	r24, 0xFF	; 255
    1544:	9f 07       	cpc	r25, r31
    1546:	b1 f1       	breq	.+108    	; 0x15b4 <split+0xfa>
			{
				retVal[count] = subString(string, prevCount, index-prevCount);
    1548:	8b 81       	ldd	r24, Y+3	; 0x03
    154a:	9c 81       	ldd	r25, Y+4	; 0x04
    154c:	88 0f       	add	r24, r24
    154e:	99 1f       	adc	r25, r25
    1550:	29 85       	ldd	r18, Y+9	; 0x09
    1552:	3a 85       	ldd	r19, Y+10	; 0x0a
    1554:	89 01       	movw	r16, r18
    1556:	08 0f       	add	r16, r24
    1558:	19 1f       	adc	r17, r25
    155a:	2b 85       	ldd	r18, Y+11	; 0x0b
    155c:	3c 85       	ldd	r19, Y+12	; 0x0c
    155e:	8d 81       	ldd	r24, Y+5	; 0x05
    1560:	9e 81       	ldd	r25, Y+6	; 0x06
    1562:	28 1b       	sub	r18, r24
    1564:	39 0b       	sbc	r19, r25
    1566:	8d 85       	ldd	r24, Y+13	; 0x0d
    1568:	9e 85       	ldd	r25, Y+14	; 0x0e
    156a:	4d 81       	ldd	r20, Y+5	; 0x05
    156c:	5e 81       	ldd	r21, Y+6	; 0x06
    156e:	ba 01       	movw	r22, r20
    1570:	a9 01       	movw	r20, r18
    1572:	0e 94 47 09 	call	0x128e	; 0x128e <subString>
    1576:	f8 01       	movw	r30, r16
    1578:	91 83       	std	Z+1, r25	; 0x01
    157a:	80 83       	st	Z, r24
				prevCount = index + length(delimiter);
    157c:	8f 85       	ldd	r24, Y+15	; 0x0f
    157e:	98 89       	ldd	r25, Y+16	; 0x10
    1580:	0e 94 18 08 	call	0x1030	; 0x1030 <length>
    1584:	9c 01       	movw	r18, r24
    1586:	8b 85       	ldd	r24, Y+11	; 0x0b
    1588:	9c 85       	ldd	r25, Y+12	; 0x0c
    158a:	82 0f       	add	r24, r18
    158c:	93 1f       	adc	r25, r19
    158e:	9e 83       	std	Y+6, r25	; 0x06
    1590:	8d 83       	std	Y+5, r24	; 0x05
				count++;
    1592:	8b 81       	ldd	r24, Y+3	; 0x03
    1594:	9c 81       	ldd	r25, Y+4	; 0x04
    1596:	01 96       	adiw	r24, 0x01	; 1
    1598:	9c 83       	std	Y+4, r25	; 0x04
    159a:	8b 83       	std	Y+3, r24	; 0x03
			} else {
				break;
			}
			start = index + length(delimiter);
    159c:	8f 85       	ldd	r24, Y+15	; 0x0f
    159e:	98 89       	ldd	r25, Y+16	; 0x10
    15a0:	0e 94 18 08 	call	0x1030	; 0x1030 <length>
    15a4:	9c 01       	movw	r18, r24
    15a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    15a8:	9c 85       	ldd	r25, Y+12	; 0x0c
    15aa:	82 0f       	add	r24, r18
    15ac:	93 1f       	adc	r25, r19
    15ae:	9a 83       	std	Y+2, r25	; 0x02
    15b0:	89 83       	std	Y+1, r24	; 0x01
		}
    15b2:	b8 cf       	rjmp	.-144    	; 0x1524 <split+0x6a>
		retVal[count] = subString(string, prevCount, length(string)-prevCount);
    15b4:	8b 81       	ldd	r24, Y+3	; 0x03
    15b6:	9c 81       	ldd	r25, Y+4	; 0x04
    15b8:	88 0f       	add	r24, r24
    15ba:	99 1f       	adc	r25, r25
    15bc:	29 85       	ldd	r18, Y+9	; 0x09
    15be:	3a 85       	ldd	r19, Y+10	; 0x0a
    15c0:	89 01       	movw	r16, r18
    15c2:	08 0f       	add	r16, r24
    15c4:	19 1f       	adc	r17, r25
    15c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    15c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    15ca:	0e 94 18 08 	call	0x1030	; 0x1030 <length>
    15ce:	9c 01       	movw	r18, r24
    15d0:	8d 81       	ldd	r24, Y+5	; 0x05
    15d2:	9e 81       	ldd	r25, Y+6	; 0x06
    15d4:	28 1b       	sub	r18, r24
    15d6:	39 0b       	sbc	r19, r25
    15d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    15da:	9e 85       	ldd	r25, Y+14	; 0x0e
    15dc:	4d 81       	ldd	r20, Y+5	; 0x05
    15de:	5e 81       	ldd	r21, Y+6	; 0x06
    15e0:	ba 01       	movw	r22, r20
    15e2:	a9 01       	movw	r20, r18
    15e4:	0e 94 47 09 	call	0x128e	; 0x128e <subString>
    15e8:	f8 01       	movw	r30, r16
    15ea:	91 83       	std	Z+1, r25	; 0x01
    15ec:	80 83       	st	Z, r24
		return retVal;
    15ee:	89 85       	ldd	r24, Y+9	; 0x09
    15f0:	9a 85       	ldd	r25, Y+10	; 0x0a
}
    15f2:	62 96       	adiw	r28, 0x12	; 18
    15f4:	0f b6       	in	r0, 0x3f	; 63
    15f6:	f8 94       	cli
    15f8:	de bf       	out	0x3e, r29	; 62
    15fa:	0f be       	out	0x3f, r0	; 63
    15fc:	cd bf       	out	0x3d, r28	; 61
    15fe:	cf 91       	pop	r28
    1600:	df 91       	pop	r29
    1602:	1f 91       	pop	r17
    1604:	0f 91       	pop	r16
    1606:	08 95       	ret

00001608 <freeSplitedString>:
void freeSplitedString(char **splitedString, int length){
    1608:	df 93       	push	r29
    160a:	cf 93       	push	r28
    160c:	00 d0       	rcall	.+0      	; 0x160e <freeSplitedString+0x6>
    160e:	00 d0       	rcall	.+0      	; 0x1610 <freeSplitedString+0x8>
    1610:	00 d0       	rcall	.+0      	; 0x1612 <freeSplitedString+0xa>
    1612:	cd b7       	in	r28, 0x3d	; 61
    1614:	de b7       	in	r29, 0x3e	; 62
    1616:	9c 83       	std	Y+4, r25	; 0x04
    1618:	8b 83       	std	Y+3, r24	; 0x03
    161a:	7e 83       	std	Y+6, r23	; 0x06
    161c:	6d 83       	std	Y+5, r22	; 0x05
	int a;
	for (a=0; a<=length; a++){
    161e:	1a 82       	std	Y+2, r1	; 0x02
    1620:	19 82       	std	Y+1, r1	; 0x01
    1622:	12 c0       	rjmp	.+36     	; 0x1648 <freeSplitedString+0x40>
		free (splitedString[a]);
    1624:	89 81       	ldd	r24, Y+1	; 0x01
    1626:	9a 81       	ldd	r25, Y+2	; 0x02
    1628:	88 0f       	add	r24, r24
    162a:	99 1f       	adc	r25, r25
    162c:	2b 81       	ldd	r18, Y+3	; 0x03
    162e:	3c 81       	ldd	r19, Y+4	; 0x04
    1630:	82 0f       	add	r24, r18
    1632:	93 1f       	adc	r25, r19
    1634:	fc 01       	movw	r30, r24
    1636:	80 81       	ld	r24, Z
    1638:	91 81       	ldd	r25, Z+1	; 0x01
    163a:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <free>
		retVal[count] = subString(string, prevCount, length(string)-prevCount);
		return retVal;
}
void freeSplitedString(char **splitedString, int length){
	int a;
	for (a=0; a<=length; a++){
    163e:	89 81       	ldd	r24, Y+1	; 0x01
    1640:	9a 81       	ldd	r25, Y+2	; 0x02
    1642:	01 96       	adiw	r24, 0x01	; 1
    1644:	9a 83       	std	Y+2, r25	; 0x02
    1646:	89 83       	std	Y+1, r24	; 0x01
    1648:	29 81       	ldd	r18, Y+1	; 0x01
    164a:	3a 81       	ldd	r19, Y+2	; 0x02
    164c:	8d 81       	ldd	r24, Y+5	; 0x05
    164e:	9e 81       	ldd	r25, Y+6	; 0x06
    1650:	82 17       	cp	r24, r18
    1652:	93 07       	cpc	r25, r19
    1654:	3c f7       	brge	.-50     	; 0x1624 <freeSplitedString+0x1c>
		free (splitedString[a]);
	}
	free (splitedString);
    1656:	8b 81       	ldd	r24, Y+3	; 0x03
    1658:	9c 81       	ldd	r25, Y+4	; 0x04
    165a:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <free>
}
    165e:	26 96       	adiw	r28, 0x06	; 6
    1660:	0f b6       	in	r0, 0x3f	; 63
    1662:	f8 94       	cli
    1664:	de bf       	out	0x3e, r29	; 62
    1666:	0f be       	out	0x3f, r0	; 63
    1668:	cd bf       	out	0x3d, r28	; 61
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	08 95       	ret

00001670 <replace>:
char *replace(char *string, char *replaceFor, char *replaceWith){
    1670:	df 93       	push	r29
    1672:	cf 93       	push	r28
    1674:	cd b7       	in	r28, 0x3d	; 61
    1676:	de b7       	in	r29, 0x3e	; 62
    1678:	6e 97       	sbiw	r28, 0x1e	; 30
    167a:	0f b6       	in	r0, 0x3f	; 63
    167c:	f8 94       	cli
    167e:	de bf       	out	0x3e, r29	; 62
    1680:	0f be       	out	0x3f, r0	; 63
    1682:	cd bf       	out	0x3d, r28	; 61
    1684:	9a 8f       	std	Y+26, r25	; 0x1a
    1686:	89 8f       	std	Y+25, r24	; 0x19
    1688:	7c 8f       	std	Y+28, r23	; 0x1c
    168a:	6b 8f       	std	Y+27, r22	; 0x1b
    168c:	5e 8f       	std	Y+30, r21	; 0x1e
    168e:	4d 8f       	std	Y+29, r20	; 0x1d
	int occurance;
	int mallocLength = 0, lengthString = 0, lengthReplaceFor = 0, lengthReplaceWith=0;
    1690:	1a 86       	std	Y+10, r1	; 0x0a
    1692:	19 86       	std	Y+9, r1	; 0x09
    1694:	1c 86       	std	Y+12, r1	; 0x0c
    1696:	1b 86       	std	Y+11, r1	; 0x0b
    1698:	1e 86       	std	Y+14, r1	; 0x0e
    169a:	1d 86       	std	Y+13, r1	; 0x0d
    169c:	18 8a       	std	Y+16, r1	; 0x10
    169e:	1f 86       	std	Y+15, r1	; 0x0f
	char *retVal;
	int start, index, count, prevCount;
	int x;

	occurance = occuranceOf(string, replaceFor);
    16a0:	89 8d       	ldd	r24, Y+25	; 0x19
    16a2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    16a4:	2b 8d       	ldd	r18, Y+27	; 0x1b
    16a6:	3c 8d       	ldd	r19, Y+28	; 0x1c
    16a8:	b9 01       	movw	r22, r18
    16aa:	0e 94 e5 09 	call	0x13ca	; 0x13ca <occuranceOf>
    16ae:	9a 8b       	std	Y+18, r25	; 0x12
    16b0:	89 8b       	std	Y+17, r24	; 0x11
	lengthString = length(string);
    16b2:	89 8d       	ldd	r24, Y+25	; 0x19
    16b4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    16b6:	0e 94 18 08 	call	0x1030	; 0x1030 <length>
    16ba:	9c 87       	std	Y+12, r25	; 0x0c
    16bc:	8b 87       	std	Y+11, r24	; 0x0b
	lengthReplaceFor = length(replaceFor);
    16be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16c2:	0e 94 18 08 	call	0x1030	; 0x1030 <length>
    16c6:	9e 87       	std	Y+14, r25	; 0x0e
    16c8:	8d 87       	std	Y+13, r24	; 0x0d
	lengthReplaceWith = length(replaceWith);
    16ca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16cc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16ce:	0e 94 18 08 	call	0x1030	; 0x1030 <length>
    16d2:	98 8b       	std	Y+16, r25	; 0x10
    16d4:	8f 87       	std	Y+15, r24	; 0x0f
	mallocLength = lengthString - lengthReplaceFor * occurance + lengthReplaceWith * occurance;
    16d6:	2f 85       	ldd	r18, Y+15	; 0x0f
    16d8:	38 89       	ldd	r19, Y+16	; 0x10
    16da:	8d 85       	ldd	r24, Y+13	; 0x0d
    16dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    16de:	a9 01       	movw	r20, r18
    16e0:	48 1b       	sub	r20, r24
    16e2:	59 0b       	sbc	r21, r25
    16e4:	89 89       	ldd	r24, Y+17	; 0x11
    16e6:	9a 89       	ldd	r25, Y+18	; 0x12
    16e8:	48 9f       	mul	r20, r24
    16ea:	90 01       	movw	r18, r0
    16ec:	49 9f       	mul	r20, r25
    16ee:	30 0d       	add	r19, r0
    16f0:	58 9f       	mul	r21, r24
    16f2:	30 0d       	add	r19, r0
    16f4:	11 24       	eor	r1, r1
    16f6:	8b 85       	ldd	r24, Y+11	; 0x0b
    16f8:	9c 85       	ldd	r25, Y+12	; 0x0c
    16fa:	82 0f       	add	r24, r18
    16fc:	93 1f       	adc	r25, r19
    16fe:	9a 87       	std	Y+10, r25	; 0x0a
    1700:	89 87       	std	Y+9, r24	; 0x09
	retVal = (char*) malloc(mallocLength+1);
    1702:	89 85       	ldd	r24, Y+9	; 0x09
    1704:	9a 85       	ldd	r25, Y+10	; 0x0a
    1706:	01 96       	adiw	r24, 0x01	; 1
    1708:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <malloc>
    170c:	9c 8b       	std	Y+20, r25	; 0x14
    170e:	8b 8b       	std	Y+19, r24	; 0x13

	start = 0;
    1710:	1a 82       	std	Y+2, r1	; 0x02
    1712:	19 82       	std	Y+1, r1	; 0x01
	prevCount = 0;
    1714:	1e 82       	std	Y+6, r1	; 0x06
    1716:	1d 82       	std	Y+5, r1	; 0x05
	count = 0;
    1718:	1c 82       	std	Y+4, r1	; 0x04
    171a:	1b 82       	std	Y+3, r1	; 0x03
	while (1){
		index = indexOfWithStart(string, replaceFor, start);
    171c:	89 8d       	ldd	r24, Y+25	; 0x19
    171e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1720:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1722:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1724:	29 81       	ldd	r18, Y+1	; 0x01
    1726:	3a 81       	ldd	r19, Y+2	; 0x02
    1728:	ba 01       	movw	r22, r20
    172a:	a9 01       	movw	r20, r18
    172c:	0e 94 bf 08 	call	0x117e	; 0x117e <indexOfWithStart>
    1730:	9e 8b       	std	Y+22, r25	; 0x16
    1732:	8d 8b       	std	Y+21, r24	; 0x15
		if (index != -1){
    1734:	8d 89       	ldd	r24, Y+21	; 0x15
    1736:	9e 89       	ldd	r25, Y+22	; 0x16
    1738:	2f ef       	ldi	r18, 0xFF	; 255
    173a:	8f 3f       	cpi	r24, 0xFF	; 255
    173c:	92 07       	cpc	r25, r18
    173e:	09 f4       	brne	.+2      	; 0x1742 <replace+0xd2>
    1740:	61 c0       	rjmp	.+194    	; 0x1804 <replace+0x194>
			for (x = 0; x<index - prevCount; x++){
    1742:	18 86       	std	Y+8, r1	; 0x08
    1744:	1f 82       	std	Y+7, r1	; 0x07
    1746:	1e c0       	rjmp	.+60     	; 0x1784 <replace+0x114>
				retVal[count] = string[x+prevCount];
    1748:	8b 81       	ldd	r24, Y+3	; 0x03
    174a:	9c 81       	ldd	r25, Y+4	; 0x04
    174c:	2b 89       	ldd	r18, Y+19	; 0x13
    174e:	3c 89       	ldd	r19, Y+20	; 0x14
    1750:	82 0f       	add	r24, r18
    1752:	93 1f       	adc	r25, r19
    1754:	4f 81       	ldd	r20, Y+7	; 0x07
    1756:	58 85       	ldd	r21, Y+8	; 0x08
    1758:	2d 81       	ldd	r18, Y+5	; 0x05
    175a:	3e 81       	ldd	r19, Y+6	; 0x06
    175c:	24 0f       	add	r18, r20
    175e:	35 1f       	adc	r19, r21
    1760:	49 8d       	ldd	r20, Y+25	; 0x19
    1762:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1764:	24 0f       	add	r18, r20
    1766:	35 1f       	adc	r19, r21
    1768:	f9 01       	movw	r30, r18
    176a:	20 81       	ld	r18, Z
    176c:	fc 01       	movw	r30, r24
    176e:	20 83       	st	Z, r18
				count++;
    1770:	8b 81       	ldd	r24, Y+3	; 0x03
    1772:	9c 81       	ldd	r25, Y+4	; 0x04
    1774:	01 96       	adiw	r24, 0x01	; 1
    1776:	9c 83       	std	Y+4, r25	; 0x04
    1778:	8b 83       	std	Y+3, r24	; 0x03
	prevCount = 0;
	count = 0;
	while (1){
		index = indexOfWithStart(string, replaceFor, start);
		if (index != -1){
			for (x = 0; x<index - prevCount; x++){
    177a:	8f 81       	ldd	r24, Y+7	; 0x07
    177c:	98 85       	ldd	r25, Y+8	; 0x08
    177e:	01 96       	adiw	r24, 0x01	; 1
    1780:	98 87       	std	Y+8, r25	; 0x08
    1782:	8f 83       	std	Y+7, r24	; 0x07
    1784:	2d 89       	ldd	r18, Y+21	; 0x15
    1786:	3e 89       	ldd	r19, Y+22	; 0x16
    1788:	8d 81       	ldd	r24, Y+5	; 0x05
    178a:	9e 81       	ldd	r25, Y+6	; 0x06
    178c:	28 1b       	sub	r18, r24
    178e:	39 0b       	sbc	r19, r25
    1790:	8f 81       	ldd	r24, Y+7	; 0x07
    1792:	98 85       	ldd	r25, Y+8	; 0x08
    1794:	82 17       	cp	r24, r18
    1796:	93 07       	cpc	r25, r19
    1798:	bc f2       	brlt	.-82     	; 0x1748 <replace+0xd8>
				retVal[count] = string[x+prevCount];
				count++;
			}
			for (x=0; x<lengthReplaceWith; x++){
    179a:	18 86       	std	Y+8, r1	; 0x08
    179c:	1f 82       	std	Y+7, r1	; 0x07
    179e:	1a c0       	rjmp	.+52     	; 0x17d4 <replace+0x164>
				retVal[count] = replaceWith[x];
    17a0:	8b 81       	ldd	r24, Y+3	; 0x03
    17a2:	9c 81       	ldd	r25, Y+4	; 0x04
    17a4:	2b 89       	ldd	r18, Y+19	; 0x13
    17a6:	3c 89       	ldd	r19, Y+20	; 0x14
    17a8:	82 0f       	add	r24, r18
    17aa:	93 1f       	adc	r25, r19
    17ac:	2f 81       	ldd	r18, Y+7	; 0x07
    17ae:	38 85       	ldd	r19, Y+8	; 0x08
    17b0:	4d 8d       	ldd	r20, Y+29	; 0x1d
    17b2:	5e 8d       	ldd	r21, Y+30	; 0x1e
    17b4:	24 0f       	add	r18, r20
    17b6:	35 1f       	adc	r19, r21
    17b8:	f9 01       	movw	r30, r18
    17ba:	20 81       	ld	r18, Z
    17bc:	fc 01       	movw	r30, r24
    17be:	20 83       	st	Z, r18
				count++;
    17c0:	8b 81       	ldd	r24, Y+3	; 0x03
    17c2:	9c 81       	ldd	r25, Y+4	; 0x04
    17c4:	01 96       	adiw	r24, 0x01	; 1
    17c6:	9c 83       	std	Y+4, r25	; 0x04
    17c8:	8b 83       	std	Y+3, r24	; 0x03
		if (index != -1){
			for (x = 0; x<index - prevCount; x++){
				retVal[count] = string[x+prevCount];
				count++;
			}
			for (x=0; x<lengthReplaceWith; x++){
    17ca:	8f 81       	ldd	r24, Y+7	; 0x07
    17cc:	98 85       	ldd	r25, Y+8	; 0x08
    17ce:	01 96       	adiw	r24, 0x01	; 1
    17d0:	98 87       	std	Y+8, r25	; 0x08
    17d2:	8f 83       	std	Y+7, r24	; 0x07
    17d4:	2f 81       	ldd	r18, Y+7	; 0x07
    17d6:	38 85       	ldd	r19, Y+8	; 0x08
    17d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    17da:	98 89       	ldd	r25, Y+16	; 0x10
    17dc:	28 17       	cp	r18, r24
    17de:	39 07       	cpc	r19, r25
    17e0:	fc f2       	brlt	.-66     	; 0x17a0 <replace+0x130>
				retVal[count] = replaceWith[x];
				count++;
			}
			prevCount = index + lengthReplaceFor;
    17e2:	2d 89       	ldd	r18, Y+21	; 0x15
    17e4:	3e 89       	ldd	r19, Y+22	; 0x16
    17e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    17e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    17ea:	82 0f       	add	r24, r18
    17ec:	93 1f       	adc	r25, r19
    17ee:	9e 83       	std	Y+6, r25	; 0x06
    17f0:	8d 83       	std	Y+5, r24	; 0x05
		} else {
			break;
		}
		start = index + lengthReplaceFor;
    17f2:	2d 89       	ldd	r18, Y+21	; 0x15
    17f4:	3e 89       	ldd	r19, Y+22	; 0x16
    17f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    17f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    17fa:	82 0f       	add	r24, r18
    17fc:	93 1f       	adc	r25, r19
    17fe:	9a 83       	std	Y+2, r25	; 0x02
    1800:	89 83       	std	Y+1, r24	; 0x01
	}
    1802:	8c cf       	rjmp	.-232    	; 0x171c <replace+0xac>
	char *temp = subString(string, prevCount, length(string)-prevCount);
    1804:	89 8d       	ldd	r24, Y+25	; 0x19
    1806:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1808:	0e 94 18 08 	call	0x1030	; 0x1030 <length>
    180c:	9c 01       	movw	r18, r24
    180e:	8d 81       	ldd	r24, Y+5	; 0x05
    1810:	9e 81       	ldd	r25, Y+6	; 0x06
    1812:	28 1b       	sub	r18, r24
    1814:	39 0b       	sbc	r19, r25
    1816:	89 8d       	ldd	r24, Y+25	; 0x19
    1818:	9a 8d       	ldd	r25, Y+26	; 0x1a
    181a:	4d 81       	ldd	r20, Y+5	; 0x05
    181c:	5e 81       	ldd	r21, Y+6	; 0x06
    181e:	ba 01       	movw	r22, r20
    1820:	a9 01       	movw	r20, r18
    1822:	0e 94 47 09 	call	0x128e	; 0x128e <subString>
    1826:	98 8f       	std	Y+24, r25	; 0x18
    1828:	8f 8b       	std	Y+23, r24	; 0x17
	for (x=0; x<length(temp); x++){
    182a:	18 86       	std	Y+8, r1	; 0x08
    182c:	1f 82       	std	Y+7, r1	; 0x07
    182e:	1a c0       	rjmp	.+52     	; 0x1864 <replace+0x1f4>
		retVal[count] = temp[x];
    1830:	8b 81       	ldd	r24, Y+3	; 0x03
    1832:	9c 81       	ldd	r25, Y+4	; 0x04
    1834:	2b 89       	ldd	r18, Y+19	; 0x13
    1836:	3c 89       	ldd	r19, Y+20	; 0x14
    1838:	82 0f       	add	r24, r18
    183a:	93 1f       	adc	r25, r19
    183c:	2f 81       	ldd	r18, Y+7	; 0x07
    183e:	38 85       	ldd	r19, Y+8	; 0x08
    1840:	4f 89       	ldd	r20, Y+23	; 0x17
    1842:	58 8d       	ldd	r21, Y+24	; 0x18
    1844:	24 0f       	add	r18, r20
    1846:	35 1f       	adc	r19, r21
    1848:	f9 01       	movw	r30, r18
    184a:	20 81       	ld	r18, Z
    184c:	fc 01       	movw	r30, r24
    184e:	20 83       	st	Z, r18
		count++;
    1850:	8b 81       	ldd	r24, Y+3	; 0x03
    1852:	9c 81       	ldd	r25, Y+4	; 0x04
    1854:	01 96       	adiw	r24, 0x01	; 1
    1856:	9c 83       	std	Y+4, r25	; 0x04
    1858:	8b 83       	std	Y+3, r24	; 0x03
			break;
		}
		start = index + lengthReplaceFor;
	}
	char *temp = subString(string, prevCount, length(string)-prevCount);
	for (x=0; x<length(temp); x++){
    185a:	8f 81       	ldd	r24, Y+7	; 0x07
    185c:	98 85       	ldd	r25, Y+8	; 0x08
    185e:	01 96       	adiw	r24, 0x01	; 1
    1860:	98 87       	std	Y+8, r25	; 0x08
    1862:	8f 83       	std	Y+7, r24	; 0x07
    1864:	8f 89       	ldd	r24, Y+23	; 0x17
    1866:	98 8d       	ldd	r25, Y+24	; 0x18
    1868:	0e 94 18 08 	call	0x1030	; 0x1030 <length>
    186c:	9c 01       	movw	r18, r24
    186e:	8f 81       	ldd	r24, Y+7	; 0x07
    1870:	98 85       	ldd	r25, Y+8	; 0x08
    1872:	82 17       	cp	r24, r18
    1874:	93 07       	cpc	r25, r19
    1876:	e4 f2       	brlt	.-72     	; 0x1830 <replace+0x1c0>
		retVal[count] = temp[x];
		count++;
	}
	free(temp);
    1878:	8f 89       	ldd	r24, Y+23	; 0x17
    187a:	98 8d       	ldd	r25, Y+24	; 0x18
    187c:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <free>
	retVal[count] = '\0';
    1880:	8b 81       	ldd	r24, Y+3	; 0x03
    1882:	9c 81       	ldd	r25, Y+4	; 0x04
    1884:	2b 89       	ldd	r18, Y+19	; 0x13
    1886:	3c 89       	ldd	r19, Y+20	; 0x14
    1888:	82 0f       	add	r24, r18
    188a:	93 1f       	adc	r25, r19
    188c:	fc 01       	movw	r30, r24
    188e:	10 82       	st	Z, r1
	return retVal;
    1890:	8b 89       	ldd	r24, Y+19	; 0x13
    1892:	9c 89       	ldd	r25, Y+20	; 0x14
}
    1894:	6e 96       	adiw	r28, 0x1e	; 30
    1896:	0f b6       	in	r0, 0x3f	; 63
    1898:	f8 94       	cli
    189a:	de bf       	out	0x3e, r29	; 62
    189c:	0f be       	out	0x3f, r0	; 63
    189e:	cd bf       	out	0x3d, r28	; 61
    18a0:	cf 91       	pop	r28
    18a2:	df 91       	pop	r29
    18a4:	08 95       	ret

000018a6 <toLower>:
char *toLower(char *upperCasedString){
    18a6:	df 93       	push	r29
    18a8:	cf 93       	push	r28
    18aa:	00 d0       	rcall	.+0      	; 0x18ac <toLower+0x6>
    18ac:	00 d0       	rcall	.+0      	; 0x18ae <toLower+0x8>
    18ae:	00 d0       	rcall	.+0      	; 0x18b0 <toLower+0xa>
    18b0:	cd b7       	in	r28, 0x3d	; 61
    18b2:	de b7       	in	r29, 0x3e	; 62
    18b4:	9e 83       	std	Y+6, r25	; 0x06
    18b6:	8d 83       	std	Y+5, r24	; 0x05
     char *a;
     int count = 0;
    18b8:	1a 82       	std	Y+2, r1	; 0x02
    18ba:	19 82       	std	Y+1, r1	; 0x01

     a = (char *)malloc(length(upperCasedString)+1);
    18bc:	8d 81       	ldd	r24, Y+5	; 0x05
    18be:	9e 81       	ldd	r25, Y+6	; 0x06
    18c0:	0e 94 18 08 	call	0x1030	; 0x1030 <length>
    18c4:	01 96       	adiw	r24, 0x01	; 1
    18c6:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <malloc>
    18ca:	9c 83       	std	Y+4, r25	; 0x04
    18cc:	8b 83       	std	Y+3, r24	; 0x03
     while (upperCasedString[count] != '\0'){
    18ce:	3b c0       	rjmp	.+118    	; 0x1946 <toLower+0xa0>
           if (upperCasedString[count] >= 'A' && upperCasedString[count] <= 'Z'){
    18d0:	89 81       	ldd	r24, Y+1	; 0x01
    18d2:	9a 81       	ldd	r25, Y+2	; 0x02
    18d4:	2d 81       	ldd	r18, Y+5	; 0x05
    18d6:	3e 81       	ldd	r19, Y+6	; 0x06
    18d8:	82 0f       	add	r24, r18
    18da:	93 1f       	adc	r25, r19
    18dc:	fc 01       	movw	r30, r24
    18de:	80 81       	ld	r24, Z
    18e0:	81 34       	cpi	r24, 0x41	; 65
    18e2:	e0 f0       	brcs	.+56     	; 0x191c <toLower+0x76>
    18e4:	89 81       	ldd	r24, Y+1	; 0x01
    18e6:	9a 81       	ldd	r25, Y+2	; 0x02
    18e8:	2d 81       	ldd	r18, Y+5	; 0x05
    18ea:	3e 81       	ldd	r19, Y+6	; 0x06
    18ec:	82 0f       	add	r24, r18
    18ee:	93 1f       	adc	r25, r19
    18f0:	fc 01       	movw	r30, r24
    18f2:	80 81       	ld	r24, Z
    18f4:	8b 35       	cpi	r24, 0x5B	; 91
    18f6:	90 f4       	brcc	.+36     	; 0x191c <toLower+0x76>
               a[count] = upperCasedString[count] + 32;
    18f8:	89 81       	ldd	r24, Y+1	; 0x01
    18fa:	9a 81       	ldd	r25, Y+2	; 0x02
    18fc:	2b 81       	ldd	r18, Y+3	; 0x03
    18fe:	3c 81       	ldd	r19, Y+4	; 0x04
    1900:	82 0f       	add	r24, r18
    1902:	93 1f       	adc	r25, r19
    1904:	29 81       	ldd	r18, Y+1	; 0x01
    1906:	3a 81       	ldd	r19, Y+2	; 0x02
    1908:	4d 81       	ldd	r20, Y+5	; 0x05
    190a:	5e 81       	ldd	r21, Y+6	; 0x06
    190c:	24 0f       	add	r18, r20
    190e:	35 1f       	adc	r19, r21
    1910:	f9 01       	movw	r30, r18
    1912:	20 81       	ld	r18, Z
    1914:	20 5e       	subi	r18, 0xE0	; 224
    1916:	fc 01       	movw	r30, r24
    1918:	20 83       	st	Z, r18
    191a:	10 c0       	rjmp	.+32     	; 0x193c <toLower+0x96>
           } else {
             a[count] = upperCasedString[count];
    191c:	89 81       	ldd	r24, Y+1	; 0x01
    191e:	9a 81       	ldd	r25, Y+2	; 0x02
    1920:	2b 81       	ldd	r18, Y+3	; 0x03
    1922:	3c 81       	ldd	r19, Y+4	; 0x04
    1924:	82 0f       	add	r24, r18
    1926:	93 1f       	adc	r25, r19
    1928:	29 81       	ldd	r18, Y+1	; 0x01
    192a:	3a 81       	ldd	r19, Y+2	; 0x02
    192c:	4d 81       	ldd	r20, Y+5	; 0x05
    192e:	5e 81       	ldd	r21, Y+6	; 0x06
    1930:	24 0f       	add	r18, r20
    1932:	35 1f       	adc	r19, r21
    1934:	f9 01       	movw	r30, r18
    1936:	20 81       	ld	r18, Z
    1938:	fc 01       	movw	r30, r24
    193a:	20 83       	st	Z, r18
           }
           count++;
    193c:	89 81       	ldd	r24, Y+1	; 0x01
    193e:	9a 81       	ldd	r25, Y+2	; 0x02
    1940:	01 96       	adiw	r24, 0x01	; 1
    1942:	9a 83       	std	Y+2, r25	; 0x02
    1944:	89 83       	std	Y+1, r24	; 0x01
char *toLower(char *upperCasedString){
     char *a;
     int count = 0;

     a = (char *)malloc(length(upperCasedString)+1);
     while (upperCasedString[count] != '\0'){
    1946:	89 81       	ldd	r24, Y+1	; 0x01
    1948:	9a 81       	ldd	r25, Y+2	; 0x02
    194a:	2d 81       	ldd	r18, Y+5	; 0x05
    194c:	3e 81       	ldd	r19, Y+6	; 0x06
    194e:	82 0f       	add	r24, r18
    1950:	93 1f       	adc	r25, r19
    1952:	fc 01       	movw	r30, r24
    1954:	80 81       	ld	r24, Z
    1956:	88 23       	and	r24, r24
    1958:	09 f0       	breq	.+2      	; 0x195c <toLower+0xb6>
    195a:	ba cf       	rjmp	.-140    	; 0x18d0 <toLower+0x2a>
           } else {
             a[count] = upperCasedString[count];
           }
           count++;
     }
     a[count] = '\0';
    195c:	89 81       	ldd	r24, Y+1	; 0x01
    195e:	9a 81       	ldd	r25, Y+2	; 0x02
    1960:	2b 81       	ldd	r18, Y+3	; 0x03
    1962:	3c 81       	ldd	r19, Y+4	; 0x04
    1964:	82 0f       	add	r24, r18
    1966:	93 1f       	adc	r25, r19
    1968:	fc 01       	movw	r30, r24
    196a:	10 82       	st	Z, r1
     return a;
    196c:	8b 81       	ldd	r24, Y+3	; 0x03
    196e:	9c 81       	ldd	r25, Y+4	; 0x04
}
    1970:	26 96       	adiw	r28, 0x06	; 6
    1972:	0f b6       	in	r0, 0x3f	; 63
    1974:	f8 94       	cli
    1976:	de bf       	out	0x3e, r29	; 62
    1978:	0f be       	out	0x3f, r0	; 63
    197a:	cd bf       	out	0x3d, r28	; 61
    197c:	cf 91       	pop	r28
    197e:	df 91       	pop	r29
    1980:	08 95       	ret

00001982 <toInteger>:
int toInteger(char *number){
    1982:	df 93       	push	r29
    1984:	cf 93       	push	r28
    1986:	00 d0       	rcall	.+0      	; 0x1988 <toInteger+0x6>
    1988:	00 d0       	rcall	.+0      	; 0x198a <toInteger+0x8>
    198a:	00 d0       	rcall	.+0      	; 0x198c <toInteger+0xa>
    198c:	cd b7       	in	r28, 0x3d	; 61
    198e:	de b7       	in	r29, 0x3e	; 62
    1990:	9e 83       	std	Y+6, r25	; 0x06
    1992:	8d 83       	std	Y+5, r24	; 0x05
	int count = 0;
    1994:	1a 82       	std	Y+2, r1	; 0x02
    1996:	19 82       	std	Y+1, r1	; 0x01
	int value = 0;
    1998:	1c 82       	std	Y+4, r1	; 0x04
    199a:	1b 82       	std	Y+3, r1	; 0x03
	while (number[count] != '\0'){
    199c:	1f c0       	rjmp	.+62     	; 0x19dc <toInteger+0x5a>
		value = value * 10 + (number[count]-48);
    199e:	8b 81       	ldd	r24, Y+3	; 0x03
    19a0:	9c 81       	ldd	r25, Y+4	; 0x04
    19a2:	88 0f       	add	r24, r24
    19a4:	99 1f       	adc	r25, r25
    19a6:	9c 01       	movw	r18, r24
    19a8:	22 0f       	add	r18, r18
    19aa:	33 1f       	adc	r19, r19
    19ac:	22 0f       	add	r18, r18
    19ae:	33 1f       	adc	r19, r19
    19b0:	28 0f       	add	r18, r24
    19b2:	39 1f       	adc	r19, r25
    19b4:	89 81       	ldd	r24, Y+1	; 0x01
    19b6:	9a 81       	ldd	r25, Y+2	; 0x02
    19b8:	4d 81       	ldd	r20, Y+5	; 0x05
    19ba:	5e 81       	ldd	r21, Y+6	; 0x06
    19bc:	84 0f       	add	r24, r20
    19be:	95 1f       	adc	r25, r21
    19c0:	fc 01       	movw	r30, r24
    19c2:	80 81       	ld	r24, Z
    19c4:	88 2f       	mov	r24, r24
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	c0 97       	sbiw	r24, 0x30	; 48
    19ca:	82 0f       	add	r24, r18
    19cc:	93 1f       	adc	r25, r19
    19ce:	9c 83       	std	Y+4, r25	; 0x04
    19d0:	8b 83       	std	Y+3, r24	; 0x03
		count++;
    19d2:	89 81       	ldd	r24, Y+1	; 0x01
    19d4:	9a 81       	ldd	r25, Y+2	; 0x02
    19d6:	01 96       	adiw	r24, 0x01	; 1
    19d8:	9a 83       	std	Y+2, r25	; 0x02
    19da:	89 83       	std	Y+1, r24	; 0x01
     return a;
}
int toInteger(char *number){
	int count = 0;
	int value = 0;
	while (number[count] != '\0'){
    19dc:	89 81       	ldd	r24, Y+1	; 0x01
    19de:	9a 81       	ldd	r25, Y+2	; 0x02
    19e0:	2d 81       	ldd	r18, Y+5	; 0x05
    19e2:	3e 81       	ldd	r19, Y+6	; 0x06
    19e4:	82 0f       	add	r24, r18
    19e6:	93 1f       	adc	r25, r19
    19e8:	fc 01       	movw	r30, r24
    19ea:	80 81       	ld	r24, Z
    19ec:	88 23       	and	r24, r24
    19ee:	b9 f6       	brne	.-82     	; 0x199e <toInteger+0x1c>
		value = value * 10 + (number[count]-48);
		count++;
	}
	return value;
    19f0:	8b 81       	ldd	r24, Y+3	; 0x03
    19f2:	9c 81       	ldd	r25, Y+4	; 0x04
}
    19f4:	26 96       	adiw	r28, 0x06	; 6
    19f6:	0f b6       	in	r0, 0x3f	; 63
    19f8:	f8 94       	cli
    19fa:	de bf       	out	0x3e, r29	; 62
    19fc:	0f be       	out	0x3f, r0	; 63
    19fe:	cd bf       	out	0x3d, r28	; 61
    1a00:	cf 91       	pop	r28
    1a02:	df 91       	pop	r29
    1a04:	08 95       	ret

00001a06 <sendATCommand>:
/***********************************************************************/

void sendATCommand(char *str){
    1a06:	df 93       	push	r29
    1a08:	cf 93       	push	r28
    1a0a:	00 d0       	rcall	.+0      	; 0x1a0c <sendATCommand+0x6>
    1a0c:	cd b7       	in	r28, 0x3d	; 61
    1a0e:	de b7       	in	r29, 0x3e	; 62
    1a10:	9a 83       	std	Y+2, r25	; 0x02
    1a12:	89 83       	std	Y+1, r24	; 0x01
	usartPrintString(str);
    1a14:	89 81       	ldd	r24, Y+1	; 0x01
    1a16:	9a 81       	ldd	r25, Y+2	; 0x02
    1a18:	0e 94 af 05 	call	0xb5e	; 0xb5e <usartPrintString>
	USART_Transmit(ENTER);
    1a1c:	80 91 62 00 	lds	r24, 0x0062
    1a20:	0e 94 83 05 	call	0xb06	; 0xb06 <USART_Transmit>
}
    1a24:	0f 90       	pop	r0
    1a26:	0f 90       	pop	r0
    1a28:	cf 91       	pop	r28
    1a2a:	df 91       	pop	r29
    1a2c:	08 95       	ret

00001a2e <sendATCommand1>:
void sendATCommand1(char *str, char number){
    1a2e:	df 93       	push	r29
    1a30:	cf 93       	push	r28
    1a32:	00 d0       	rcall	.+0      	; 0x1a34 <sendATCommand1+0x6>
    1a34:	0f 92       	push	r0
    1a36:	cd b7       	in	r28, 0x3d	; 61
    1a38:	de b7       	in	r29, 0x3e	; 62
    1a3a:	9a 83       	std	Y+2, r25	; 0x02
    1a3c:	89 83       	std	Y+1, r24	; 0x01
    1a3e:	6b 83       	std	Y+3, r22	; 0x03
	usartPrintString(str);
    1a40:	89 81       	ldd	r24, Y+1	; 0x01
    1a42:	9a 81       	ldd	r25, Y+2	; 0x02
    1a44:	0e 94 af 05 	call	0xb5e	; 0xb5e <usartPrintString>
	USART_Transmit(number);
    1a48:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4a:	0e 94 83 05 	call	0xb06	; 0xb06 <USART_Transmit>
	USART_Transmit(ENTER);
    1a4e:	80 91 62 00 	lds	r24, 0x0062
    1a52:	0e 94 83 05 	call	0xb06	; 0xb06 <USART_Transmit>
}
    1a56:	0f 90       	pop	r0
    1a58:	0f 90       	pop	r0
    1a5a:	0f 90       	pop	r0
    1a5c:	cf 91       	pop	r28
    1a5e:	df 91       	pop	r29
    1a60:	08 95       	ret

00001a62 <sendATCommand2>:
void sendATCommand2(char *str, char number, char number2){
    1a62:	df 93       	push	r29
    1a64:	cf 93       	push	r28
    1a66:	00 d0       	rcall	.+0      	; 0x1a68 <sendATCommand2+0x6>
    1a68:	00 d0       	rcall	.+0      	; 0x1a6a <sendATCommand2+0x8>
    1a6a:	cd b7       	in	r28, 0x3d	; 61
    1a6c:	de b7       	in	r29, 0x3e	; 62
    1a6e:	9a 83       	std	Y+2, r25	; 0x02
    1a70:	89 83       	std	Y+1, r24	; 0x01
    1a72:	6b 83       	std	Y+3, r22	; 0x03
    1a74:	4c 83       	std	Y+4, r20	; 0x04
	usartPrintString(str);
    1a76:	89 81       	ldd	r24, Y+1	; 0x01
    1a78:	9a 81       	ldd	r25, Y+2	; 0x02
    1a7a:	0e 94 af 05 	call	0xb5e	; 0xb5e <usartPrintString>
	USART_Transmit(number);
    1a7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a80:	0e 94 83 05 	call	0xb06	; 0xb06 <USART_Transmit>
	USART_Transmit(number2);
    1a84:	8c 81       	ldd	r24, Y+4	; 0x04
    1a86:	0e 94 83 05 	call	0xb06	; 0xb06 <USART_Transmit>
	USART_Transmit(ENTER);
    1a8a:	80 91 62 00 	lds	r24, 0x0062
    1a8e:	0e 94 83 05 	call	0xb06	; 0xb06 <USART_Transmit>
}
    1a92:	0f 90       	pop	r0
    1a94:	0f 90       	pop	r0
    1a96:	0f 90       	pop	r0
    1a98:	0f 90       	pop	r0
    1a9a:	cf 91       	pop	r28
    1a9c:	df 91       	pop	r29
    1a9e:	08 95       	ret

00001aa0 <sendMessage>:
void sendMessage(char *number, char *message, char success){
    1aa0:	df 93       	push	r29
    1aa2:	cf 93       	push	r28
    1aa4:	00 d0       	rcall	.+0      	; 0x1aa6 <sendMessage+0x6>
    1aa6:	00 d0       	rcall	.+0      	; 0x1aa8 <sendMessage+0x8>
    1aa8:	0f 92       	push	r0
    1aaa:	cd b7       	in	r28, 0x3d	; 61
    1aac:	de b7       	in	r29, 0x3e	; 62
    1aae:	9a 83       	std	Y+2, r25	; 0x02
    1ab0:	89 83       	std	Y+1, r24	; 0x01
    1ab2:	7c 83       	std	Y+4, r23	; 0x04
    1ab4:	6b 83       	std	Y+3, r22	; 0x03
    1ab6:	4d 83       	std	Y+5, r20	; 0x05
	usartPrintString("at+cmgs=\"");
    1ab8:	8e ec       	ldi	r24, 0xCE	; 206
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	0e 94 af 05 	call	0xb5e	; 0xb5e <usartPrintString>
	usartPrintString (number);
    1ac0:	89 81       	ldd	r24, Y+1	; 0x01
    1ac2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac4:	0e 94 af 05 	call	0xb5e	; 0xb5e <usartPrintString>
	usartPrintString ("\"\r");
    1ac8:	88 ed       	ldi	r24, 0xD8	; 216
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	0e 94 af 05 	call	0xb5e	; 0xb5e <usartPrintString>
	usartPrintString(message);
    1ad0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad4:	0e 94 af 05 	call	0xb5e	; 0xb5e <usartPrintString>
	if (success == 1){
    1ad8:	8d 81       	ldd	r24, Y+5	; 0x05
    1ada:	81 30       	cpi	r24, 0x01	; 1
    1adc:	29 f4       	brne	.+10     	; 0x1ae8 <sendMessage+0x48>
		usartPrintString(" su");
    1ade:	8b ed       	ldi	r24, 0xDB	; 219
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	0e 94 af 05 	call	0xb5e	; 0xb5e <usartPrintString>
    1ae6:	07 c0       	rjmp	.+14     	; 0x1af6 <sendMessage+0x56>
	} else if (success == 2){
    1ae8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aea:	82 30       	cpi	r24, 0x02	; 2
    1aec:	21 f4       	brne	.+8      	; 0x1af6 <sendMessage+0x56>
		usartPrintString(" fu");
    1aee:	8f ed       	ldi	r24, 0xDF	; 223
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	0e 94 af 05 	call	0xb5e	; 0xb5e <usartPrintString>
	}
	USART_Transmit(26);
    1af6:	8a e1       	ldi	r24, 0x1A	; 26
    1af8:	0e 94 83 05 	call	0xb06	; 0xb06 <USART_Transmit>
	USART_Transmit(ENTER);
    1afc:	80 91 62 00 	lds	r24, 0x0062
    1b00:	0e 94 83 05 	call	0xb06	; 0xb06 <USART_Transmit>
}
    1b04:	0f 90       	pop	r0
    1b06:	0f 90       	pop	r0
    1b08:	0f 90       	pop	r0
    1b0a:	0f 90       	pop	r0
    1b0c:	0f 90       	pop	r0
    1b0e:	cf 91       	pop	r28
    1b10:	df 91       	pop	r29
    1b12:	08 95       	ret

00001b14 <sendMessage1>:
void sendMessage1(char *number, char *message, char *message2, char success){
    1b14:	df 93       	push	r29
    1b16:	cf 93       	push	r28
    1b18:	cd b7       	in	r28, 0x3d	; 61
    1b1a:	de b7       	in	r29, 0x3e	; 62
    1b1c:	27 97       	sbiw	r28, 0x07	; 7
    1b1e:	0f b6       	in	r0, 0x3f	; 63
    1b20:	f8 94       	cli
    1b22:	de bf       	out	0x3e, r29	; 62
    1b24:	0f be       	out	0x3f, r0	; 63
    1b26:	cd bf       	out	0x3d, r28	; 61
    1b28:	9a 83       	std	Y+2, r25	; 0x02
    1b2a:	89 83       	std	Y+1, r24	; 0x01
    1b2c:	7c 83       	std	Y+4, r23	; 0x04
    1b2e:	6b 83       	std	Y+3, r22	; 0x03
    1b30:	5e 83       	std	Y+6, r21	; 0x06
    1b32:	4d 83       	std	Y+5, r20	; 0x05
    1b34:	2f 83       	std	Y+7, r18	; 0x07
	usartPrintString("at+cmgs=\"");
    1b36:	8e ec       	ldi	r24, 0xCE	; 206
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	0e 94 af 05 	call	0xb5e	; 0xb5e <usartPrintString>
	usartPrintString (number);
    1b3e:	89 81       	ldd	r24, Y+1	; 0x01
    1b40:	9a 81       	ldd	r25, Y+2	; 0x02
    1b42:	0e 94 af 05 	call	0xb5e	; 0xb5e <usartPrintString>
	usartPrintString ("\"\r");
    1b46:	88 ed       	ldi	r24, 0xD8	; 216
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	0e 94 af 05 	call	0xb5e	; 0xb5e <usartPrintString>
	usartPrintString(message);
    1b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b50:	9c 81       	ldd	r25, Y+4	; 0x04
    1b52:	0e 94 af 05 	call	0xb5e	; 0xb5e <usartPrintString>
	USART_Transmit (' ');
    1b56:	80 e2       	ldi	r24, 0x20	; 32
    1b58:	0e 94 83 05 	call	0xb06	; 0xb06 <USART_Transmit>
	usartPrintString(message2);
    1b5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b60:	0e 94 af 05 	call	0xb5e	; 0xb5e <usartPrintString>
	if (success == 1){
    1b64:	8f 81       	ldd	r24, Y+7	; 0x07
    1b66:	81 30       	cpi	r24, 0x01	; 1
    1b68:	29 f4       	brne	.+10     	; 0x1b74 <sendMessage1+0x60>
		usartPrintString(" su");
    1b6a:	8b ed       	ldi	r24, 0xDB	; 219
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	0e 94 af 05 	call	0xb5e	; 0xb5e <usartPrintString>
    1b72:	07 c0       	rjmp	.+14     	; 0x1b82 <sendMessage1+0x6e>
	} else if (success == 2){
    1b74:	8f 81       	ldd	r24, Y+7	; 0x07
    1b76:	82 30       	cpi	r24, 0x02	; 2
    1b78:	21 f4       	brne	.+8      	; 0x1b82 <sendMessage1+0x6e>
		usartPrintString(" fu");
    1b7a:	8f ed       	ldi	r24, 0xDF	; 223
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	0e 94 af 05 	call	0xb5e	; 0xb5e <usartPrintString>
	}
	USART_Transmit(26);
    1b82:	8a e1       	ldi	r24, 0x1A	; 26
    1b84:	0e 94 83 05 	call	0xb06	; 0xb06 <USART_Transmit>
	USART_Transmit(ENTER);
    1b88:	80 91 62 00 	lds	r24, 0x0062
    1b8c:	0e 94 83 05 	call	0xb06	; 0xb06 <USART_Transmit>
}
    1b90:	27 96       	adiw	r28, 0x07	; 7
    1b92:	0f b6       	in	r0, 0x3f	; 63
    1b94:	f8 94       	cli
    1b96:	de bf       	out	0x3e, r29	; 62
    1b98:	0f be       	out	0x3f, r0	; 63
    1b9a:	cd bf       	out	0x3d, r28	; 61
    1b9c:	cf 91       	pop	r28
    1b9e:	df 91       	pop	r29
    1ba0:	08 95       	ret

00001ba2 <LCDPrintLines>:

void LCDPrintLines(char *line1, char *line2){
    1ba2:	df 93       	push	r29
    1ba4:	cf 93       	push	r28
    1ba6:	00 d0       	rcall	.+0      	; 0x1ba8 <LCDPrintLines+0x6>
    1ba8:	00 d0       	rcall	.+0      	; 0x1baa <LCDPrintLines+0x8>
    1baa:	cd b7       	in	r28, 0x3d	; 61
    1bac:	de b7       	in	r29, 0x3e	; 62
    1bae:	9a 83       	std	Y+2, r25	; 0x02
    1bb0:	89 83       	std	Y+1, r24	; 0x01
    1bb2:	7c 83       	std	Y+4, r23	; 0x04
    1bb4:	6b 83       	std	Y+3, r22	; 0x03
	LCDClear();
    1bb6:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCDClear>
	LCDPrint (line1);
    1bba:	89 81       	ldd	r24, Y+1	; 0x01
    1bbc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bbe:	0e 94 b9 04 	call	0x972	; 0x972 <LCDPrint>
	LCDGotoXY(0, 1);
    1bc2:	80 e0       	ldi	r24, 0x00	; 0
    1bc4:	61 e0       	ldi	r22, 0x01	; 1
    1bc6:	0e 94 ee 04 	call	0x9dc	; 0x9dc <LCDGotoXY>
	LCDPrint (line2);
    1bca:	8b 81       	ldd	r24, Y+3	; 0x03
    1bcc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bce:	0e 94 b9 04 	call	0x972	; 0x972 <LCDPrint>
}
    1bd2:	0f 90       	pop	r0
    1bd4:	0f 90       	pop	r0
    1bd6:	0f 90       	pop	r0
    1bd8:	0f 90       	pop	r0
    1bda:	cf 91       	pop	r28
    1bdc:	df 91       	pop	r29
    1bde:	08 95       	ret

00001be0 <main>:

int main(){
    1be0:	0f 93       	push	r16
    1be2:	1f 93       	push	r17
    1be4:	df 93       	push	r29
    1be6:	cf 93       	push	r28
    1be8:	cd b7       	in	r28, 0x3d	; 61
    1bea:	de b7       	in	r29, 0x3e	; 62
    1bec:	cb 59       	subi	r28, 0x9B	; 155
    1bee:	d0 40       	sbci	r29, 0x00	; 0
    1bf0:	0f b6       	in	r0, 0x3f	; 63
    1bf2:	f8 94       	cli
    1bf4:	de bf       	out	0x3e, r29	; 62
    1bf6:	0f be       	out	0x3f, r0	; 63
    1bf8:	cd bf       	out	0x3d, r28	; 61
	char **a;
	char **userNo;
	char **textContent;
	int textContentCounter = 0;
    1bfa:	ce 01       	movw	r24, r28
    1bfc:	88 56       	subi	r24, 0x68	; 104
    1bfe:	9f 4f       	sbci	r25, 0xFF	; 255
    1c00:	fc 01       	movw	r30, r24
    1c02:	11 82       	std	Z+1, r1	; 0x01
    1c04:	10 82       	st	Z, r1
	int userNoCounter;

	DDRB = 0xFF;
    1c06:	87 e3       	ldi	r24, 0x37	; 55
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	2f ef       	ldi	r18, 0xFF	; 255
    1c0c:	fc 01       	movw	r30, r24
    1c0e:	20 83       	st	Z, r18
	DDRD = 0b11111100;
    1c10:	81 e3       	ldi	r24, 0x31	; 49
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	2c ef       	ldi	r18, 0xFC	; 252
    1c16:	fc 01       	movw	r30, r24
    1c18:	20 83       	st	Z, r18
	DDRC = 0xFF;
    1c1a:	84 e3       	ldi	r24, 0x34	; 52
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	2f ef       	ldi	r18, 0xFF	; 255
    1c20:	fc 01       	movw	r30, r24
    1c22:	20 83       	st	Z, r18
	DDRA = 0x00;
    1c24:	8a e3       	ldi	r24, 0x3A	; 58
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	fc 01       	movw	r30, r24
    1c2a:	10 82       	st	Z, r1
	PORTA = 0x00;
    1c2c:	8b e3       	ldi	r24, 0x3B	; 59
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	fc 01       	movw	r30, r24
    1c32:	10 82       	st	Z, r1

	initLCD();
    1c34:	0e 94 49 00 	call	0x92	; 0x92 <initLCD>
	USART_Init(78);
    1c38:	8e e4       	ldi	r24, 0x4E	; 78
    1c3a:	0e 94 5e 05 	call	0xabc	; 0xabc <USART_Init>
	sei();
    1c3e:	78 94       	sei
	/************************* display Init message ********************/
	LCDClear();
    1c40:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCDClear>
	LCDPrint ("uC working");
    1c44:	83 ee       	ldi	r24, 0xE3	; 227
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	0e 94 b9 04 	call	0x972	; 0x972 <LCDPrint>
    1c4c:	80 e0       	ldi	r24, 0x00	; 0
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	aa e7       	ldi	r26, 0x7A	; 122
    1c52:	b4 e4       	ldi	r27, 0x44	; 68
    1c54:	8a 8f       	std	Y+26, r24	; 0x1a
    1c56:	9b 8f       	std	Y+27, r25	; 0x1b
    1c58:	ac 8f       	std	Y+28, r26	; 0x1c
    1c5a:	bd 8f       	std	Y+29, r27	; 0x1d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1c5c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1c5e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1c60:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c62:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c64:	20 e0       	ldi	r18, 0x00	; 0
    1c66:	30 e8       	ldi	r19, 0x80	; 128
    1c68:	4b e3       	ldi	r20, 0x3B	; 59
    1c6a:	55 e4       	ldi	r21, 0x45	; 69
    1c6c:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <__mulsf3>
    1c70:	dc 01       	movw	r26, r24
    1c72:	cb 01       	movw	r24, r22
    1c74:	8e 8f       	std	Y+30, r24	; 0x1e
    1c76:	9f 8f       	std	Y+31, r25	; 0x1f
    1c78:	a8 a3       	std	Y+32, r26	; 0x20
    1c7a:	b9 a3       	std	Y+33, r27	; 0x21
	if (__tmp < 1.0)
    1c7c:	11 e0       	ldi	r17, 0x01	; 1
    1c7e:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1c80:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1c82:	88 a1       	ldd	r24, Y+32	; 0x20
    1c84:	99 a1       	ldd	r25, Y+33	; 0x21
    1c86:	20 e0       	ldi	r18, 0x00	; 0
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	40 e8       	ldi	r20, 0x80	; 128
    1c8c:	5f e3       	ldi	r21, 0x3F	; 63
    1c8e:	0e 94 ae 1c 	call	0x395c	; 0x395c <__ltsf2>
    1c92:	88 23       	and	r24, r24
    1c94:	0c f0       	brlt	.+2      	; 0x1c98 <main+0xb8>
    1c96:	10 e0       	ldi	r17, 0x00	; 0
    1c98:	11 23       	and	r17, r17
    1c9a:	29 f0       	breq	.+10     	; 0x1ca6 <main+0xc6>
		__ticks = 1;
    1c9c:	81 e0       	ldi	r24, 0x01	; 1
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	9b a3       	std	Y+35, r25	; 0x23
    1ca2:	8a a3       	std	Y+34, r24	; 0x22
    1ca4:	46 c0       	rjmp	.+140    	; 0x1d32 <main+0x152>
	else if (__tmp > 65535)
    1ca6:	11 e0       	ldi	r17, 0x01	; 1
    1ca8:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1caa:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1cac:	88 a1       	ldd	r24, Y+32	; 0x20
    1cae:	99 a1       	ldd	r25, Y+33	; 0x21
    1cb0:	20 e0       	ldi	r18, 0x00	; 0
    1cb2:	3f ef       	ldi	r19, 0xFF	; 255
    1cb4:	4f e7       	ldi	r20, 0x7F	; 127
    1cb6:	57 e4       	ldi	r21, 0x47	; 71
    1cb8:	0e 94 4e 1c 	call	0x389c	; 0x389c <__gtsf2>
    1cbc:	18 16       	cp	r1, r24
    1cbe:	0c f0       	brlt	.+2      	; 0x1cc2 <main+0xe2>
    1cc0:	10 e0       	ldi	r17, 0x00	; 0
    1cc2:	11 23       	and	r17, r17
    1cc4:	61 f1       	breq	.+88     	; 0x1d1e <main+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cc6:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1cc8:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1cca:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1ccc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	40 e2       	ldi	r20, 0x20	; 32
    1cd4:	51 e4       	ldi	r21, 0x41	; 65
    1cd6:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <__mulsf3>
    1cda:	dc 01       	movw	r26, r24
    1cdc:	cb 01       	movw	r24, r22
    1cde:	bc 01       	movw	r22, r24
    1ce0:	cd 01       	movw	r24, r26
    1ce2:	0e 94 80 19 	call	0x3300	; 0x3300 <__fixunssfsi>
    1ce6:	dc 01       	movw	r26, r24
    1ce8:	cb 01       	movw	r24, r22
    1cea:	9b a3       	std	Y+35, r25	; 0x23
    1cec:	8a a3       	std	Y+34, r24	; 0x22
    1cee:	12 c0       	rjmp	.+36     	; 0x1d14 <main+0x134>
    1cf0:	8c e2       	ldi	r24, 0x2C	; 44
    1cf2:	91 e0       	ldi	r25, 0x01	; 1
    1cf4:	9d a3       	std	Y+37, r25	; 0x25
    1cf6:	8c a3       	std	Y+36, r24	; 0x24
    1cf8:	8c a1       	ldd	r24, Y+36	; 0x24
    1cfa:	9d a1       	ldd	r25, Y+37	; 0x25
    1cfc:	8c 01       	movw	r16, r24
    1cfe:	c8 01       	movw	r24, r16
    1d00:	01 97       	sbiw	r24, 0x01	; 1
    1d02:	f1 f7       	brne	.-4      	; 0x1d00 <main+0x120>
    1d04:	8c 01       	movw	r16, r24
    1d06:	1d a3       	std	Y+37, r17	; 0x25
    1d08:	0c a3       	std	Y+36, r16	; 0x24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d0a:	8a a1       	ldd	r24, Y+34	; 0x22
    1d0c:	9b a1       	ldd	r25, Y+35	; 0x23
    1d0e:	01 97       	sbiw	r24, 0x01	; 1
    1d10:	9b a3       	std	Y+35, r25	; 0x23
    1d12:	8a a3       	std	Y+34, r24	; 0x22
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d14:	8a a1       	ldd	r24, Y+34	; 0x22
    1d16:	9b a1       	ldd	r25, Y+35	; 0x23
    1d18:	00 97       	sbiw	r24, 0x00	; 0
    1d1a:	51 f7       	brne	.-44     	; 0x1cf0 <main+0x110>
    1d1c:	17 c0       	rjmp	.+46     	; 0x1d4c <main+0x16c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d1e:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1d20:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1d22:	88 a1       	ldd	r24, Y+32	; 0x20
    1d24:	99 a1       	ldd	r25, Y+33	; 0x21
    1d26:	0e 94 80 19 	call	0x3300	; 0x3300 <__fixunssfsi>
    1d2a:	dc 01       	movw	r26, r24
    1d2c:	cb 01       	movw	r24, r22
    1d2e:	9b a3       	std	Y+35, r25	; 0x23
    1d30:	8a a3       	std	Y+34, r24	; 0x22
    1d32:	8a a1       	ldd	r24, Y+34	; 0x22
    1d34:	9b a1       	ldd	r25, Y+35	; 0x23
    1d36:	9f a3       	std	Y+39, r25	; 0x27
    1d38:	8e a3       	std	Y+38, r24	; 0x26
    1d3a:	8e a1       	ldd	r24, Y+38	; 0x26
    1d3c:	9f a1       	ldd	r25, Y+39	; 0x27
    1d3e:	8c 01       	movw	r16, r24
    1d40:	f8 01       	movw	r30, r16
    1d42:	31 97       	sbiw	r30, 0x01	; 1
    1d44:	f1 f7       	brne	.-4      	; 0x1d42 <main+0x162>
    1d46:	8f 01       	movw	r16, r30
    1d48:	1f a3       	std	Y+39, r17	; 0x27
    1d4a:	0e a3       	std	Y+38, r16	; 0x26
	_delay_ms(1000);
	/*******************************************************************/

	/****************************** GSM INIT ***************************/
	okComplete = 0;
    1d4c:	10 92 f8 02 	sts	0x02F8, r1
	sendATCommand("at");
    1d50:	8e ee       	ldi	r24, 0xEE	; 238
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <sendATCommand>
	while (okComplete == 0);
    1d58:	00 00       	nop
    1d5a:	80 91 f8 02 	lds	r24, 0x02F8
    1d5e:	88 23       	and	r24, r24
    1d60:	e1 f3       	breq	.-8      	; 0x1d5a <main+0x17a>

	if (okComplete == 1) {
    1d62:	80 91 f8 02 	lds	r24, 0x02F8
    1d66:	81 30       	cpi	r24, 0x01	; 1
    1d68:	09 f0       	breq	.+2      	; 0x1d6c <main+0x18c>
    1d6a:	90 c0       	rjmp	.+288    	; 0x1e8c <main+0x2ac>
		/************** GSM initilization success ******************/
		LCDClear();
    1d6c:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCDClear>
		LCDPrint ("GSM init su");
    1d70:	81 ef       	ldi	r24, 0xF1	; 241
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	0e 94 b9 04 	call	0x972	; 0x972 <LCDPrint>
    1d78:	80 e0       	ldi	r24, 0x00	; 0
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	aa e7       	ldi	r26, 0x7A	; 122
    1d7e:	b4 e4       	ldi	r27, 0x44	; 68
    1d80:	88 a7       	std	Y+40, r24	; 0x28
    1d82:	99 a7       	std	Y+41, r25	; 0x29
    1d84:	aa a7       	std	Y+42, r26	; 0x2a
    1d86:	bb a7       	std	Y+43, r27	; 0x2b
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1d88:	68 a5       	ldd	r22, Y+40	; 0x28
    1d8a:	79 a5       	ldd	r23, Y+41	; 0x29
    1d8c:	8a a5       	ldd	r24, Y+42	; 0x2a
    1d8e:	9b a5       	ldd	r25, Y+43	; 0x2b
    1d90:	20 e0       	ldi	r18, 0x00	; 0
    1d92:	30 e8       	ldi	r19, 0x80	; 128
    1d94:	4b e3       	ldi	r20, 0x3B	; 59
    1d96:	55 e4       	ldi	r21, 0x45	; 69
    1d98:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <__mulsf3>
    1d9c:	dc 01       	movw	r26, r24
    1d9e:	cb 01       	movw	r24, r22
    1da0:	8c a7       	std	Y+44, r24	; 0x2c
    1da2:	9d a7       	std	Y+45, r25	; 0x2d
    1da4:	ae a7       	std	Y+46, r26	; 0x2e
    1da6:	bf a7       	std	Y+47, r27	; 0x2f
	if (__tmp < 1.0)
    1da8:	11 e0       	ldi	r17, 0x01	; 1
    1daa:	6c a5       	ldd	r22, Y+44	; 0x2c
    1dac:	7d a5       	ldd	r23, Y+45	; 0x2d
    1dae:	8e a5       	ldd	r24, Y+46	; 0x2e
    1db0:	9f a5       	ldd	r25, Y+47	; 0x2f
    1db2:	20 e0       	ldi	r18, 0x00	; 0
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	40 e8       	ldi	r20, 0x80	; 128
    1db8:	5f e3       	ldi	r21, 0x3F	; 63
    1dba:	0e 94 ae 1c 	call	0x395c	; 0x395c <__ltsf2>
    1dbe:	88 23       	and	r24, r24
    1dc0:	0c f0       	brlt	.+2      	; 0x1dc4 <main+0x1e4>
    1dc2:	10 e0       	ldi	r17, 0x00	; 0
    1dc4:	11 23       	and	r17, r17
    1dc6:	29 f0       	breq	.+10     	; 0x1dd2 <main+0x1f2>
		__ticks = 1;
    1dc8:	81 e0       	ldi	r24, 0x01	; 1
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	99 ab       	std	Y+49, r25	; 0x31
    1dce:	88 ab       	std	Y+48, r24	; 0x30
    1dd0:	46 c0       	rjmp	.+140    	; 0x1e5e <main+0x27e>
	else if (__tmp > 65535)
    1dd2:	11 e0       	ldi	r17, 0x01	; 1
    1dd4:	6c a5       	ldd	r22, Y+44	; 0x2c
    1dd6:	7d a5       	ldd	r23, Y+45	; 0x2d
    1dd8:	8e a5       	ldd	r24, Y+46	; 0x2e
    1dda:	9f a5       	ldd	r25, Y+47	; 0x2f
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	3f ef       	ldi	r19, 0xFF	; 255
    1de0:	4f e7       	ldi	r20, 0x7F	; 127
    1de2:	57 e4       	ldi	r21, 0x47	; 71
    1de4:	0e 94 4e 1c 	call	0x389c	; 0x389c <__gtsf2>
    1de8:	18 16       	cp	r1, r24
    1dea:	0c f0       	brlt	.+2      	; 0x1dee <main+0x20e>
    1dec:	10 e0       	ldi	r17, 0x00	; 0
    1dee:	11 23       	and	r17, r17
    1df0:	61 f1       	breq	.+88     	; 0x1e4a <main+0x26a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1df2:	68 a5       	ldd	r22, Y+40	; 0x28
    1df4:	79 a5       	ldd	r23, Y+41	; 0x29
    1df6:	8a a5       	ldd	r24, Y+42	; 0x2a
    1df8:	9b a5       	ldd	r25, Y+43	; 0x2b
    1dfa:	20 e0       	ldi	r18, 0x00	; 0
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	40 e2       	ldi	r20, 0x20	; 32
    1e00:	51 e4       	ldi	r21, 0x41	; 65
    1e02:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <__mulsf3>
    1e06:	dc 01       	movw	r26, r24
    1e08:	cb 01       	movw	r24, r22
    1e0a:	bc 01       	movw	r22, r24
    1e0c:	cd 01       	movw	r24, r26
    1e0e:	0e 94 80 19 	call	0x3300	; 0x3300 <__fixunssfsi>
    1e12:	dc 01       	movw	r26, r24
    1e14:	cb 01       	movw	r24, r22
    1e16:	99 ab       	std	Y+49, r25	; 0x31
    1e18:	88 ab       	std	Y+48, r24	; 0x30
    1e1a:	12 c0       	rjmp	.+36     	; 0x1e40 <main+0x260>
    1e1c:	8c e2       	ldi	r24, 0x2C	; 44
    1e1e:	91 e0       	ldi	r25, 0x01	; 1
    1e20:	9b ab       	std	Y+51, r25	; 0x33
    1e22:	8a ab       	std	Y+50, r24	; 0x32
    1e24:	8a a9       	ldd	r24, Y+50	; 0x32
    1e26:	9b a9       	ldd	r25, Y+51	; 0x33
    1e28:	8c 01       	movw	r16, r24
    1e2a:	c8 01       	movw	r24, r16
    1e2c:	01 97       	sbiw	r24, 0x01	; 1
    1e2e:	f1 f7       	brne	.-4      	; 0x1e2c <main+0x24c>
    1e30:	8c 01       	movw	r16, r24
    1e32:	1b ab       	std	Y+51, r17	; 0x33
    1e34:	0a ab       	std	Y+50, r16	; 0x32
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e36:	88 a9       	ldd	r24, Y+48	; 0x30
    1e38:	99 a9       	ldd	r25, Y+49	; 0x31
    1e3a:	01 97       	sbiw	r24, 0x01	; 1
    1e3c:	99 ab       	std	Y+49, r25	; 0x31
    1e3e:	88 ab       	std	Y+48, r24	; 0x30
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e40:	88 a9       	ldd	r24, Y+48	; 0x30
    1e42:	99 a9       	ldd	r25, Y+49	; 0x31
    1e44:	00 97       	sbiw	r24, 0x00	; 0
    1e46:	51 f7       	brne	.-44     	; 0x1e1c <main+0x23c>
    1e48:	17 c0       	rjmp	.+46     	; 0x1e78 <main+0x298>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e4a:	6c a5       	ldd	r22, Y+44	; 0x2c
    1e4c:	7d a5       	ldd	r23, Y+45	; 0x2d
    1e4e:	8e a5       	ldd	r24, Y+46	; 0x2e
    1e50:	9f a5       	ldd	r25, Y+47	; 0x2f
    1e52:	0e 94 80 19 	call	0x3300	; 0x3300 <__fixunssfsi>
    1e56:	dc 01       	movw	r26, r24
    1e58:	cb 01       	movw	r24, r22
    1e5a:	99 ab       	std	Y+49, r25	; 0x31
    1e5c:	88 ab       	std	Y+48, r24	; 0x30
    1e5e:	88 a9       	ldd	r24, Y+48	; 0x30
    1e60:	99 a9       	ldd	r25, Y+49	; 0x31
    1e62:	9d ab       	std	Y+53, r25	; 0x35
    1e64:	8c ab       	std	Y+52, r24	; 0x34
    1e66:	8c a9       	ldd	r24, Y+52	; 0x34
    1e68:	9d a9       	ldd	r25, Y+53	; 0x35
    1e6a:	8c 01       	movw	r16, r24
    1e6c:	f8 01       	movw	r30, r16
    1e6e:	31 97       	sbiw	r30, 0x01	; 1
    1e70:	f1 f7       	brne	.-4      	; 0x1e6e <main+0x28e>
    1e72:	8f 01       	movw	r16, r30
    1e74:	1d ab       	std	Y+53, r17	; 0x35
    1e76:	0c ab       	std	Y+52, r16	; 0x34
		LCDPrint ("System Halting...");
		while (1);
		/************************************************************/
	}
	_delay_ms(1000);
	okComplete = 1;
    1e78:	81 e0       	ldi	r24, 0x01	; 1
    1e7a:	80 93 f8 02 	sts	0x02F8, r24
	/*******************************************************************/

	whatIsGoingOn = NOTHING;
    1e7e:	10 92 ff 03 	sts	0x03FF, r1
	bufferCount = 0;
    1e82:	10 92 fa 02 	sts	0x02FA, r1
    1e86:	10 92 f9 02 	sts	0x02F9, r1
    1e8a:	10 c0       	rjmp	.+32     	; 0x1eac <main+0x2cc>

		/****** Check for EEPROM value and reset it ****************/
		/***********************************************************/
	}else {
		/************ GSM unsuccessful in initilization *************/
		LCDClear();
    1e8c:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCDClear>
		LCDPrint ("GSM init fu");
    1e90:	8d ef       	ldi	r24, 0xFD	; 253
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	0e 94 b9 04 	call	0x972	; 0x972 <LCDPrint>
		LCDGotoXY(0, 1);
    1e98:	80 e0       	ldi	r24, 0x00	; 0
    1e9a:	61 e0       	ldi	r22, 0x01	; 1
    1e9c:	0e 94 ee 04 	call	0x9dc	; 0x9dc <LCDGotoXY>
		LCDPrint ("System Halting...");
    1ea0:	89 e0       	ldi	r24, 0x09	; 9
    1ea2:	91 e0       	ldi	r25, 0x01	; 1
    1ea4:	0e 94 b9 04 	call	0x972	; 0x972 <LCDPrint>
		while (1);
    1ea8:	ff cf       	rjmp	.-2      	; 0x1ea8 <main+0x2c8>
			msgReceived = 0;
			/***********************************************************************/

			ringReceived = 0;
		}
	}
    1eaa:	00 00       	nop
	/*******************************************************************/

	whatIsGoingOn = NOTHING;
	bufferCount = 0;
	while (1){
		if (okComplete == 1){
    1eac:	80 91 f8 02 	lds	r24, 0x02F8
    1eb0:	81 30       	cpi	r24, 0x01	; 1
    1eb2:	09 f0       	breq	.+2      	; 0x1eb6 <main+0x2d6>
    1eb4:	06 c1       	rjmp	.+524    	; 0x20c2 <main+0x4e2>
			//OK received
			LCDClear();
    1eb6:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCDClear>
			if (whatIsGoingOn == NOTHING){
    1eba:	80 91 ff 03 	lds	r24, 0x03FF
    1ebe:	88 23       	and	r24, r24
    1ec0:	41 f4       	brne	.+16     	; 0x1ed2 <main+0x2f2>
				LCDPrintLines("Welcome to", "Vending Machine");
    1ec2:	8b e1       	ldi	r24, 0x1B	; 27
    1ec4:	91 e0       	ldi	r25, 0x01	; 1
    1ec6:	26 e2       	ldi	r18, 0x26	; 38
    1ec8:	31 e0       	ldi	r19, 0x01	; 1
    1eca:	b9 01       	movw	r22, r18
    1ecc:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <LCDPrintLines>
    1ed0:	53 c0       	rjmp	.+166    	; 0x1f78 <main+0x398>
			} else if (whatIsGoingOn == MESSAGE_SEND_SUCCESSFULLY){
    1ed2:	80 91 ff 03 	lds	r24, 0x03FF
    1ed6:	81 30       	cpi	r24, 0x01	; 1
    1ed8:	41 f4       	brne	.+16     	; 0x1eea <main+0x30a>
				LCDPrintLines("Product Dropped", "Thank You");
    1eda:	86 e3       	ldi	r24, 0x36	; 54
    1edc:	91 e0       	ldi	r25, 0x01	; 1
    1ede:	26 e4       	ldi	r18, 0x46	; 70
    1ee0:	31 e0       	ldi	r19, 0x01	; 1
    1ee2:	b9 01       	movw	r22, r18
    1ee4:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <LCDPrintLines>
    1ee8:	47 c0       	rjmp	.+142    	; 0x1f78 <main+0x398>
			} else if (whatIsGoingOn == ERRORV){
    1eea:	80 91 ff 03 	lds	r24, 0x03FF
    1eee:	8a 30       	cpi	r24, 0x0A	; 10
    1ef0:	41 f4       	brne	.+16     	; 0x1f02 <main+0x322>
				LCDPrintLines ("Last Message:", "vmCode invalid");
    1ef2:	80 e5       	ldi	r24, 0x50	; 80
    1ef4:	91 e0       	ldi	r25, 0x01	; 1
    1ef6:	2e e5       	ldi	r18, 0x5E	; 94
    1ef8:	31 e0       	ldi	r19, 0x01	; 1
    1efa:	b9 01       	movw	r22, r18
    1efc:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <LCDPrintLines>
    1f00:	3b c0       	rjmp	.+118    	; 0x1f78 <main+0x398>
			} else if (whatIsGoingOn == ERRORP){
    1f02:	80 91 ff 03 	lds	r24, 0x03FF
    1f06:	86 30       	cpi	r24, 0x06	; 6
    1f08:	41 f4       	brne	.+16     	; 0x1f1a <main+0x33a>
				LCDPrintLines ("Last Message:", "itemCode invalid");
    1f0a:	80 e5       	ldi	r24, 0x50	; 80
    1f0c:	91 e0       	ldi	r25, 0x01	; 1
    1f0e:	2d e6       	ldi	r18, 0x6D	; 109
    1f10:	31 e0       	ldi	r19, 0x01	; 1
    1f12:	b9 01       	movw	r22, r18
    1f14:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <LCDPrintLines>
    1f18:	2f c0       	rjmp	.+94     	; 0x1f78 <main+0x398>
			} else if (whatIsGoingOn == ERRORR){
    1f1a:	80 91 ff 03 	lds	r24, 0x03FF
    1f1e:	87 30       	cpi	r24, 0x07	; 7
    1f20:	41 f4       	brne	.+16     	; 0x1f32 <main+0x352>
				LCDPrintLines ("Last Message:", "5 Retries Error");
    1f22:	80 e5       	ldi	r24, 0x50	; 80
    1f24:	91 e0       	ldi	r25, 0x01	; 1
    1f26:	2e e7       	ldi	r18, 0x7E	; 126
    1f28:	31 e0       	ldi	r19, 0x01	; 1
    1f2a:	b9 01       	movw	r22, r18
    1f2c:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <LCDPrintLines>
    1f30:	23 c0       	rjmp	.+70     	; 0x1f78 <main+0x398>
			} else if (whatIsGoingOn == ERRORO){
    1f32:	80 91 ff 03 	lds	r24, 0x03FF
    1f36:	88 30       	cpi	r24, 0x08	; 8
    1f38:	41 f4       	brne	.+16     	; 0x1f4a <main+0x36a>
				LCDPrintLines ("Last Message:", "Overfall");
    1f3a:	80 e5       	ldi	r24, 0x50	; 80
    1f3c:	91 e0       	ldi	r25, 0x01	; 1
    1f3e:	2e e8       	ldi	r18, 0x8E	; 142
    1f40:	31 e0       	ldi	r19, 0x01	; 1
    1f42:	b9 01       	movw	r22, r18
    1f44:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <LCDPrintLines>
    1f48:	17 c0       	rjmp	.+46     	; 0x1f78 <main+0x398>
			} else if (whatIsGoingOn == ERRORA){
    1f4a:	80 91 ff 03 	lds	r24, 0x03FF
    1f4e:	89 30       	cpi	r24, 0x09	; 9
    1f50:	41 f4       	brne	.+16     	; 0x1f62 <main+0x382>
				LCDPrintLines ("Last Message:", "unavail. product");
    1f52:	80 e5       	ldi	r24, 0x50	; 80
    1f54:	91 e0       	ldi	r25, 0x01	; 1
    1f56:	27 e9       	ldi	r18, 0x97	; 151
    1f58:	31 e0       	ldi	r19, 0x01	; 1
    1f5a:	b9 01       	movw	r22, r18
    1f5c:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <LCDPrintLines>
    1f60:	0b c0       	rjmp	.+22     	; 0x1f78 <main+0x398>
			} else if (whatIsGoingOn == ERRORPA){
    1f62:	80 91 ff 03 	lds	r24, 0x03FF
    1f66:	84 30       	cpi	r24, 0x04	; 4
    1f68:	39 f4       	brne	.+14     	; 0x1f78 <main+0x398>
				LCDPrintLines ("Last Message:", "und. pinCode len");
    1f6a:	80 e5       	ldi	r24, 0x50	; 80
    1f6c:	91 e0       	ldi	r25, 0x01	; 1
    1f6e:	28 ea       	ldi	r18, 0xA8	; 168
    1f70:	31 e0       	ldi	r19, 0x01	; 1
    1f72:	b9 01       	movw	r22, r18
    1f74:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <LCDPrintLines>
    1f78:	80 e0       	ldi	r24, 0x00	; 0
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	aa e7       	ldi	r26, 0x7A	; 122
    1f7e:	b4 e4       	ldi	r27, 0x44	; 68
    1f80:	8e ab       	std	Y+54, r24	; 0x36
    1f82:	9f ab       	std	Y+55, r25	; 0x37
    1f84:	a8 af       	std	Y+56, r26	; 0x38
    1f86:	b9 af       	std	Y+57, r27	; 0x39
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1f88:	6e a9       	ldd	r22, Y+54	; 0x36
    1f8a:	7f a9       	ldd	r23, Y+55	; 0x37
    1f8c:	88 ad       	ldd	r24, Y+56	; 0x38
    1f8e:	99 ad       	ldd	r25, Y+57	; 0x39
    1f90:	20 e0       	ldi	r18, 0x00	; 0
    1f92:	30 e8       	ldi	r19, 0x80	; 128
    1f94:	4b e3       	ldi	r20, 0x3B	; 59
    1f96:	55 e4       	ldi	r21, 0x45	; 69
    1f98:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <__mulsf3>
    1f9c:	dc 01       	movw	r26, r24
    1f9e:	cb 01       	movw	r24, r22
    1fa0:	8a af       	std	Y+58, r24	; 0x3a
    1fa2:	9b af       	std	Y+59, r25	; 0x3b
    1fa4:	ac af       	std	Y+60, r26	; 0x3c
    1fa6:	bd af       	std	Y+61, r27	; 0x3d
	if (__tmp < 1.0)
    1fa8:	11 e0       	ldi	r17, 0x01	; 1
    1faa:	6a ad       	ldd	r22, Y+58	; 0x3a
    1fac:	7b ad       	ldd	r23, Y+59	; 0x3b
    1fae:	8c ad       	ldd	r24, Y+60	; 0x3c
    1fb0:	9d ad       	ldd	r25, Y+61	; 0x3d
    1fb2:	20 e0       	ldi	r18, 0x00	; 0
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	40 e8       	ldi	r20, 0x80	; 128
    1fb8:	5f e3       	ldi	r21, 0x3F	; 63
    1fba:	0e 94 ae 1c 	call	0x395c	; 0x395c <__ltsf2>
    1fbe:	88 23       	and	r24, r24
    1fc0:	0c f0       	brlt	.+2      	; 0x1fc4 <main+0x3e4>
    1fc2:	10 e0       	ldi	r17, 0x00	; 0
    1fc4:	11 23       	and	r17, r17
    1fc6:	29 f0       	breq	.+10     	; 0x1fd2 <main+0x3f2>
		__ticks = 1;
    1fc8:	81 e0       	ldi	r24, 0x01	; 1
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	9f af       	std	Y+63, r25	; 0x3f
    1fce:	8e af       	std	Y+62, r24	; 0x3e
    1fd0:	52 c0       	rjmp	.+164    	; 0x2076 <main+0x496>
	else if (__tmp > 65535)
    1fd2:	11 e0       	ldi	r17, 0x01	; 1
    1fd4:	6a ad       	ldd	r22, Y+58	; 0x3a
    1fd6:	7b ad       	ldd	r23, Y+59	; 0x3b
    1fd8:	8c ad       	ldd	r24, Y+60	; 0x3c
    1fda:	9d ad       	ldd	r25, Y+61	; 0x3d
    1fdc:	20 e0       	ldi	r18, 0x00	; 0
    1fde:	3f ef       	ldi	r19, 0xFF	; 255
    1fe0:	4f e7       	ldi	r20, 0x7F	; 127
    1fe2:	57 e4       	ldi	r21, 0x47	; 71
    1fe4:	0e 94 4e 1c 	call	0x389c	; 0x389c <__gtsf2>
    1fe8:	18 16       	cp	r1, r24
    1fea:	0c f0       	brlt	.+2      	; 0x1fee <main+0x40e>
    1fec:	10 e0       	ldi	r17, 0x00	; 0
    1fee:	11 23       	and	r17, r17
    1ff0:	c1 f1       	breq	.+112    	; 0x2062 <main+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ff2:	6e a9       	ldd	r22, Y+54	; 0x36
    1ff4:	7f a9       	ldd	r23, Y+55	; 0x37
    1ff6:	88 ad       	ldd	r24, Y+56	; 0x38
    1ff8:	99 ad       	ldd	r25, Y+57	; 0x39
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	40 e2       	ldi	r20, 0x20	; 32
    2000:	51 e4       	ldi	r21, 0x41	; 65
    2002:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <__mulsf3>
    2006:	dc 01       	movw	r26, r24
    2008:	cb 01       	movw	r24, r22
    200a:	bc 01       	movw	r22, r24
    200c:	cd 01       	movw	r24, r26
    200e:	0e 94 80 19 	call	0x3300	; 0x3300 <__fixunssfsi>
    2012:	dc 01       	movw	r26, r24
    2014:	cb 01       	movw	r24, r22
    2016:	9f af       	std	Y+63, r25	; 0x3f
    2018:	8e af       	std	Y+62, r24	; 0x3e
    201a:	1e c0       	rjmp	.+60     	; 0x2058 <main+0x478>
    201c:	ce 01       	movw	r24, r28
    201e:	80 5c       	subi	r24, 0xC0	; 192
    2020:	9f 4f       	sbci	r25, 0xFF	; 255
    2022:	2c e2       	ldi	r18, 0x2C	; 44
    2024:	31 e0       	ldi	r19, 0x01	; 1
    2026:	fc 01       	movw	r30, r24
    2028:	31 83       	std	Z+1, r19	; 0x01
    202a:	20 83       	st	Z, r18
    202c:	ce 01       	movw	r24, r28
    202e:	80 5c       	subi	r24, 0xC0	; 192
    2030:	9f 4f       	sbci	r25, 0xFF	; 255
    2032:	fc 01       	movw	r30, r24
    2034:	80 81       	ld	r24, Z
    2036:	91 81       	ldd	r25, Z+1	; 0x01
    2038:	8c 01       	movw	r16, r24
    203a:	c8 01       	movw	r24, r16
    203c:	01 97       	sbiw	r24, 0x01	; 1
    203e:	f1 f7       	brne	.-4      	; 0x203c <main+0x45c>
    2040:	8c 01       	movw	r16, r24
    2042:	ce 01       	movw	r24, r28
    2044:	80 5c       	subi	r24, 0xC0	; 192
    2046:	9f 4f       	sbci	r25, 0xFF	; 255
    2048:	fc 01       	movw	r30, r24
    204a:	11 83       	std	Z+1, r17	; 0x01
    204c:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    204e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2050:	9f ad       	ldd	r25, Y+63	; 0x3f
    2052:	01 97       	sbiw	r24, 0x01	; 1
    2054:	9f af       	std	Y+63, r25	; 0x3f
    2056:	8e af       	std	Y+62, r24	; 0x3e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2058:	8e ad       	ldd	r24, Y+62	; 0x3e
    205a:	9f ad       	ldd	r25, Y+63	; 0x3f
    205c:	00 97       	sbiw	r24, 0x00	; 0
    205e:	f1 f6       	brne	.-68     	; 0x201c <main+0x43c>
    2060:	23 c0       	rjmp	.+70     	; 0x20a8 <main+0x4c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2062:	6a ad       	ldd	r22, Y+58	; 0x3a
    2064:	7b ad       	ldd	r23, Y+59	; 0x3b
    2066:	8c ad       	ldd	r24, Y+60	; 0x3c
    2068:	9d ad       	ldd	r25, Y+61	; 0x3d
    206a:	0e 94 80 19 	call	0x3300	; 0x3300 <__fixunssfsi>
    206e:	dc 01       	movw	r26, r24
    2070:	cb 01       	movw	r24, r22
    2072:	9f af       	std	Y+63, r25	; 0x3f
    2074:	8e af       	std	Y+62, r24	; 0x3e
    2076:	ce 01       	movw	r24, r28
    2078:	8e 5b       	subi	r24, 0xBE	; 190
    207a:	9f 4f       	sbci	r25, 0xFF	; 255
    207c:	2e ad       	ldd	r18, Y+62	; 0x3e
    207e:	3f ad       	ldd	r19, Y+63	; 0x3f
    2080:	fc 01       	movw	r30, r24
    2082:	31 83       	std	Z+1, r19	; 0x01
    2084:	20 83       	st	Z, r18
    2086:	ce 01       	movw	r24, r28
    2088:	8e 5b       	subi	r24, 0xBE	; 190
    208a:	9f 4f       	sbci	r25, 0xFF	; 255
    208c:	fc 01       	movw	r30, r24
    208e:	80 81       	ld	r24, Z
    2090:	91 81       	ldd	r25, Z+1	; 0x01
    2092:	8c 01       	movw	r16, r24
    2094:	c8 01       	movw	r24, r16
    2096:	01 97       	sbiw	r24, 0x01	; 1
    2098:	f1 f7       	brne	.-4      	; 0x2096 <main+0x4b6>
    209a:	8c 01       	movw	r16, r24
    209c:	ce 01       	movw	r24, r28
    209e:	8e 5b       	subi	r24, 0xBE	; 190
    20a0:	9f 4f       	sbci	r25, 0xFF	; 255
    20a2:	fc 01       	movw	r30, r24
    20a4:	11 83       	std	Z+1, r17	; 0x01
    20a6:	00 83       	st	Z, r16
			}
			_delay_ms(1000);
			if (whatIsGoingOn != NOTHING){
    20a8:	80 91 ff 03 	lds	r24, 0x03FF
    20ac:	88 23       	and	r24, r24
    20ae:	31 f0       	breq	.+12     	; 0x20bc <main+0x4dc>
				whatIsGoingOn = NOTHING;
    20b0:	10 92 ff 03 	sts	0x03FF, r1
				okComplete = 1;
    20b4:	81 e0       	ldi	r24, 0x01	; 1
    20b6:	80 93 f8 02 	sts	0x02F8, r24
			msgReceived = 0;
			/***********************************************************************/

			ringReceived = 0;
		}
	}
    20ba:	f8 ce       	rjmp	.-528    	; 0x1eac <main+0x2cc>
			_delay_ms(1000);
			if (whatIsGoingOn != NOTHING){
				whatIsGoingOn = NOTHING;
				okComplete = 1;
			} else {
				okComplete = 0;
    20bc:	10 92 f8 02 	sts	0x02F8, r1
			msgReceived = 0;
			/***********************************************************************/

			ringReceived = 0;
		}
	}
    20c0:	f5 ce       	rjmp	.-534    	; 0x1eac <main+0x2cc>
				whatIsGoingOn = NOTHING;
				okComplete = 1;
			} else {
				okComplete = 0;
			}
		} else if (okComplete == 2){
    20c2:	80 91 f8 02 	lds	r24, 0x02F8
    20c6:	82 30       	cpi	r24, 0x02	; 2
    20c8:	49 f4       	brne	.+18     	; 0x20dc <main+0x4fc>
			//ERROR Received
			LCDClear();
    20ca:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCDClear>
			LCDPrint ("Error Received");
    20ce:	89 eb       	ldi	r24, 0xB9	; 185
    20d0:	91 e0       	ldi	r25, 0x01	; 1
    20d2:	0e 94 b9 04 	call	0x972	; 0x972 <LCDPrint>
			okComplete = 0;
    20d6:	10 92 f8 02 	sts	0x02F8, r1
			msgReceived = 0;
			/***********************************************************************/

			ringReceived = 0;
		}
	}
    20da:	e8 ce       	rjmp	.-560    	; 0x1eac <main+0x2cc>
		} else if (okComplete == 2){
			//ERROR Received
			LCDClear();
			LCDPrint ("Error Received");
			okComplete = 0;
		}else if (msgReceived == 1){
    20dc:	80 91 fa 03 	lds	r24, 0x03FA
    20e0:	81 30       	cpi	r24, 0x01	; 1
    20e2:	09 f0       	breq	.+2      	; 0x20e6 <main+0x506>
    20e4:	cb c4       	rjmp	.+2454   	; 0x2a7c <main+0xe9c>
			//=CMTI Received
			LCDClear();
    20e6:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCDClear>
			LCDPrint ("msg rec @: ");
    20ea:	88 ec       	ldi	r24, 0xC8	; 200
    20ec:	91 e0       	ldi	r25, 0x01	; 1
    20ee:	0e 94 b9 04 	call	0x972	; 0x972 <LCDPrint>

			if (msgNumber1 == 255){
    20f2:	80 91 61 00 	lds	r24, 0x0061
    20f6:	8f 3f       	cpi	r24, 0xFF	; 255
    20f8:	29 f4       	brne	.+10     	; 0x2104 <main+0x524>
				LCDData ((char)msgNumber);
    20fa:	80 91 60 00 	lds	r24, 0x0060
    20fe:	0e 94 92 03 	call	0x724	; 0x724 <LCDData>
    2102:	08 c0       	rjmp	.+16     	; 0x2114 <main+0x534>
			} else {
				LCDData ((char)msgNumber);
    2104:	80 91 60 00 	lds	r24, 0x0060
    2108:	0e 94 92 03 	call	0x724	; 0x724 <LCDData>
				LCDData ((char)msgNumber1);
    210c:	80 91 61 00 	lds	r24, 0x0061
    2110:	0e 94 92 03 	call	0x724	; 0x724 <LCDData>
			/******** read message and process on it **************/

			//@1 set EEPROM
			//@1 (set EEPROM) complete

			okComplete = 0;
    2114:	10 92 f8 02 	sts	0x02F8, r1
			/************** try 5 times to read SMS ***************/
			char repeatCounter = 2;
    2118:	82 e0       	ldi	r24, 0x02	; 2
    211a:	89 83       	std	Y+1, r24	; 0x01
			while (repeatCounter <= 5){
    211c:	fa c0       	rjmp	.+500    	; 0x2312 <main+0x732>

				if (msgNumber1 == 255){
    211e:	80 91 61 00 	lds	r24, 0x0061
    2122:	8f 3f       	cpi	r24, 0xFF	; 255
    2124:	41 f4       	brne	.+16     	; 0x2136 <main+0x556>
					sendATCommand1("at+cmgr=", msgNumber);
    2126:	20 91 60 00 	lds	r18, 0x0060
    212a:	84 ed       	ldi	r24, 0xD4	; 212
    212c:	91 e0       	ldi	r25, 0x01	; 1
    212e:	62 2f       	mov	r22, r18
    2130:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <sendATCommand1>
				} else {
					sendATCommand2("at+cmgr=", msgNumber, msgNumber1);
				}

				while ((okComplete == 0)){
    2134:	dd c0       	rjmp	.+442    	; 0x22f0 <main+0x710>
			while (repeatCounter <= 5){

				if (msgNumber1 == 255){
					sendATCommand1("at+cmgr=", msgNumber);
				} else {
					sendATCommand2("at+cmgr=", msgNumber, msgNumber1);
    2136:	30 91 60 00 	lds	r19, 0x0060
    213a:	20 91 61 00 	lds	r18, 0x0061
    213e:	84 ed       	ldi	r24, 0xD4	; 212
    2140:	91 e0       	ldi	r25, 0x01	; 1
    2142:	63 2f       	mov	r22, r19
    2144:	42 2f       	mov	r20, r18
    2146:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <sendATCommand2>
				}

				while ((okComplete == 0)){
    214a:	d2 c0       	rjmp	.+420    	; 0x22f0 <main+0x710>
    214c:	9e 01       	movw	r18, r28
    214e:	2c 5b       	subi	r18, 0xBC	; 188
    2150:	3f 4f       	sbci	r19, 0xFF	; 255
    2152:	80 e0       	ldi	r24, 0x00	; 0
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	a8 e4       	ldi	r26, 0x48	; 72
    2158:	b3 e4       	ldi	r27, 0x43	; 67
    215a:	f9 01       	movw	r30, r18
    215c:	80 83       	st	Z, r24
    215e:	91 83       	std	Z+1, r25	; 0x01
    2160:	a2 83       	std	Z+2, r26	; 0x02
    2162:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    2164:	8e 01       	movw	r16, r28
    2166:	08 5b       	subi	r16, 0xB8	; 184
    2168:	1f 4f       	sbci	r17, 0xFF	; 255
    216a:	ce 01       	movw	r24, r28
    216c:	8c 5b       	subi	r24, 0xBC	; 188
    216e:	9f 4f       	sbci	r25, 0xFF	; 255
    2170:	fc 01       	movw	r30, r24
    2172:	60 81       	ld	r22, Z
    2174:	71 81       	ldd	r23, Z+1	; 0x01
    2176:	82 81       	ldd	r24, Z+2	; 0x02
    2178:	93 81       	ldd	r25, Z+3	; 0x03
    217a:	20 e0       	ldi	r18, 0x00	; 0
    217c:	30 e8       	ldi	r19, 0x80	; 128
    217e:	4b e3       	ldi	r20, 0x3B	; 59
    2180:	55 e4       	ldi	r21, 0x45	; 69
    2182:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <__mulsf3>
    2186:	dc 01       	movw	r26, r24
    2188:	cb 01       	movw	r24, r22
    218a:	f8 01       	movw	r30, r16
    218c:	80 83       	st	Z, r24
    218e:	91 83       	std	Z+1, r25	; 0x01
    2190:	a2 83       	std	Z+2, r26	; 0x02
    2192:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2194:	ce 01       	movw	r24, r28
    2196:	88 5b       	subi	r24, 0xB8	; 184
    2198:	9f 4f       	sbci	r25, 0xFF	; 255
    219a:	11 e0       	ldi	r17, 0x01	; 1
    219c:	fc 01       	movw	r30, r24
    219e:	60 81       	ld	r22, Z
    21a0:	71 81       	ldd	r23, Z+1	; 0x01
    21a2:	82 81       	ldd	r24, Z+2	; 0x02
    21a4:	93 81       	ldd	r25, Z+3	; 0x03
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	40 e8       	ldi	r20, 0x80	; 128
    21ac:	5f e3       	ldi	r21, 0x3F	; 63
    21ae:	0e 94 ae 1c 	call	0x395c	; 0x395c <__ltsf2>
    21b2:	88 23       	and	r24, r24
    21b4:	0c f0       	brlt	.+2      	; 0x21b8 <main+0x5d8>
    21b6:	10 e0       	ldi	r17, 0x00	; 0
    21b8:	11 23       	and	r17, r17
    21ba:	49 f0       	breq	.+18     	; 0x21ce <main+0x5ee>
		__ticks = 1;
    21bc:	ce 01       	movw	r24, r28
    21be:	84 5b       	subi	r24, 0xB4	; 180
    21c0:	9f 4f       	sbci	r25, 0xFF	; 255
    21c2:	21 e0       	ldi	r18, 0x01	; 1
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	fc 01       	movw	r30, r24
    21c8:	31 83       	std	Z+1, r19	; 0x01
    21ca:	20 83       	st	Z, r18
    21cc:	74 c0       	rjmp	.+232    	; 0x22b6 <main+0x6d6>
	else if (__tmp > 65535)
    21ce:	ce 01       	movw	r24, r28
    21d0:	88 5b       	subi	r24, 0xB8	; 184
    21d2:	9f 4f       	sbci	r25, 0xFF	; 255
    21d4:	11 e0       	ldi	r17, 0x01	; 1
    21d6:	fc 01       	movw	r30, r24
    21d8:	60 81       	ld	r22, Z
    21da:	71 81       	ldd	r23, Z+1	; 0x01
    21dc:	82 81       	ldd	r24, Z+2	; 0x02
    21de:	93 81       	ldd	r25, Z+3	; 0x03
    21e0:	20 e0       	ldi	r18, 0x00	; 0
    21e2:	3f ef       	ldi	r19, 0xFF	; 255
    21e4:	4f e7       	ldi	r20, 0x7F	; 127
    21e6:	57 e4       	ldi	r21, 0x47	; 71
    21e8:	0e 94 4e 1c 	call	0x389c	; 0x389c <__gtsf2>
    21ec:	18 16       	cp	r1, r24
    21ee:	0c f0       	brlt	.+2      	; 0x21f2 <main+0x612>
    21f0:	10 e0       	ldi	r17, 0x00	; 0
    21f2:	11 23       	and	r17, r17
    21f4:	09 f4       	brne	.+2      	; 0x21f8 <main+0x618>
    21f6:	4d c0       	rjmp	.+154    	; 0x2292 <main+0x6b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21f8:	ce 01       	movw	r24, r28
    21fa:	8c 5b       	subi	r24, 0xBC	; 188
    21fc:	9f 4f       	sbci	r25, 0xFF	; 255
    21fe:	fc 01       	movw	r30, r24
    2200:	60 81       	ld	r22, Z
    2202:	71 81       	ldd	r23, Z+1	; 0x01
    2204:	82 81       	ldd	r24, Z+2	; 0x02
    2206:	93 81       	ldd	r25, Z+3	; 0x03
    2208:	20 e0       	ldi	r18, 0x00	; 0
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	40 e2       	ldi	r20, 0x20	; 32
    220e:	51 e4       	ldi	r21, 0x41	; 65
    2210:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <__mulsf3>
    2214:	dc 01       	movw	r26, r24
    2216:	cb 01       	movw	r24, r22
    2218:	8e 01       	movw	r16, r28
    221a:	04 5b       	subi	r16, 0xB4	; 180
    221c:	1f 4f       	sbci	r17, 0xFF	; 255
    221e:	bc 01       	movw	r22, r24
    2220:	cd 01       	movw	r24, r26
    2222:	0e 94 80 19 	call	0x3300	; 0x3300 <__fixunssfsi>
    2226:	dc 01       	movw	r26, r24
    2228:	cb 01       	movw	r24, r22
    222a:	f8 01       	movw	r30, r16
    222c:	91 83       	std	Z+1, r25	; 0x01
    222e:	80 83       	st	Z, r24
    2230:	27 c0       	rjmp	.+78     	; 0x2280 <main+0x6a0>
    2232:	ce 01       	movw	r24, r28
    2234:	82 5b       	subi	r24, 0xB2	; 178
    2236:	9f 4f       	sbci	r25, 0xFF	; 255
    2238:	2c e2       	ldi	r18, 0x2C	; 44
    223a:	31 e0       	ldi	r19, 0x01	; 1
    223c:	fc 01       	movw	r30, r24
    223e:	31 83       	std	Z+1, r19	; 0x01
    2240:	20 83       	st	Z, r18
    2242:	ce 01       	movw	r24, r28
    2244:	82 5b       	subi	r24, 0xB2	; 178
    2246:	9f 4f       	sbci	r25, 0xFF	; 255
    2248:	fc 01       	movw	r30, r24
    224a:	80 81       	ld	r24, Z
    224c:	91 81       	ldd	r25, Z+1	; 0x01
    224e:	8c 01       	movw	r16, r24
    2250:	c8 01       	movw	r24, r16
    2252:	01 97       	sbiw	r24, 0x01	; 1
    2254:	f1 f7       	brne	.-4      	; 0x2252 <main+0x672>
    2256:	8c 01       	movw	r16, r24
    2258:	ce 01       	movw	r24, r28
    225a:	82 5b       	subi	r24, 0xB2	; 178
    225c:	9f 4f       	sbci	r25, 0xFF	; 255
    225e:	fc 01       	movw	r30, r24
    2260:	11 83       	std	Z+1, r17	; 0x01
    2262:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2264:	ce 01       	movw	r24, r28
    2266:	84 5b       	subi	r24, 0xB4	; 180
    2268:	9f 4f       	sbci	r25, 0xFF	; 255
    226a:	9e 01       	movw	r18, r28
    226c:	24 5b       	subi	r18, 0xB4	; 180
    226e:	3f 4f       	sbci	r19, 0xFF	; 255
    2270:	f9 01       	movw	r30, r18
    2272:	20 81       	ld	r18, Z
    2274:	31 81       	ldd	r19, Z+1	; 0x01
    2276:	21 50       	subi	r18, 0x01	; 1
    2278:	30 40       	sbci	r19, 0x00	; 0
    227a:	fc 01       	movw	r30, r24
    227c:	31 83       	std	Z+1, r19	; 0x01
    227e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2280:	ce 01       	movw	r24, r28
    2282:	84 5b       	subi	r24, 0xB4	; 180
    2284:	9f 4f       	sbci	r25, 0xFF	; 255
    2286:	fc 01       	movw	r30, r24
    2288:	80 81       	ld	r24, Z
    228a:	91 81       	ldd	r25, Z+1	; 0x01
    228c:	00 97       	sbiw	r24, 0x00	; 0
    228e:	89 f6       	brne	.-94     	; 0x2232 <main+0x652>
    2290:	2f c0       	rjmp	.+94     	; 0x22f0 <main+0x710>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2292:	8e 01       	movw	r16, r28
    2294:	04 5b       	subi	r16, 0xB4	; 180
    2296:	1f 4f       	sbci	r17, 0xFF	; 255
    2298:	ce 01       	movw	r24, r28
    229a:	88 5b       	subi	r24, 0xB8	; 184
    229c:	9f 4f       	sbci	r25, 0xFF	; 255
    229e:	fc 01       	movw	r30, r24
    22a0:	60 81       	ld	r22, Z
    22a2:	71 81       	ldd	r23, Z+1	; 0x01
    22a4:	82 81       	ldd	r24, Z+2	; 0x02
    22a6:	93 81       	ldd	r25, Z+3	; 0x03
    22a8:	0e 94 80 19 	call	0x3300	; 0x3300 <__fixunssfsi>
    22ac:	dc 01       	movw	r26, r24
    22ae:	cb 01       	movw	r24, r22
    22b0:	f8 01       	movw	r30, r16
    22b2:	91 83       	std	Z+1, r25	; 0x01
    22b4:	80 83       	st	Z, r24
    22b6:	ce 01       	movw	r24, r28
    22b8:	80 5b       	subi	r24, 0xB0	; 176
    22ba:	9f 4f       	sbci	r25, 0xFF	; 255
    22bc:	9e 01       	movw	r18, r28
    22be:	24 5b       	subi	r18, 0xB4	; 180
    22c0:	3f 4f       	sbci	r19, 0xFF	; 255
    22c2:	f9 01       	movw	r30, r18
    22c4:	20 81       	ld	r18, Z
    22c6:	31 81       	ldd	r19, Z+1	; 0x01
    22c8:	fc 01       	movw	r30, r24
    22ca:	31 83       	std	Z+1, r19	; 0x01
    22cc:	20 83       	st	Z, r18
    22ce:	ce 01       	movw	r24, r28
    22d0:	80 5b       	subi	r24, 0xB0	; 176
    22d2:	9f 4f       	sbci	r25, 0xFF	; 255
    22d4:	fc 01       	movw	r30, r24
    22d6:	80 81       	ld	r24, Z
    22d8:	91 81       	ldd	r25, Z+1	; 0x01
    22da:	8c 01       	movw	r16, r24
    22dc:	c8 01       	movw	r24, r16
    22de:	01 97       	sbiw	r24, 0x01	; 1
    22e0:	f1 f7       	brne	.-4      	; 0x22de <main+0x6fe>
    22e2:	8c 01       	movw	r16, r24
    22e4:	ce 01       	movw	r24, r28
    22e6:	80 5b       	subi	r24, 0xB0	; 176
    22e8:	9f 4f       	sbci	r25, 0xFF	; 255
    22ea:	fc 01       	movw	r30, r24
    22ec:	11 83       	std	Z+1, r17	; 0x01
    22ee:	00 83       	st	Z, r16
    22f0:	80 91 f8 02 	lds	r24, 0x02F8
    22f4:	88 23       	and	r24, r24
    22f6:	09 f4       	brne	.+2      	; 0x22fa <main+0x71a>
    22f8:	29 cf       	rjmp	.-430    	; 0x214c <main+0x56c>
					_delay_ms(200);
				}

				repeatCounter ++;
    22fa:	89 81       	ldd	r24, Y+1	; 0x01
    22fc:	8f 5f       	subi	r24, 0xFF	; 255
    22fe:	89 83       	std	Y+1, r24	; 0x01
				if (okComplete == 1 || repeatCounter > 5){
    2300:	80 91 f8 02 	lds	r24, 0x02F8
    2304:	81 30       	cpi	r24, 0x01	; 1
    2306:	49 f0       	breq	.+18     	; 0x231a <main+0x73a>
    2308:	89 81       	ldd	r24, Y+1	; 0x01
    230a:	86 30       	cpi	r24, 0x06	; 6
    230c:	30 f4       	brcc	.+12     	; 0x231a <main+0x73a>
					break;
				} else {
					okComplete = 0;
    230e:	10 92 f8 02 	sts	0x02F8, r1
			//@1 (set EEPROM) complete

			okComplete = 0;
			/************** try 5 times to read SMS ***************/
			char repeatCounter = 2;
			while (repeatCounter <= 5){
    2312:	89 81       	ldd	r24, Y+1	; 0x01
    2314:	86 30       	cpi	r24, 0x06	; 6
    2316:	08 f4       	brcc	.+2      	; 0x231a <main+0x73a>
    2318:	02 cf       	rjmp	.-508    	; 0x211e <main+0x53e>
					okComplete = 0;
				}
			}
			/******************************************************/

			if (okComplete == 1){
    231a:	80 91 f8 02 	lds	r24, 0x02F8
    231e:	81 30       	cpi	r24, 0x01	; 1
    2320:	09 f0       	breq	.+2      	; 0x2324 <main+0x744>
    2322:	a3 c2       	rjmp	.+1350   	; 0x286a <main+0xc8a>
				/*********** AT+CMGR value received in buffer *********/

				/*********** check for user number ********************/
				if (authCheck){
    2324:	80 91 00 04 	lds	r24, 0x0400
    2328:	88 23       	and	r24, r24
    232a:	09 f4       	brne	.+2      	; 0x232e <main+0x74e>
    232c:	4e c0       	rjmp	.+156    	; 0x23ca <main+0x7ea>
				userNo = split((char *) buffer, "\"", &userNoCounter);
    232e:	8b ef       	ldi	r24, 0xFB	; 251
    2330:	92 e0       	ldi	r25, 0x02	; 2
    2332:	4d ed       	ldi	r20, 0xDD	; 221
    2334:	51 e0       	ldi	r21, 0x01	; 1
    2336:	9e 01       	movw	r18, r28
    2338:	26 56       	subi	r18, 0x66	; 102
    233a:	3f 4f       	sbci	r19, 0xFF	; 255
    233c:	ba 01       	movw	r22, r20
    233e:	a9 01       	movw	r20, r18
    2340:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <split>
    2344:	9f 83       	std	Y+7, r25	; 0x07
    2346:	8e 83       	std	Y+6, r24	; 0x06
				if (equals(userNo[3], AUTH_PHONENO) == 0){
    2348:	8e 81       	ldd	r24, Y+6	; 0x06
    234a:	9f 81       	ldd	r25, Y+7	; 0x07
    234c:	06 96       	adiw	r24, 0x06	; 6
    234e:	fc 01       	movw	r30, r24
    2350:	80 81       	ld	r24, Z
    2352:	91 81       	ldd	r25, Z+1	; 0x01
    2354:	20 91 72 00 	lds	r18, 0x0072
    2358:	30 91 73 00 	lds	r19, 0x0073
    235c:	b9 01       	movw	r22, r18
    235e:	0e 94 94 09 	call	0x1328	; 0x1328 <equals>
    2362:	88 23       	and	r24, r24
    2364:	39 f5       	brne	.+78     	; 0x23b4 <main+0x7d4>
					freeSplitedString(userNo, userNoCounter);
    2366:	ce 01       	movw	r24, r28
    2368:	86 56       	subi	r24, 0x66	; 102
    236a:	9f 4f       	sbci	r25, 0xFF	; 255
    236c:	fc 01       	movw	r30, r24
    236e:	20 81       	ld	r18, Z
    2370:	31 81       	ldd	r19, Z+1	; 0x01
    2372:	8e 81       	ldd	r24, Y+6	; 0x06
    2374:	9f 81       	ldd	r25, Y+7	; 0x07
    2376:	b9 01       	movw	r22, r18
    2378:	0e 94 04 0b 	call	0x1608	; 0x1608 <freeSplitedString>
					sendMessage1 (phoneNo, "Unknown number detected: ", userNo[3], 2);
    237c:	80 91 83 00 	lds	r24, 0x0083
    2380:	90 91 84 00 	lds	r25, 0x0084
    2384:	2e 81       	ldd	r18, Y+6	; 0x06
    2386:	3f 81       	ldd	r19, Y+7	; 0x07
    2388:	2a 5f       	subi	r18, 0xFA	; 250
    238a:	3f 4f       	sbci	r19, 0xFF	; 255
    238c:	f9 01       	movw	r30, r18
    238e:	20 81       	ld	r18, Z
    2390:	31 81       	ldd	r19, Z+1	; 0x01
    2392:	4f ed       	ldi	r20, 0xDF	; 223
    2394:	51 e0       	ldi	r21, 0x01	; 1
    2396:	ba 01       	movw	r22, r20
    2398:	a9 01       	movw	r20, r18
    239a:	22 e0       	ldi	r18, 0x02	; 2
    239c:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <sendMessage1>
					msgReceived = 0;
    23a0:	10 92 fa 03 	sts	0x03FA, r1
					msgNumber = -1;
    23a4:	8f ef       	ldi	r24, 0xFF	; 255
    23a6:	80 93 60 00 	sts	0x0060, r24
					msgNumber1 = -1;
    23aa:	8f ef       	ldi	r24, 0xFF	; 255
    23ac:	80 93 61 00 	sts	0x0061, r24
					continue;
    23b0:	0c 94 7e 19 	jmp	0x32fc	; 0x32fc <main+0x171c>
				}
				freeSplitedString(userNo, userNoCounter);
    23b4:	ce 01       	movw	r24, r28
    23b6:	86 56       	subi	r24, 0x66	; 102
    23b8:	9f 4f       	sbci	r25, 0xFF	; 255
    23ba:	fc 01       	movw	r30, r24
    23bc:	20 81       	ld	r18, Z
    23be:	31 81       	ldd	r19, Z+1	; 0x01
    23c0:	8e 81       	ldd	r24, Y+6	; 0x06
    23c2:	9f 81       	ldd	r25, Y+7	; 0x07
    23c4:	b9 01       	movw	r22, r18
    23c6:	0e 94 04 0b 	call	0x1608	; 0x1608 <freeSplitedString>
				}
				/******************************************************/

				/********** Check for message format ******************/
				//@1 Spliting message
				a = split((char*) buffer, checkPattern, (int *)&counter);
    23ca:	8b ef       	ldi	r24, 0xFB	; 251
    23cc:	92 e0       	ldi	r25, 0x02	; 2
    23ce:	49 ef       	ldi	r20, 0xF9	; 249
    23d0:	51 e0       	ldi	r21, 0x01	; 1
    23d2:	2d ef       	ldi	r18, 0xFD	; 253
    23d4:	33 e0       	ldi	r19, 0x03	; 3
    23d6:	ba 01       	movw	r22, r20
    23d8:	a9 01       	movw	r20, r18
    23da:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <split>
    23de:	99 87       	std	Y+9, r25	; 0x09
    23e0:	88 87       	std	Y+8, r24	; 0x08
				textContent = split (a[2], " ", &textContentCounter);
    23e2:	88 85       	ldd	r24, Y+8	; 0x08
    23e4:	99 85       	ldd	r25, Y+9	; 0x09
    23e6:	04 96       	adiw	r24, 0x04	; 4
    23e8:	fc 01       	movw	r30, r24
    23ea:	80 81       	ld	r24, Z
    23ec:	91 81       	ldd	r25, Z+1	; 0x01
    23ee:	4c ef       	ldi	r20, 0xFC	; 252
    23f0:	51 e0       	ldi	r21, 0x01	; 1
    23f2:	9e 01       	movw	r18, r28
    23f4:	28 56       	subi	r18, 0x68	; 104
    23f6:	3f 4f       	sbci	r19, 0xFF	; 255
    23f8:	ba 01       	movw	r22, r20
    23fa:	a9 01       	movw	r20, r18
    23fc:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <split>
    2400:	9b 87       	std	Y+11, r25	; 0x0b
    2402:	8a 87       	std	Y+10, r24	; 0x0a

				pinCode = textContent[0];
    2404:	8a 85       	ldd	r24, Y+10	; 0x0a
    2406:	9b 85       	ldd	r25, Y+11	; 0x0b
    2408:	fc 01       	movw	r30, r24
    240a:	80 81       	ld	r24, Z
    240c:	91 81       	ldd	r25, Z+1	; 0x01
    240e:	90 93 02 04 	sts	0x0402, r25
    2412:	80 93 01 04 	sts	0x0401, r24
				vmCode = textContent[1];
    2416:	8a 85       	ldd	r24, Y+10	; 0x0a
    2418:	9b 85       	ldd	r25, Y+11	; 0x0b
    241a:	02 96       	adiw	r24, 0x02	; 2
    241c:	fc 01       	movw	r30, r24
    241e:	80 81       	ld	r24, Z
    2420:	91 81       	ldd	r25, Z+1	; 0x01
    2422:	90 93 06 04 	sts	0x0406, r25
    2426:	80 93 05 04 	sts	0x0405, r24
				productCode = textContent[2];
    242a:	8a 85       	ldd	r24, Y+10	; 0x0a
    242c:	9b 85       	ldd	r25, Y+11	; 0x0b
    242e:	04 96       	adiw	r24, 0x04	; 4
    2430:	fc 01       	movw	r30, r24
    2432:	80 81       	ld	r24, Z
    2434:	91 81       	ldd	r25, Z+1	; 0x01
    2436:	90 93 04 04 	sts	0x0404, r25
    243a:	80 93 03 04 	sts	0x0403, r24
				//@1 Complete

				//@2 Check for 6 digit pinCode
				if (length(pinCode) == 6){
    243e:	80 91 01 04 	lds	r24, 0x0401
    2442:	90 91 02 04 	lds	r25, 0x0402
    2446:	0e 94 18 08 	call	0x1030	; 0x1030 <length>
    244a:	86 30       	cpi	r24, 0x06	; 6
    244c:	91 05       	cpc	r25, r1
    244e:	09 f0       	breq	.+2      	; 0x2452 <main+0x872>
    2450:	de c1       	rjmp	.+956    	; 0x280e <main+0xc2e>
					//@3 check for vmMachine code
					if (equals(vmCode, "vm001") == 1){
    2452:	80 91 05 04 	lds	r24, 0x0405
    2456:	90 91 06 04 	lds	r25, 0x0406
    245a:	2e ef       	ldi	r18, 0xFE	; 254
    245c:	31 e0       	ldi	r19, 0x01	; 1
    245e:	b9 01       	movw	r22, r18
    2460:	0e 94 94 09 	call	0x1328	; 0x1328 <equals>
    2464:	81 30       	cpi	r24, 0x01	; 1
    2466:	09 f0       	breq	.+2      	; 0x246a <main+0x88a>
    2468:	b8 c1       	rjmp	.+880    	; 0x27da <main+0xbfa>
						//@4 check for itemcode
						char *subSubString;
						subSubString = subString(productCode, 0, 1);
    246a:	80 91 03 04 	lds	r24, 0x0403
    246e:	90 91 04 04 	lds	r25, 0x0404
    2472:	60 e0       	ldi	r22, 0x00	; 0
    2474:	70 e0       	ldi	r23, 0x00	; 0
    2476:	41 e0       	ldi	r20, 0x01	; 1
    2478:	50 e0       	ldi	r21, 0x00	; 0
    247a:	0e 94 47 09 	call	0x128e	; 0x128e <subString>
    247e:	9d 87       	std	Y+13, r25	; 0x0d
    2480:	8c 87       	std	Y+12, r24	; 0x0c
						if (equals(subSubString, "a")){
    2482:	8c 85       	ldd	r24, Y+12	; 0x0c
    2484:	9d 85       	ldd	r25, Y+13	; 0x0d
    2486:	24 e0       	ldi	r18, 0x04	; 4
    2488:	32 e0       	ldi	r19, 0x02	; 2
    248a:	b9 01       	movw	r22, r18
    248c:	0e 94 94 09 	call	0x1328	; 0x1328 <equals>
    2490:	88 23       	and	r24, r24
    2492:	09 f4       	brne	.+2      	; 0x2496 <main+0x8b6>
    2494:	84 c1       	rjmp	.+776    	; 0x279e <main+0xbbe>
							char *subSubString2;

							//@5 check for productValue
							int productValue;
							subSubString2 = subString(productCode, 1, 2);
    2496:	80 91 03 04 	lds	r24, 0x0403
    249a:	90 91 04 04 	lds	r25, 0x0404
    249e:	61 e0       	ldi	r22, 0x01	; 1
    24a0:	70 e0       	ldi	r23, 0x00	; 0
    24a2:	42 e0       	ldi	r20, 0x02	; 2
    24a4:	50 e0       	ldi	r21, 0x00	; 0
    24a6:	0e 94 47 09 	call	0x128e	; 0x128e <subString>
    24aa:	9f 87       	std	Y+15, r25	; 0x0f
    24ac:	8e 87       	std	Y+14, r24	; 0x0e
							productValue = toInteger(subSubString2);
    24ae:	8e 85       	ldd	r24, Y+14	; 0x0e
    24b0:	9f 85       	ldd	r25, Y+15	; 0x0f
    24b2:	0e 94 c1 0c 	call	0x1982	; 0x1982 <toInteger>
    24b6:	99 8b       	std	Y+17, r25	; 0x11
    24b8:	88 8b       	std	Y+16, r24	; 0x10
							if (productValue > 6 || productValue < 1){
    24ba:	88 89       	ldd	r24, Y+16	; 0x10
    24bc:	99 89       	ldd	r25, Y+17	; 0x11
    24be:	87 30       	cpi	r24, 0x07	; 7
    24c0:	91 05       	cpc	r25, r1
    24c2:	2c f4       	brge	.+10     	; 0x24ce <main+0x8ee>
    24c4:	88 89       	ldd	r24, Y+16	; 0x10
    24c6:	99 89       	ldd	r25, Y+17	; 0x11
    24c8:	18 16       	cp	r1, r24
    24ca:	19 06       	cpc	r1, r25
    24cc:	d4 f0       	brlt	.+52     	; 0x2502 <main+0x922>
								/**** unavailable product ***********/
								sendMessage1 (phoneNo, pinCode, "unavailable product", 2);
    24ce:	80 91 83 00 	lds	r24, 0x0083
    24d2:	90 91 84 00 	lds	r25, 0x0084
    24d6:	40 91 01 04 	lds	r20, 0x0401
    24da:	50 91 02 04 	lds	r21, 0x0402
    24de:	26 e0       	ldi	r18, 0x06	; 6
    24e0:	32 e0       	ldi	r19, 0x02	; 2
    24e2:	ba 01       	movw	r22, r20
    24e4:	a9 01       	movw	r20, r18
    24e6:	22 e0       	ldi	r18, 0x02	; 2
    24e8:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <sendMessage1>
								LCDPrintLines("Error: ", "unavailable product");
    24ec:	8a e1       	ldi	r24, 0x1A	; 26
    24ee:	92 e0       	ldi	r25, 0x02	; 2
    24f0:	26 e0       	ldi	r18, 0x06	; 6
    24f2:	32 e0       	ldi	r19, 0x02	; 2
    24f4:	b9 01       	movw	r22, r18
    24f6:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <LCDPrintLines>
								whatIsGoingOn = ERRORA;
    24fa:	89 e0       	ldi	r24, 0x09	; 9
    24fc:	80 93 ff 03 	sts	0x03FF, r24
    2500:	49 c1       	rjmp	.+658    	; 0x2794 <main+0xbb4>
								/************************************/
							} else {
								/******** Every thing is correct drop the product *****/
								//@6 drop the product and display in LCD
								PORTC = (1 << (5 - (productValue - 1)));
    2502:	85 e3       	ldi	r24, 0x35	; 53
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	46 e0       	ldi	r20, 0x06	; 6
    2508:	50 e0       	ldi	r21, 0x00	; 0
    250a:	28 89       	ldd	r18, Y+16	; 0x10
    250c:	39 89       	ldd	r19, Y+17	; 0x11
    250e:	42 1b       	sub	r20, r18
    2510:	53 0b       	sbc	r21, r19
    2512:	21 e0       	ldi	r18, 0x01	; 1
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	02 c0       	rjmp	.+4      	; 0x251c <main+0x93c>
    2518:	22 0f       	add	r18, r18
    251a:	33 1f       	adc	r19, r19
    251c:	4a 95       	dec	r20
    251e:	e2 f7       	brpl	.-8      	; 0x2518 <main+0x938>
    2520:	fc 01       	movw	r30, r24
    2522:	20 83       	st	Z, r18
								LCDPrintLines("Dropping", "Product: ");
    2524:	82 e2       	ldi	r24, 0x22	; 34
    2526:	92 e0       	ldi	r25, 0x02	; 2
    2528:	2b e2       	ldi	r18, 0x2B	; 43
    252a:	32 e0       	ldi	r19, 0x02	; 2
    252c:	b9 01       	movw	r22, r18
    252e:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <LCDPrintLines>
								LCDPrint(subSubString2);
    2532:	8e 85       	ldd	r24, Y+14	; 0x0e
    2534:	9f 85       	ldd	r25, Y+15	; 0x0f
    2536:	0e 94 b9 04 	call	0x972	; 0x972 <LCDPrint>
								//@6 (drop the product and display in LCD) complete

								//@7 start motor and count for 2 sec
								unsigned int fallCounter = 0;
    253a:	1b 82       	std	Y+3, r1	; 0x03
    253c:	1a 82       	std	Y+2, r1	; 0x02
								while ((!(bit_is_set(PINA, PA6))) && (!(bit_is_set(PINA, PA7)))) {
    253e:	dd c0       	rjmp	.+442    	; 0x26fa <main+0xb1a>
    2540:	9e 01       	movw	r18, r28
    2542:	2e 5a       	subi	r18, 0xAE	; 174
    2544:	3f 4f       	sbci	r19, 0xFF	; 255
    2546:	80 e0       	ldi	r24, 0x00	; 0
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	a0 e8       	ldi	r26, 0x80	; 128
    254c:	bf e3       	ldi	r27, 0x3F	; 63
    254e:	f9 01       	movw	r30, r18
    2550:	80 83       	st	Z, r24
    2552:	91 83       	std	Z+1, r25	; 0x01
    2554:	a2 83       	std	Z+2, r26	; 0x02
    2556:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    2558:	8e 01       	movw	r16, r28
    255a:	0a 5a       	subi	r16, 0xAA	; 170
    255c:	1f 4f       	sbci	r17, 0xFF	; 255
    255e:	ce 01       	movw	r24, r28
    2560:	8e 5a       	subi	r24, 0xAE	; 174
    2562:	9f 4f       	sbci	r25, 0xFF	; 255
    2564:	fc 01       	movw	r30, r24
    2566:	60 81       	ld	r22, Z
    2568:	71 81       	ldd	r23, Z+1	; 0x01
    256a:	82 81       	ldd	r24, Z+2	; 0x02
    256c:	93 81       	ldd	r25, Z+3	; 0x03
    256e:	20 e0       	ldi	r18, 0x00	; 0
    2570:	30 e8       	ldi	r19, 0x80	; 128
    2572:	4b e3       	ldi	r20, 0x3B	; 59
    2574:	55 e4       	ldi	r21, 0x45	; 69
    2576:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <__mulsf3>
    257a:	dc 01       	movw	r26, r24
    257c:	cb 01       	movw	r24, r22
    257e:	f8 01       	movw	r30, r16
    2580:	80 83       	st	Z, r24
    2582:	91 83       	std	Z+1, r25	; 0x01
    2584:	a2 83       	std	Z+2, r26	; 0x02
    2586:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2588:	ce 01       	movw	r24, r28
    258a:	8a 5a       	subi	r24, 0xAA	; 170
    258c:	9f 4f       	sbci	r25, 0xFF	; 255
    258e:	11 e0       	ldi	r17, 0x01	; 1
    2590:	fc 01       	movw	r30, r24
    2592:	60 81       	ld	r22, Z
    2594:	71 81       	ldd	r23, Z+1	; 0x01
    2596:	82 81       	ldd	r24, Z+2	; 0x02
    2598:	93 81       	ldd	r25, Z+3	; 0x03
    259a:	20 e0       	ldi	r18, 0x00	; 0
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	40 e8       	ldi	r20, 0x80	; 128
    25a0:	5f e3       	ldi	r21, 0x3F	; 63
    25a2:	0e 94 ae 1c 	call	0x395c	; 0x395c <__ltsf2>
    25a6:	88 23       	and	r24, r24
    25a8:	0c f0       	brlt	.+2      	; 0x25ac <main+0x9cc>
    25aa:	10 e0       	ldi	r17, 0x00	; 0
    25ac:	11 23       	and	r17, r17
    25ae:	49 f0       	breq	.+18     	; 0x25c2 <main+0x9e2>
		__ticks = 1;
    25b0:	ce 01       	movw	r24, r28
    25b2:	86 5a       	subi	r24, 0xA6	; 166
    25b4:	9f 4f       	sbci	r25, 0xFF	; 255
    25b6:	21 e0       	ldi	r18, 0x01	; 1
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	fc 01       	movw	r30, r24
    25bc:	31 83       	std	Z+1, r19	; 0x01
    25be:	20 83       	st	Z, r18
    25c0:	74 c0       	rjmp	.+232    	; 0x26aa <main+0xaca>
	else if (__tmp > 65535)
    25c2:	ce 01       	movw	r24, r28
    25c4:	8a 5a       	subi	r24, 0xAA	; 170
    25c6:	9f 4f       	sbci	r25, 0xFF	; 255
    25c8:	11 e0       	ldi	r17, 0x01	; 1
    25ca:	fc 01       	movw	r30, r24
    25cc:	60 81       	ld	r22, Z
    25ce:	71 81       	ldd	r23, Z+1	; 0x01
    25d0:	82 81       	ldd	r24, Z+2	; 0x02
    25d2:	93 81       	ldd	r25, Z+3	; 0x03
    25d4:	20 e0       	ldi	r18, 0x00	; 0
    25d6:	3f ef       	ldi	r19, 0xFF	; 255
    25d8:	4f e7       	ldi	r20, 0x7F	; 127
    25da:	57 e4       	ldi	r21, 0x47	; 71
    25dc:	0e 94 4e 1c 	call	0x389c	; 0x389c <__gtsf2>
    25e0:	18 16       	cp	r1, r24
    25e2:	0c f0       	brlt	.+2      	; 0x25e6 <main+0xa06>
    25e4:	10 e0       	ldi	r17, 0x00	; 0
    25e6:	11 23       	and	r17, r17
    25e8:	09 f4       	brne	.+2      	; 0x25ec <main+0xa0c>
    25ea:	4d c0       	rjmp	.+154    	; 0x2686 <main+0xaa6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ec:	ce 01       	movw	r24, r28
    25ee:	8e 5a       	subi	r24, 0xAE	; 174
    25f0:	9f 4f       	sbci	r25, 0xFF	; 255
    25f2:	fc 01       	movw	r30, r24
    25f4:	60 81       	ld	r22, Z
    25f6:	71 81       	ldd	r23, Z+1	; 0x01
    25f8:	82 81       	ldd	r24, Z+2	; 0x02
    25fa:	93 81       	ldd	r25, Z+3	; 0x03
    25fc:	20 e0       	ldi	r18, 0x00	; 0
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	40 e2       	ldi	r20, 0x20	; 32
    2602:	51 e4       	ldi	r21, 0x41	; 65
    2604:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <__mulsf3>
    2608:	dc 01       	movw	r26, r24
    260a:	cb 01       	movw	r24, r22
    260c:	8e 01       	movw	r16, r28
    260e:	06 5a       	subi	r16, 0xA6	; 166
    2610:	1f 4f       	sbci	r17, 0xFF	; 255
    2612:	bc 01       	movw	r22, r24
    2614:	cd 01       	movw	r24, r26
    2616:	0e 94 80 19 	call	0x3300	; 0x3300 <__fixunssfsi>
    261a:	dc 01       	movw	r26, r24
    261c:	cb 01       	movw	r24, r22
    261e:	f8 01       	movw	r30, r16
    2620:	91 83       	std	Z+1, r25	; 0x01
    2622:	80 83       	st	Z, r24
    2624:	27 c0       	rjmp	.+78     	; 0x2674 <main+0xa94>
    2626:	ce 01       	movw	r24, r28
    2628:	84 5a       	subi	r24, 0xA4	; 164
    262a:	9f 4f       	sbci	r25, 0xFF	; 255
    262c:	2c e2       	ldi	r18, 0x2C	; 44
    262e:	31 e0       	ldi	r19, 0x01	; 1
    2630:	fc 01       	movw	r30, r24
    2632:	31 83       	std	Z+1, r19	; 0x01
    2634:	20 83       	st	Z, r18
    2636:	ce 01       	movw	r24, r28
    2638:	84 5a       	subi	r24, 0xA4	; 164
    263a:	9f 4f       	sbci	r25, 0xFF	; 255
    263c:	fc 01       	movw	r30, r24
    263e:	80 81       	ld	r24, Z
    2640:	91 81       	ldd	r25, Z+1	; 0x01
    2642:	8c 01       	movw	r16, r24
    2644:	c8 01       	movw	r24, r16
    2646:	01 97       	sbiw	r24, 0x01	; 1
    2648:	f1 f7       	brne	.-4      	; 0x2646 <main+0xa66>
    264a:	8c 01       	movw	r16, r24
    264c:	ce 01       	movw	r24, r28
    264e:	84 5a       	subi	r24, 0xA4	; 164
    2650:	9f 4f       	sbci	r25, 0xFF	; 255
    2652:	fc 01       	movw	r30, r24
    2654:	11 83       	std	Z+1, r17	; 0x01
    2656:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2658:	ce 01       	movw	r24, r28
    265a:	86 5a       	subi	r24, 0xA6	; 166
    265c:	9f 4f       	sbci	r25, 0xFF	; 255
    265e:	9e 01       	movw	r18, r28
    2660:	26 5a       	subi	r18, 0xA6	; 166
    2662:	3f 4f       	sbci	r19, 0xFF	; 255
    2664:	f9 01       	movw	r30, r18
    2666:	20 81       	ld	r18, Z
    2668:	31 81       	ldd	r19, Z+1	; 0x01
    266a:	21 50       	subi	r18, 0x01	; 1
    266c:	30 40       	sbci	r19, 0x00	; 0
    266e:	fc 01       	movw	r30, r24
    2670:	31 83       	std	Z+1, r19	; 0x01
    2672:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2674:	ce 01       	movw	r24, r28
    2676:	86 5a       	subi	r24, 0xA6	; 166
    2678:	9f 4f       	sbci	r25, 0xFF	; 255
    267a:	fc 01       	movw	r30, r24
    267c:	80 81       	ld	r24, Z
    267e:	91 81       	ldd	r25, Z+1	; 0x01
    2680:	00 97       	sbiw	r24, 0x00	; 0
    2682:	89 f6       	brne	.-94     	; 0x2626 <main+0xa46>
    2684:	2f c0       	rjmp	.+94     	; 0x26e4 <main+0xb04>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2686:	8e 01       	movw	r16, r28
    2688:	06 5a       	subi	r16, 0xA6	; 166
    268a:	1f 4f       	sbci	r17, 0xFF	; 255
    268c:	ce 01       	movw	r24, r28
    268e:	8a 5a       	subi	r24, 0xAA	; 170
    2690:	9f 4f       	sbci	r25, 0xFF	; 255
    2692:	fc 01       	movw	r30, r24
    2694:	60 81       	ld	r22, Z
    2696:	71 81       	ldd	r23, Z+1	; 0x01
    2698:	82 81       	ldd	r24, Z+2	; 0x02
    269a:	93 81       	ldd	r25, Z+3	; 0x03
    269c:	0e 94 80 19 	call	0x3300	; 0x3300 <__fixunssfsi>
    26a0:	dc 01       	movw	r26, r24
    26a2:	cb 01       	movw	r24, r22
    26a4:	f8 01       	movw	r30, r16
    26a6:	91 83       	std	Z+1, r25	; 0x01
    26a8:	80 83       	st	Z, r24
    26aa:	ce 01       	movw	r24, r28
    26ac:	82 5a       	subi	r24, 0xA2	; 162
    26ae:	9f 4f       	sbci	r25, 0xFF	; 255
    26b0:	9e 01       	movw	r18, r28
    26b2:	26 5a       	subi	r18, 0xA6	; 166
    26b4:	3f 4f       	sbci	r19, 0xFF	; 255
    26b6:	f9 01       	movw	r30, r18
    26b8:	20 81       	ld	r18, Z
    26ba:	31 81       	ldd	r19, Z+1	; 0x01
    26bc:	fc 01       	movw	r30, r24
    26be:	31 83       	std	Z+1, r19	; 0x01
    26c0:	20 83       	st	Z, r18
    26c2:	ce 01       	movw	r24, r28
    26c4:	82 5a       	subi	r24, 0xA2	; 162
    26c6:	9f 4f       	sbci	r25, 0xFF	; 255
    26c8:	fc 01       	movw	r30, r24
    26ca:	80 81       	ld	r24, Z
    26cc:	91 81       	ldd	r25, Z+1	; 0x01
    26ce:	8c 01       	movw	r16, r24
    26d0:	c8 01       	movw	r24, r16
    26d2:	01 97       	sbiw	r24, 0x01	; 1
    26d4:	f1 f7       	brne	.-4      	; 0x26d2 <main+0xaf2>
    26d6:	8c 01       	movw	r16, r24
    26d8:	ce 01       	movw	r24, r28
    26da:	82 5a       	subi	r24, 0xA2	; 162
    26dc:	9f 4f       	sbci	r25, 0xFF	; 255
    26de:	fc 01       	movw	r30, r24
    26e0:	11 83       	std	Z+1, r17	; 0x01
    26e2:	00 83       	st	Z, r16
									/******* find out time take here *******/
									_delay_ms(1);
									if (fallCounter > 2000){
    26e4:	8a 81       	ldd	r24, Y+2	; 0x02
    26e6:	9b 81       	ldd	r25, Y+3	; 0x03
    26e8:	f7 e0       	ldi	r31, 0x07	; 7
    26ea:	81 3d       	cpi	r24, 0xD1	; 209
    26ec:	9f 07       	cpc	r25, r31
    26ee:	b8 f4       	brcc	.+46     	; 0x271e <main+0xb3e>
										break;
									}
									fallCounter++;
    26f0:	8a 81       	ldd	r24, Y+2	; 0x02
    26f2:	9b 81       	ldd	r25, Y+3	; 0x03
    26f4:	01 96       	adiw	r24, 0x01	; 1
    26f6:	9b 83       	std	Y+3, r25	; 0x03
    26f8:	8a 83       	std	Y+2, r24	; 0x02
								LCDPrint(subSubString2);
								//@6 (drop the product and display in LCD) complete

								//@7 start motor and count for 2 sec
								unsigned int fallCounter = 0;
								while ((!(bit_is_set(PINA, PA6))) && (!(bit_is_set(PINA, PA7)))) {
    26fa:	89 e3       	ldi	r24, 0x39	; 57
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	fc 01       	movw	r30, r24
    2700:	80 81       	ld	r24, Z
    2702:	88 2f       	mov	r24, r24
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	80 74       	andi	r24, 0x40	; 64
    2708:	90 70       	andi	r25, 0x00	; 0
    270a:	00 97       	sbiw	r24, 0x00	; 0
    270c:	49 f4       	brne	.+18     	; 0x2720 <main+0xb40>
    270e:	89 e3       	ldi	r24, 0x39	; 57
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	fc 01       	movw	r30, r24
    2714:	80 81       	ld	r24, Z
    2716:	88 23       	and	r24, r24
    2718:	0c f0       	brlt	.+2      	; 0x271c <main+0xb3c>
    271a:	12 cf       	rjmp	.-476    	; 0x2540 <main+0x960>
    271c:	01 c0       	rjmp	.+2      	; 0x2720 <main+0xb40>
									/******* find out time take here *******/
									_delay_ms(1);
									if (fallCounter > 2000){
										break;
    271e:	00 00       	nop
									}
									fallCounter++;
									/****************************************/
								}
								//@8 stop the motor and check for time
								PORTC = 0x00;
    2720:	85 e3       	ldi	r24, 0x35	; 53
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	fc 01       	movw	r30, r24
    2726:	10 82       	st	Z, r1
								if (fallCounter >= 2000) {
    2728:	8a 81       	ldd	r24, Y+2	; 0x02
    272a:	9b 81       	ldd	r25, Y+3	; 0x03
    272c:	f7 e0       	ldi	r31, 0x07	; 7
    272e:	80 3d       	cpi	r24, 0xD0	; 208
    2730:	9f 07       	cpc	r25, r31
    2732:	d0 f0       	brcs	.+52     	; 0x2768 <main+0xb88>
									/*********** overFall error **************/
									sendMessage1 (phoneNo, pinCode, "Overfall error", 2);
    2734:	80 91 83 00 	lds	r24, 0x0083
    2738:	90 91 84 00 	lds	r25, 0x0084
    273c:	40 91 01 04 	lds	r20, 0x0401
    2740:	50 91 02 04 	lds	r21, 0x0402
    2744:	25 e3       	ldi	r18, 0x35	; 53
    2746:	32 e0       	ldi	r19, 0x02	; 2
    2748:	ba 01       	movw	r22, r20
    274a:	a9 01       	movw	r20, r18
    274c:	22 e0       	ldi	r18, 0x02	; 2
    274e:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <sendMessage1>
									LCDPrintLines("Error: ", "Overfall");
    2752:	8a e1       	ldi	r24, 0x1A	; 26
    2754:	92 e0       	ldi	r25, 0x02	; 2
    2756:	2e e8       	ldi	r18, 0x8E	; 142
    2758:	31 e0       	ldi	r19, 0x01	; 1
    275a:	b9 01       	movw	r22, r18
    275c:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <LCDPrintLines>
									whatIsGoingOn = ERRORO;
    2760:	88 e0       	ldi	r24, 0x08	; 8
    2762:	80 93 ff 03 	sts	0x03FF, r24
    2766:	16 c0       	rjmp	.+44     	; 0x2794 <main+0xbb4>
									/*****************************************/
								} else {
									/*********** success **************/
									sendMessage (phoneNo, pinCode, 1);
    2768:	80 91 83 00 	lds	r24, 0x0083
    276c:	90 91 84 00 	lds	r25, 0x0084
    2770:	20 91 01 04 	lds	r18, 0x0401
    2774:	30 91 02 04 	lds	r19, 0x0402
    2778:	b9 01       	movw	r22, r18
    277a:	41 e0       	ldi	r20, 0x01	; 1
    277c:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <sendMessage>
									LCDPrintLines("Error: ", "success");
    2780:	8a e1       	ldi	r24, 0x1A	; 26
    2782:	92 e0       	ldi	r25, 0x02	; 2
    2784:	24 e4       	ldi	r18, 0x44	; 68
    2786:	32 e0       	ldi	r19, 0x02	; 2
    2788:	b9 01       	movw	r22, r18
    278a:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <LCDPrintLines>
									whatIsGoingOn = MESSAGE_SEND_SUCCESSFULLY;
    278e:	81 e0       	ldi	r24, 0x01	; 1
    2790:	80 93 ff 03 	sts	0x03FF, r24
									/*****************************************/
								}
								//@7 () Complete
								/******************************************************/
							}
							free (subSubString2);
    2794:	8e 85       	ldd	r24, Y+14	; 0x0e
    2796:	9f 85       	ldd	r25, Y+15	; 0x0f
    2798:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <free>
    279c:	19 c0       	rjmp	.+50     	; 0x27d0 <main+0xbf0>
							//@5 (Product value check) complete
						} else {
							/****** invalid vmCode *******/
							sendMessage1 (phoneNo, pinCode, "productCode invalid", 2);
    279e:	80 91 83 00 	lds	r24, 0x0083
    27a2:	90 91 84 00 	lds	r25, 0x0084
    27a6:	40 91 01 04 	lds	r20, 0x0401
    27aa:	50 91 02 04 	lds	r21, 0x0402
    27ae:	2c e4       	ldi	r18, 0x4C	; 76
    27b0:	32 e0       	ldi	r19, 0x02	; 2
    27b2:	ba 01       	movw	r22, r20
    27b4:	a9 01       	movw	r20, r18
    27b6:	22 e0       	ldi	r18, 0x02	; 2
    27b8:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <sendMessage1>
							LCDPrintLines("Error: ", "productCode invalid");
    27bc:	8a e1       	ldi	r24, 0x1A	; 26
    27be:	92 e0       	ldi	r25, 0x02	; 2
    27c0:	2c e4       	ldi	r18, 0x4C	; 76
    27c2:	32 e0       	ldi	r19, 0x02	; 2
    27c4:	b9 01       	movw	r22, r18
    27c6:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <LCDPrintLines>
							whatIsGoingOn = ERRORP;
    27ca:	86 e0       	ldi	r24, 0x06	; 6
    27cc:	80 93 ff 03 	sts	0x03FF, r24
							/*****************************/
						}
						free (subSubString);
    27d0:	8c 85       	ldd	r24, Y+12	; 0x0c
    27d2:	9d 85       	ldd	r25, Y+13	; 0x0d
    27d4:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <free>
    27d8:	33 c0       	rjmp	.+102    	; 0x2840 <main+0xc60>
						//@4 (check for itemcode) complete
					} else {
						/****** invalid vmCode *******/
						sendMessage1 (phoneNo, pinCode, "vmCode invalid", 2);
    27da:	80 91 83 00 	lds	r24, 0x0083
    27de:	90 91 84 00 	lds	r25, 0x0084
    27e2:	40 91 01 04 	lds	r20, 0x0401
    27e6:	50 91 02 04 	lds	r21, 0x0402
    27ea:	2e e5       	ldi	r18, 0x5E	; 94
    27ec:	31 e0       	ldi	r19, 0x01	; 1
    27ee:	ba 01       	movw	r22, r20
    27f0:	a9 01       	movw	r20, r18
    27f2:	22 e0       	ldi	r18, 0x02	; 2
    27f4:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <sendMessage1>
						LCDPrintLines("Error: ", "vmCode invalid");
    27f8:	8a e1       	ldi	r24, 0x1A	; 26
    27fa:	92 e0       	ldi	r25, 0x02	; 2
    27fc:	2e e5       	ldi	r18, 0x5E	; 94
    27fe:	31 e0       	ldi	r19, 0x01	; 1
    2800:	b9 01       	movw	r22, r18
    2802:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <LCDPrintLines>
						whatIsGoingOn = ERRORV;
    2806:	8a e0       	ldi	r24, 0x0A	; 10
    2808:	80 93 ff 03 	sts	0x03FF, r24
    280c:	19 c0       	rjmp	.+50     	; 0x2840 <main+0xc60>
						/*****************************/
					}
					//@3 (check for vmMachine code) completed
				} else {
					/******* invalid pinCode *******/
					sendMessage1 (phoneNo, pinCode, "pinCode invalid", 2);
    280e:	80 91 83 00 	lds	r24, 0x0083
    2812:	90 91 84 00 	lds	r25, 0x0084
    2816:	40 91 01 04 	lds	r20, 0x0401
    281a:	50 91 02 04 	lds	r21, 0x0402
    281e:	20 e6       	ldi	r18, 0x60	; 96
    2820:	32 e0       	ldi	r19, 0x02	; 2
    2822:	ba 01       	movw	r22, r20
    2824:	a9 01       	movw	r20, r18
    2826:	22 e0       	ldi	r18, 0x02	; 2
    2828:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <sendMessage1>
					LCDPrintLines("Error: und.", "pinCode length");
    282c:	80 e7       	ldi	r24, 0x70	; 112
    282e:	92 e0       	ldi	r25, 0x02	; 2
    2830:	2c e7       	ldi	r18, 0x7C	; 124
    2832:	32 e0       	ldi	r19, 0x02	; 2
    2834:	b9 01       	movw	r22, r18
    2836:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <LCDPrintLines>
					whatIsGoingOn = ERRORPA;
    283a:	84 e0       	ldi	r24, 0x04	; 4
    283c:	80 93 ff 03 	sts	0x03FF, r24
					/*******************************/
				}
				//@2 (check for 6 digit pinCode) complete
				freeSplitedString (a, counter);
    2840:	20 91 fd 03 	lds	r18, 0x03FD
    2844:	30 91 fe 03 	lds	r19, 0x03FE
    2848:	88 85       	ldd	r24, Y+8	; 0x08
    284a:	99 85       	ldd	r25, Y+9	; 0x09
    284c:	b9 01       	movw	r22, r18
    284e:	0e 94 04 0b 	call	0x1608	; 0x1608 <freeSplitedString>
				freeSplitedString (textContent, textContentCounter);
    2852:	ce 01       	movw	r24, r28
    2854:	88 56       	subi	r24, 0x68	; 104
    2856:	9f 4f       	sbci	r25, 0xFF	; 255
    2858:	fc 01       	movw	r30, r24
    285a:	20 81       	ld	r18, Z
    285c:	31 81       	ldd	r19, Z+1	; 0x01
    285e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2860:	9b 85       	ldd	r25, Y+11	; 0x0b
    2862:	b9 01       	movw	r22, r18
    2864:	0e 94 04 0b 	call	0x1608	; 0x1608 <freeSplitedString>
    2868:	18 c0       	rjmp	.+48     	; 0x289a <main+0xcba>
				/******************************************************/

				/******************************************************/
			} else if (okComplete == 2){
    286a:	80 91 f8 02 	lds	r24, 0x02F8
    286e:	82 30       	cpi	r24, 0x02	; 2
    2870:	a1 f4       	brne	.+40     	; 0x289a <main+0xcba>
				/**************** error reading sms *******************/
				sendMessage (phoneNo, "couldn't read message from GSM modem", 2);
    2872:	80 91 83 00 	lds	r24, 0x0083
    2876:	90 91 84 00 	lds	r25, 0x0084
    287a:	2b e8       	ldi	r18, 0x8B	; 139
    287c:	32 e0       	ldi	r19, 0x02	; 2
    287e:	b9 01       	movw	r22, r18
    2880:	42 e0       	ldi	r20, 0x02	; 2
    2882:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <sendMessage>
				LCDPrintLines("Err Reading SMS", "5 Retries Error");
    2886:	80 eb       	ldi	r24, 0xB0	; 176
    2888:	92 e0       	ldi	r25, 0x02	; 2
    288a:	2e e7       	ldi	r18, 0x7E	; 126
    288c:	31 e0       	ldi	r19, 0x01	; 1
    288e:	b9 01       	movw	r22, r18
    2890:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <LCDPrintLines>
				whatIsGoingOn = ERRORR;
    2894:	87 e0       	ldi	r24, 0x07	; 7
    2896:	80 93 ff 03 	sts	0x03FF, r24
				/******************************************************/
			}

			/*********** delete the message **************/
			if (msgNumber1 == 255) {
    289a:	80 91 61 00 	lds	r24, 0x0061
    289e:	8f 3f       	cpi	r24, 0xFF	; 255
    28a0:	41 f4       	brne	.+16     	; 0x28b2 <main+0xcd2>
				sendATCommand1("at+cmgd=", msgNumber);
    28a2:	20 91 60 00 	lds	r18, 0x0060
    28a6:	80 ec       	ldi	r24, 0xC0	; 192
    28a8:	92 e0       	ldi	r25, 0x02	; 2
    28aa:	62 2f       	mov	r22, r18
    28ac:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <sendATCommand1>
    28b0:	0a c0       	rjmp	.+20     	; 0x28c6 <main+0xce6>
			} else {
				sendATCommand2("at+cmgd=", msgNumber, msgNumber1);
    28b2:	30 91 60 00 	lds	r19, 0x0060
    28b6:	20 91 61 00 	lds	r18, 0x0061
    28ba:	80 ec       	ldi	r24, 0xC0	; 192
    28bc:	92 e0       	ldi	r25, 0x02	; 2
    28be:	63 2f       	mov	r22, r19
    28c0:	42 2f       	mov	r20, r18
    28c2:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <sendATCommand2>
    28c6:	9e 01       	movw	r18, r28
    28c8:	20 5a       	subi	r18, 0xA0	; 160
    28ca:	3f 4f       	sbci	r19, 0xFF	; 255
    28cc:	80 e0       	ldi	r24, 0x00	; 0
    28ce:	90 e0       	ldi	r25, 0x00	; 0
    28d0:	aa e7       	ldi	r26, 0x7A	; 122
    28d2:	b4 e4       	ldi	r27, 0x44	; 68
    28d4:	f9 01       	movw	r30, r18
    28d6:	80 83       	st	Z, r24
    28d8:	91 83       	std	Z+1, r25	; 0x01
    28da:	a2 83       	std	Z+2, r26	; 0x02
    28dc:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    28de:	8e 01       	movw	r16, r28
    28e0:	0c 59       	subi	r16, 0x9C	; 156
    28e2:	1f 4f       	sbci	r17, 0xFF	; 255
    28e4:	ce 01       	movw	r24, r28
    28e6:	80 5a       	subi	r24, 0xA0	; 160
    28e8:	9f 4f       	sbci	r25, 0xFF	; 255
    28ea:	fc 01       	movw	r30, r24
    28ec:	60 81       	ld	r22, Z
    28ee:	71 81       	ldd	r23, Z+1	; 0x01
    28f0:	82 81       	ldd	r24, Z+2	; 0x02
    28f2:	93 81       	ldd	r25, Z+3	; 0x03
    28f4:	20 e0       	ldi	r18, 0x00	; 0
    28f6:	30 e8       	ldi	r19, 0x80	; 128
    28f8:	4b e3       	ldi	r20, 0x3B	; 59
    28fa:	55 e4       	ldi	r21, 0x45	; 69
    28fc:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <__mulsf3>
    2900:	dc 01       	movw	r26, r24
    2902:	cb 01       	movw	r24, r22
    2904:	f8 01       	movw	r30, r16
    2906:	80 83       	st	Z, r24
    2908:	91 83       	std	Z+1, r25	; 0x01
    290a:	a2 83       	std	Z+2, r26	; 0x02
    290c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    290e:	ce 01       	movw	r24, r28
    2910:	8c 59       	subi	r24, 0x9C	; 156
    2912:	9f 4f       	sbci	r25, 0xFF	; 255
    2914:	11 e0       	ldi	r17, 0x01	; 1
    2916:	fc 01       	movw	r30, r24
    2918:	60 81       	ld	r22, Z
    291a:	71 81       	ldd	r23, Z+1	; 0x01
    291c:	82 81       	ldd	r24, Z+2	; 0x02
    291e:	93 81       	ldd	r25, Z+3	; 0x03
    2920:	20 e0       	ldi	r18, 0x00	; 0
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	40 e8       	ldi	r20, 0x80	; 128
    2926:	5f e3       	ldi	r21, 0x3F	; 63
    2928:	0e 94 ae 1c 	call	0x395c	; 0x395c <__ltsf2>
    292c:	88 23       	and	r24, r24
    292e:	0c f0       	brlt	.+2      	; 0x2932 <main+0xd52>
    2930:	10 e0       	ldi	r17, 0x00	; 0
    2932:	11 23       	and	r17, r17
    2934:	49 f0       	breq	.+18     	; 0x2948 <main+0xd68>
		__ticks = 1;
    2936:	ce 01       	movw	r24, r28
    2938:	88 59       	subi	r24, 0x98	; 152
    293a:	9f 4f       	sbci	r25, 0xFF	; 255
    293c:	21 e0       	ldi	r18, 0x01	; 1
    293e:	30 e0       	ldi	r19, 0x00	; 0
    2940:	fc 01       	movw	r30, r24
    2942:	31 83       	std	Z+1, r19	; 0x01
    2944:	20 83       	st	Z, r18
    2946:	74 c0       	rjmp	.+232    	; 0x2a30 <main+0xe50>
	else if (__tmp > 65535)
    2948:	ce 01       	movw	r24, r28
    294a:	8c 59       	subi	r24, 0x9C	; 156
    294c:	9f 4f       	sbci	r25, 0xFF	; 255
    294e:	11 e0       	ldi	r17, 0x01	; 1
    2950:	fc 01       	movw	r30, r24
    2952:	60 81       	ld	r22, Z
    2954:	71 81       	ldd	r23, Z+1	; 0x01
    2956:	82 81       	ldd	r24, Z+2	; 0x02
    2958:	93 81       	ldd	r25, Z+3	; 0x03
    295a:	20 e0       	ldi	r18, 0x00	; 0
    295c:	3f ef       	ldi	r19, 0xFF	; 255
    295e:	4f e7       	ldi	r20, 0x7F	; 127
    2960:	57 e4       	ldi	r21, 0x47	; 71
    2962:	0e 94 4e 1c 	call	0x389c	; 0x389c <__gtsf2>
    2966:	18 16       	cp	r1, r24
    2968:	0c f0       	brlt	.+2      	; 0x296c <main+0xd8c>
    296a:	10 e0       	ldi	r17, 0x00	; 0
    296c:	11 23       	and	r17, r17
    296e:	09 f4       	brne	.+2      	; 0x2972 <main+0xd92>
    2970:	4d c0       	rjmp	.+154    	; 0x2a0c <main+0xe2c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2972:	ce 01       	movw	r24, r28
    2974:	80 5a       	subi	r24, 0xA0	; 160
    2976:	9f 4f       	sbci	r25, 0xFF	; 255
    2978:	fc 01       	movw	r30, r24
    297a:	60 81       	ld	r22, Z
    297c:	71 81       	ldd	r23, Z+1	; 0x01
    297e:	82 81       	ldd	r24, Z+2	; 0x02
    2980:	93 81       	ldd	r25, Z+3	; 0x03
    2982:	20 e0       	ldi	r18, 0x00	; 0
    2984:	30 e0       	ldi	r19, 0x00	; 0
    2986:	40 e2       	ldi	r20, 0x20	; 32
    2988:	51 e4       	ldi	r21, 0x41	; 65
    298a:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <__mulsf3>
    298e:	dc 01       	movw	r26, r24
    2990:	cb 01       	movw	r24, r22
    2992:	8e 01       	movw	r16, r28
    2994:	08 59       	subi	r16, 0x98	; 152
    2996:	1f 4f       	sbci	r17, 0xFF	; 255
    2998:	bc 01       	movw	r22, r24
    299a:	cd 01       	movw	r24, r26
    299c:	0e 94 80 19 	call	0x3300	; 0x3300 <__fixunssfsi>
    29a0:	dc 01       	movw	r26, r24
    29a2:	cb 01       	movw	r24, r22
    29a4:	f8 01       	movw	r30, r16
    29a6:	91 83       	std	Z+1, r25	; 0x01
    29a8:	80 83       	st	Z, r24
    29aa:	27 c0       	rjmp	.+78     	; 0x29fa <main+0xe1a>
    29ac:	ce 01       	movw	r24, r28
    29ae:	86 59       	subi	r24, 0x96	; 150
    29b0:	9f 4f       	sbci	r25, 0xFF	; 255
    29b2:	2c e2       	ldi	r18, 0x2C	; 44
    29b4:	31 e0       	ldi	r19, 0x01	; 1
    29b6:	fc 01       	movw	r30, r24
    29b8:	31 83       	std	Z+1, r19	; 0x01
    29ba:	20 83       	st	Z, r18
    29bc:	ce 01       	movw	r24, r28
    29be:	86 59       	subi	r24, 0x96	; 150
    29c0:	9f 4f       	sbci	r25, 0xFF	; 255
    29c2:	fc 01       	movw	r30, r24
    29c4:	80 81       	ld	r24, Z
    29c6:	91 81       	ldd	r25, Z+1	; 0x01
    29c8:	8c 01       	movw	r16, r24
    29ca:	c8 01       	movw	r24, r16
    29cc:	01 97       	sbiw	r24, 0x01	; 1
    29ce:	f1 f7       	brne	.-4      	; 0x29cc <main+0xdec>
    29d0:	8c 01       	movw	r16, r24
    29d2:	ce 01       	movw	r24, r28
    29d4:	86 59       	subi	r24, 0x96	; 150
    29d6:	9f 4f       	sbci	r25, 0xFF	; 255
    29d8:	fc 01       	movw	r30, r24
    29da:	11 83       	std	Z+1, r17	; 0x01
    29dc:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29de:	ce 01       	movw	r24, r28
    29e0:	88 59       	subi	r24, 0x98	; 152
    29e2:	9f 4f       	sbci	r25, 0xFF	; 255
    29e4:	9e 01       	movw	r18, r28
    29e6:	28 59       	subi	r18, 0x98	; 152
    29e8:	3f 4f       	sbci	r19, 0xFF	; 255
    29ea:	f9 01       	movw	r30, r18
    29ec:	20 81       	ld	r18, Z
    29ee:	31 81       	ldd	r19, Z+1	; 0x01
    29f0:	21 50       	subi	r18, 0x01	; 1
    29f2:	30 40       	sbci	r19, 0x00	; 0
    29f4:	fc 01       	movw	r30, r24
    29f6:	31 83       	std	Z+1, r19	; 0x01
    29f8:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29fa:	ce 01       	movw	r24, r28
    29fc:	88 59       	subi	r24, 0x98	; 152
    29fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2a00:	fc 01       	movw	r30, r24
    2a02:	80 81       	ld	r24, Z
    2a04:	91 81       	ldd	r25, Z+1	; 0x01
    2a06:	00 97       	sbiw	r24, 0x00	; 0
    2a08:	89 f6       	brne	.-94     	; 0x29ac <main+0xdcc>
    2a0a:	2f c0       	rjmp	.+94     	; 0x2a6a <main+0xe8a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a0c:	8e 01       	movw	r16, r28
    2a0e:	08 59       	subi	r16, 0x98	; 152
    2a10:	1f 4f       	sbci	r17, 0xFF	; 255
    2a12:	ce 01       	movw	r24, r28
    2a14:	8c 59       	subi	r24, 0x9C	; 156
    2a16:	9f 4f       	sbci	r25, 0xFF	; 255
    2a18:	fc 01       	movw	r30, r24
    2a1a:	60 81       	ld	r22, Z
    2a1c:	71 81       	ldd	r23, Z+1	; 0x01
    2a1e:	82 81       	ldd	r24, Z+2	; 0x02
    2a20:	93 81       	ldd	r25, Z+3	; 0x03
    2a22:	0e 94 80 19 	call	0x3300	; 0x3300 <__fixunssfsi>
    2a26:	dc 01       	movw	r26, r24
    2a28:	cb 01       	movw	r24, r22
    2a2a:	f8 01       	movw	r30, r16
    2a2c:	91 83       	std	Z+1, r25	; 0x01
    2a2e:	80 83       	st	Z, r24
    2a30:	ce 01       	movw	r24, r28
    2a32:	84 59       	subi	r24, 0x94	; 148
    2a34:	9f 4f       	sbci	r25, 0xFF	; 255
    2a36:	9e 01       	movw	r18, r28
    2a38:	28 59       	subi	r18, 0x98	; 152
    2a3a:	3f 4f       	sbci	r19, 0xFF	; 255
    2a3c:	f9 01       	movw	r30, r18
    2a3e:	20 81       	ld	r18, Z
    2a40:	31 81       	ldd	r19, Z+1	; 0x01
    2a42:	fc 01       	movw	r30, r24
    2a44:	31 83       	std	Z+1, r19	; 0x01
    2a46:	20 83       	st	Z, r18
    2a48:	ce 01       	movw	r24, r28
    2a4a:	84 59       	subi	r24, 0x94	; 148
    2a4c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a4e:	fc 01       	movw	r30, r24
    2a50:	80 81       	ld	r24, Z
    2a52:	91 81       	ldd	r25, Z+1	; 0x01
    2a54:	8c 01       	movw	r16, r24
    2a56:	c8 01       	movw	r24, r16
    2a58:	01 97       	sbiw	r24, 0x01	; 1
    2a5a:	f1 f7       	brne	.-4      	; 0x2a58 <main+0xe78>
    2a5c:	8c 01       	movw	r16, r24
    2a5e:	ce 01       	movw	r24, r28
    2a60:	84 59       	subi	r24, 0x94	; 148
    2a62:	9f 4f       	sbci	r25, 0xFF	; 255
    2a64:	fc 01       	movw	r30, r24
    2a66:	11 83       	std	Z+1, r17	; 0x01
    2a68:	00 83       	st	Z, r16
			//@2 reset EEPROM
			//@2 (reset EEPROM) complete

			_delay_ms(1000);

			msgNumber = -1;
    2a6a:	8f ef       	ldi	r24, 0xFF	; 255
    2a6c:	80 93 60 00 	sts	0x0060, r24
			msgNumber1 = -1;
    2a70:	8f ef       	ldi	r24, 0xFF	; 255
    2a72:	80 93 61 00 	sts	0x0061, r24
			msgReceived = 0;
    2a76:	10 92 fa 03 	sts	0x03FA, r1
			msgReceived = 0;
			/***********************************************************************/

			ringReceived = 0;
		}
	}
    2a7a:	18 ca       	rjmp	.-3024   	; 0x1eac <main+0x2cc>
			_delay_ms(1000);

			msgNumber = -1;
			msgNumber1 = -1;
			msgReceived = 0;
		} else if (ringReceived == 1){
    2a7c:	80 91 fb 03 	lds	r24, 0x03FB
    2a80:	81 30       	cpi	r24, 0x01	; 1
    2a82:	09 f0       	breq	.+2      	; 0x2a86 <main+0xea6>
    2a84:	12 ca       	rjmp	.-3036   	; 0x1eaa <main+0x2ca>
			//RING received
			LCDClear();
    2a86:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCDClear>
			LCDPrintLines("Message Received:","dummy message");
    2a8a:	89 ec       	ldi	r24, 0xC9	; 201
    2a8c:	92 e0       	ldi	r25, 0x02	; 2
    2a8e:	2b ed       	ldi	r18, 0xDB	; 219
    2a90:	32 e0       	ldi	r19, 0x02	; 2
    2a92:	b9 01       	movw	r22, r18
    2a94:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <LCDPrintLines>
    2a98:	9e 01       	movw	r18, r28
    2a9a:	22 59       	subi	r18, 0x92	; 146
    2a9c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a9e:	80 e0       	ldi	r24, 0x00	; 0
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	a8 e4       	ldi	r26, 0x48	; 72
    2aa4:	b3 e4       	ldi	r27, 0x43	; 67
    2aa6:	f9 01       	movw	r30, r18
    2aa8:	80 83       	st	Z, r24
    2aaa:	91 83       	std	Z+1, r25	; 0x01
    2aac:	a2 83       	std	Z+2, r26	; 0x02
    2aae:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    2ab0:	8e 01       	movw	r16, r28
    2ab2:	0e 58       	subi	r16, 0x8E	; 142
    2ab4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ab6:	ce 01       	movw	r24, r28
    2ab8:	82 59       	subi	r24, 0x92	; 146
    2aba:	9f 4f       	sbci	r25, 0xFF	; 255
    2abc:	fc 01       	movw	r30, r24
    2abe:	60 81       	ld	r22, Z
    2ac0:	71 81       	ldd	r23, Z+1	; 0x01
    2ac2:	82 81       	ldd	r24, Z+2	; 0x02
    2ac4:	93 81       	ldd	r25, Z+3	; 0x03
    2ac6:	20 e0       	ldi	r18, 0x00	; 0
    2ac8:	30 e8       	ldi	r19, 0x80	; 128
    2aca:	4b e3       	ldi	r20, 0x3B	; 59
    2acc:	55 e4       	ldi	r21, 0x45	; 69
    2ace:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <__mulsf3>
    2ad2:	dc 01       	movw	r26, r24
    2ad4:	cb 01       	movw	r24, r22
    2ad6:	f8 01       	movw	r30, r16
    2ad8:	80 83       	st	Z, r24
    2ada:	91 83       	std	Z+1, r25	; 0x01
    2adc:	a2 83       	std	Z+2, r26	; 0x02
    2ade:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ae0:	ce 01       	movw	r24, r28
    2ae2:	8e 58       	subi	r24, 0x8E	; 142
    2ae4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ae6:	11 e0       	ldi	r17, 0x01	; 1
    2ae8:	fc 01       	movw	r30, r24
    2aea:	60 81       	ld	r22, Z
    2aec:	71 81       	ldd	r23, Z+1	; 0x01
    2aee:	82 81       	ldd	r24, Z+2	; 0x02
    2af0:	93 81       	ldd	r25, Z+3	; 0x03
    2af2:	20 e0       	ldi	r18, 0x00	; 0
    2af4:	30 e0       	ldi	r19, 0x00	; 0
    2af6:	40 e8       	ldi	r20, 0x80	; 128
    2af8:	5f e3       	ldi	r21, 0x3F	; 63
    2afa:	0e 94 ae 1c 	call	0x395c	; 0x395c <__ltsf2>
    2afe:	88 23       	and	r24, r24
    2b00:	0c f0       	brlt	.+2      	; 0x2b04 <main+0xf24>
    2b02:	10 e0       	ldi	r17, 0x00	; 0
    2b04:	11 23       	and	r17, r17
    2b06:	49 f0       	breq	.+18     	; 0x2b1a <main+0xf3a>
		__ticks = 1;
    2b08:	ce 01       	movw	r24, r28
    2b0a:	8a 58       	subi	r24, 0x8A	; 138
    2b0c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b0e:	21 e0       	ldi	r18, 0x01	; 1
    2b10:	30 e0       	ldi	r19, 0x00	; 0
    2b12:	fc 01       	movw	r30, r24
    2b14:	31 83       	std	Z+1, r19	; 0x01
    2b16:	20 83       	st	Z, r18
    2b18:	74 c0       	rjmp	.+232    	; 0x2c02 <main+0x1022>
	else if (__tmp > 65535)
    2b1a:	ce 01       	movw	r24, r28
    2b1c:	8e 58       	subi	r24, 0x8E	; 142
    2b1e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b20:	11 e0       	ldi	r17, 0x01	; 1
    2b22:	fc 01       	movw	r30, r24
    2b24:	60 81       	ld	r22, Z
    2b26:	71 81       	ldd	r23, Z+1	; 0x01
    2b28:	82 81       	ldd	r24, Z+2	; 0x02
    2b2a:	93 81       	ldd	r25, Z+3	; 0x03
    2b2c:	20 e0       	ldi	r18, 0x00	; 0
    2b2e:	3f ef       	ldi	r19, 0xFF	; 255
    2b30:	4f e7       	ldi	r20, 0x7F	; 127
    2b32:	57 e4       	ldi	r21, 0x47	; 71
    2b34:	0e 94 4e 1c 	call	0x389c	; 0x389c <__gtsf2>
    2b38:	18 16       	cp	r1, r24
    2b3a:	0c f0       	brlt	.+2      	; 0x2b3e <main+0xf5e>
    2b3c:	10 e0       	ldi	r17, 0x00	; 0
    2b3e:	11 23       	and	r17, r17
    2b40:	09 f4       	brne	.+2      	; 0x2b44 <main+0xf64>
    2b42:	4d c0       	rjmp	.+154    	; 0x2bde <main+0xffe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b44:	ce 01       	movw	r24, r28
    2b46:	82 59       	subi	r24, 0x92	; 146
    2b48:	9f 4f       	sbci	r25, 0xFF	; 255
    2b4a:	fc 01       	movw	r30, r24
    2b4c:	60 81       	ld	r22, Z
    2b4e:	71 81       	ldd	r23, Z+1	; 0x01
    2b50:	82 81       	ldd	r24, Z+2	; 0x02
    2b52:	93 81       	ldd	r25, Z+3	; 0x03
    2b54:	20 e0       	ldi	r18, 0x00	; 0
    2b56:	30 e0       	ldi	r19, 0x00	; 0
    2b58:	40 e2       	ldi	r20, 0x20	; 32
    2b5a:	51 e4       	ldi	r21, 0x41	; 65
    2b5c:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <__mulsf3>
    2b60:	dc 01       	movw	r26, r24
    2b62:	cb 01       	movw	r24, r22
    2b64:	8e 01       	movw	r16, r28
    2b66:	0a 58       	subi	r16, 0x8A	; 138
    2b68:	1f 4f       	sbci	r17, 0xFF	; 255
    2b6a:	bc 01       	movw	r22, r24
    2b6c:	cd 01       	movw	r24, r26
    2b6e:	0e 94 80 19 	call	0x3300	; 0x3300 <__fixunssfsi>
    2b72:	dc 01       	movw	r26, r24
    2b74:	cb 01       	movw	r24, r22
    2b76:	f8 01       	movw	r30, r16
    2b78:	91 83       	std	Z+1, r25	; 0x01
    2b7a:	80 83       	st	Z, r24
    2b7c:	27 c0       	rjmp	.+78     	; 0x2bcc <main+0xfec>
    2b7e:	ce 01       	movw	r24, r28
    2b80:	88 58       	subi	r24, 0x88	; 136
    2b82:	9f 4f       	sbci	r25, 0xFF	; 255
    2b84:	2c e2       	ldi	r18, 0x2C	; 44
    2b86:	31 e0       	ldi	r19, 0x01	; 1
    2b88:	fc 01       	movw	r30, r24
    2b8a:	31 83       	std	Z+1, r19	; 0x01
    2b8c:	20 83       	st	Z, r18
    2b8e:	ce 01       	movw	r24, r28
    2b90:	88 58       	subi	r24, 0x88	; 136
    2b92:	9f 4f       	sbci	r25, 0xFF	; 255
    2b94:	fc 01       	movw	r30, r24
    2b96:	80 81       	ld	r24, Z
    2b98:	91 81       	ldd	r25, Z+1	; 0x01
    2b9a:	8c 01       	movw	r16, r24
    2b9c:	c8 01       	movw	r24, r16
    2b9e:	01 97       	sbiw	r24, 0x01	; 1
    2ba0:	f1 f7       	brne	.-4      	; 0x2b9e <main+0xfbe>
    2ba2:	8c 01       	movw	r16, r24
    2ba4:	ce 01       	movw	r24, r28
    2ba6:	88 58       	subi	r24, 0x88	; 136
    2ba8:	9f 4f       	sbci	r25, 0xFF	; 255
    2baa:	fc 01       	movw	r30, r24
    2bac:	11 83       	std	Z+1, r17	; 0x01
    2bae:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bb0:	ce 01       	movw	r24, r28
    2bb2:	8a 58       	subi	r24, 0x8A	; 138
    2bb4:	9f 4f       	sbci	r25, 0xFF	; 255
    2bb6:	9e 01       	movw	r18, r28
    2bb8:	2a 58       	subi	r18, 0x8A	; 138
    2bba:	3f 4f       	sbci	r19, 0xFF	; 255
    2bbc:	f9 01       	movw	r30, r18
    2bbe:	20 81       	ld	r18, Z
    2bc0:	31 81       	ldd	r19, Z+1	; 0x01
    2bc2:	21 50       	subi	r18, 0x01	; 1
    2bc4:	30 40       	sbci	r19, 0x00	; 0
    2bc6:	fc 01       	movw	r30, r24
    2bc8:	31 83       	std	Z+1, r19	; 0x01
    2bca:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bcc:	ce 01       	movw	r24, r28
    2bce:	8a 58       	subi	r24, 0x8A	; 138
    2bd0:	9f 4f       	sbci	r25, 0xFF	; 255
    2bd2:	fc 01       	movw	r30, r24
    2bd4:	80 81       	ld	r24, Z
    2bd6:	91 81       	ldd	r25, Z+1	; 0x01
    2bd8:	00 97       	sbiw	r24, 0x00	; 0
    2bda:	89 f6       	brne	.-94     	; 0x2b7e <main+0xf9e>
    2bdc:	2f c0       	rjmp	.+94     	; 0x2c3c <main+0x105c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bde:	8e 01       	movw	r16, r28
    2be0:	0a 58       	subi	r16, 0x8A	; 138
    2be2:	1f 4f       	sbci	r17, 0xFF	; 255
    2be4:	ce 01       	movw	r24, r28
    2be6:	8e 58       	subi	r24, 0x8E	; 142
    2be8:	9f 4f       	sbci	r25, 0xFF	; 255
    2bea:	fc 01       	movw	r30, r24
    2bec:	60 81       	ld	r22, Z
    2bee:	71 81       	ldd	r23, Z+1	; 0x01
    2bf0:	82 81       	ldd	r24, Z+2	; 0x02
    2bf2:	93 81       	ldd	r25, Z+3	; 0x03
    2bf4:	0e 94 80 19 	call	0x3300	; 0x3300 <__fixunssfsi>
    2bf8:	dc 01       	movw	r26, r24
    2bfa:	cb 01       	movw	r24, r22
    2bfc:	f8 01       	movw	r30, r16
    2bfe:	91 83       	std	Z+1, r25	; 0x01
    2c00:	80 83       	st	Z, r24
    2c02:	ce 01       	movw	r24, r28
    2c04:	86 58       	subi	r24, 0x86	; 134
    2c06:	9f 4f       	sbci	r25, 0xFF	; 255
    2c08:	9e 01       	movw	r18, r28
    2c0a:	2a 58       	subi	r18, 0x8A	; 138
    2c0c:	3f 4f       	sbci	r19, 0xFF	; 255
    2c0e:	f9 01       	movw	r30, r18
    2c10:	20 81       	ld	r18, Z
    2c12:	31 81       	ldd	r19, Z+1	; 0x01
    2c14:	fc 01       	movw	r30, r24
    2c16:	31 83       	std	Z+1, r19	; 0x01
    2c18:	20 83       	st	Z, r18
    2c1a:	ce 01       	movw	r24, r28
    2c1c:	86 58       	subi	r24, 0x86	; 134
    2c1e:	9f 4f       	sbci	r25, 0xFF	; 255
    2c20:	fc 01       	movw	r30, r24
    2c22:	80 81       	ld	r24, Z
    2c24:	91 81       	ldd	r25, Z+1	; 0x01
    2c26:	8c 01       	movw	r16, r24
    2c28:	c8 01       	movw	r24, r16
    2c2a:	01 97       	sbiw	r24, 0x01	; 1
    2c2c:	f1 f7       	brne	.-4      	; 0x2c2a <main+0x104a>
    2c2e:	8c 01       	movw	r16, r24
    2c30:	ce 01       	movw	r24, r28
    2c32:	86 58       	subi	r24, 0x86	; 134
    2c34:	9f 4f       	sbci	r25, 0xFF	; 255
    2c36:	fc 01       	movw	r30, r24
    2c38:	11 83       	std	Z+1, r17	; 0x01
    2c3a:	00 83       	st	Z, r16
			/******** read message and process on it **************/

			//@1 set EEPROM
			//@1 (set EEPROM) complete

			okComplete = 1;
    2c3c:	81 e0       	ldi	r24, 0x01	; 1
    2c3e:	80 93 f8 02 	sts	0x02F8, r24
			strCpy((char*)newBuffer, (char*)buffer);
    2c42:	85 e8       	ldi	r24, 0x85	; 133
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	2b ef       	ldi	r18, 0xFB	; 251
    2c48:	32 e0       	ldi	r19, 0x02	; 2
    2c4a:	b9 01       	movw	r22, r18
    2c4c:	0e 94 1f 0a 	call	0x143e	; 0x143e <strCpy>
			if (okComplete == 1){
    2c50:	80 91 f8 02 	lds	r24, 0x02F8
    2c54:	81 30       	cpi	r24, 0x01	; 1
    2c56:	09 f0       	breq	.+2      	; 0x2c5a <main+0x107a>
    2c58:	65 c2       	rjmp	.+1226   	; 0x3124 <main+0x1544>
				/*********** AT+CMGR value received in buffer *********/

				/*********** check for user number ********************/
				if (authCheck){
    2c5a:	80 91 00 04 	lds	r24, 0x0400
    2c5e:	88 23       	and	r24, r24
    2c60:	09 f4       	brne	.+2      	; 0x2c64 <main+0x1084>
    2c62:	4d c0       	rjmp	.+154    	; 0x2cfe <main+0x111e>
				userNo = split((char *) buffer, "\"", &userNoCounter);
    2c64:	8b ef       	ldi	r24, 0xFB	; 251
    2c66:	92 e0       	ldi	r25, 0x02	; 2
    2c68:	4d ed       	ldi	r20, 0xDD	; 221
    2c6a:	51 e0       	ldi	r21, 0x01	; 1
    2c6c:	9e 01       	movw	r18, r28
    2c6e:	26 56       	subi	r18, 0x66	; 102
    2c70:	3f 4f       	sbci	r19, 0xFF	; 255
    2c72:	ba 01       	movw	r22, r20
    2c74:	a9 01       	movw	r20, r18
    2c76:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <split>
    2c7a:	9f 83       	std	Y+7, r25	; 0x07
    2c7c:	8e 83       	std	Y+6, r24	; 0x06
				if (equals(userNo[3], AUTH_PHONENO) == 0){
    2c7e:	8e 81       	ldd	r24, Y+6	; 0x06
    2c80:	9f 81       	ldd	r25, Y+7	; 0x07
    2c82:	06 96       	adiw	r24, 0x06	; 6
    2c84:	fc 01       	movw	r30, r24
    2c86:	80 81       	ld	r24, Z
    2c88:	91 81       	ldd	r25, Z+1	; 0x01
    2c8a:	20 91 72 00 	lds	r18, 0x0072
    2c8e:	30 91 73 00 	lds	r19, 0x0073
    2c92:	b9 01       	movw	r22, r18
    2c94:	0e 94 94 09 	call	0x1328	; 0x1328 <equals>
    2c98:	88 23       	and	r24, r24
    2c9a:	31 f5       	brne	.+76     	; 0x2ce8 <main+0x1108>
					freeSplitedString(userNo, userNoCounter);
    2c9c:	ce 01       	movw	r24, r28
    2c9e:	86 56       	subi	r24, 0x66	; 102
    2ca0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ca2:	fc 01       	movw	r30, r24
    2ca4:	20 81       	ld	r18, Z
    2ca6:	31 81       	ldd	r19, Z+1	; 0x01
    2ca8:	8e 81       	ldd	r24, Y+6	; 0x06
    2caa:	9f 81       	ldd	r25, Y+7	; 0x07
    2cac:	b9 01       	movw	r22, r18
    2cae:	0e 94 04 0b 	call	0x1608	; 0x1608 <freeSplitedString>
					sendMessage1 (phoneNo, "Unknown number detected: ", userNo[3], 2);
    2cb2:	80 91 83 00 	lds	r24, 0x0083
    2cb6:	90 91 84 00 	lds	r25, 0x0084
    2cba:	2e 81       	ldd	r18, Y+6	; 0x06
    2cbc:	3f 81       	ldd	r19, Y+7	; 0x07
    2cbe:	2a 5f       	subi	r18, 0xFA	; 250
    2cc0:	3f 4f       	sbci	r19, 0xFF	; 255
    2cc2:	f9 01       	movw	r30, r18
    2cc4:	20 81       	ld	r18, Z
    2cc6:	31 81       	ldd	r19, Z+1	; 0x01
    2cc8:	4f ed       	ldi	r20, 0xDF	; 223
    2cca:	51 e0       	ldi	r21, 0x01	; 1
    2ccc:	ba 01       	movw	r22, r20
    2cce:	a9 01       	movw	r20, r18
    2cd0:	22 e0       	ldi	r18, 0x02	; 2
    2cd2:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <sendMessage1>
					msgReceived = 0;
    2cd6:	10 92 fa 03 	sts	0x03FA, r1
					msgNumber = -1;
    2cda:	8f ef       	ldi	r24, 0xFF	; 255
    2cdc:	80 93 60 00 	sts	0x0060, r24
					msgNumber1 = -1;
    2ce0:	8f ef       	ldi	r24, 0xFF	; 255
    2ce2:	80 93 61 00 	sts	0x0061, r24
					continue;
    2ce6:	0a c3       	rjmp	.+1556   	; 0x32fc <main+0x171c>
				}
				freeSplitedString(userNo, userNoCounter);
    2ce8:	ce 01       	movw	r24, r28
    2cea:	86 56       	subi	r24, 0x66	; 102
    2cec:	9f 4f       	sbci	r25, 0xFF	; 255
    2cee:	fc 01       	movw	r30, r24
    2cf0:	20 81       	ld	r18, Z
    2cf2:	31 81       	ldd	r19, Z+1	; 0x01
    2cf4:	8e 81       	ldd	r24, Y+6	; 0x06
    2cf6:	9f 81       	ldd	r25, Y+7	; 0x07
    2cf8:	b9 01       	movw	r22, r18
    2cfa:	0e 94 04 0b 	call	0x1608	; 0x1608 <freeSplitedString>
				/******************************************************/

				/********** Check for message format ******************/
				//@1 Spliting message
				char *tempA2Lower;
				a = split((char*) buffer, checkPattern, (int *)&counter);
    2cfe:	8b ef       	ldi	r24, 0xFB	; 251
    2d00:	92 e0       	ldi	r25, 0x02	; 2
    2d02:	49 ef       	ldi	r20, 0xF9	; 249
    2d04:	51 e0       	ldi	r21, 0x01	; 1
    2d06:	2d ef       	ldi	r18, 0xFD	; 253
    2d08:	33 e0       	ldi	r19, 0x03	; 3
    2d0a:	ba 01       	movw	r22, r20
    2d0c:	a9 01       	movw	r20, r18
    2d0e:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <split>
    2d12:	99 87       	std	Y+9, r25	; 0x09
    2d14:	88 87       	std	Y+8, r24	; 0x08

				tempA2Lower = toLower(a[2]);
    2d16:	88 85       	ldd	r24, Y+8	; 0x08
    2d18:	99 85       	ldd	r25, Y+9	; 0x09
    2d1a:	04 96       	adiw	r24, 0x04	; 4
    2d1c:	fc 01       	movw	r30, r24
    2d1e:	80 81       	ld	r24, Z
    2d20:	91 81       	ldd	r25, Z+1	; 0x01
    2d22:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <toLower>
    2d26:	9b 8b       	std	Y+19, r25	; 0x13
    2d28:	8a 8b       	std	Y+18, r24	; 0x12
				free(a[2]);
    2d2a:	88 85       	ldd	r24, Y+8	; 0x08
    2d2c:	99 85       	ldd	r25, Y+9	; 0x09
    2d2e:	04 96       	adiw	r24, 0x04	; 4
    2d30:	fc 01       	movw	r30, r24
    2d32:	80 81       	ld	r24, Z
    2d34:	91 81       	ldd	r25, Z+1	; 0x01
    2d36:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <free>
				a[2] = tempA2Lower;
    2d3a:	88 85       	ldd	r24, Y+8	; 0x08
    2d3c:	99 85       	ldd	r25, Y+9	; 0x09
    2d3e:	04 96       	adiw	r24, 0x04	; 4
    2d40:	2a 89       	ldd	r18, Y+18	; 0x12
    2d42:	3b 89       	ldd	r19, Y+19	; 0x13
    2d44:	fc 01       	movw	r30, r24
    2d46:	31 83       	std	Z+1, r19	; 0x01
    2d48:	20 83       	st	Z, r18

				textContent = split (a[2], " ", &textContentCounter);
    2d4a:	88 85       	ldd	r24, Y+8	; 0x08
    2d4c:	99 85       	ldd	r25, Y+9	; 0x09
    2d4e:	04 96       	adiw	r24, 0x04	; 4
    2d50:	fc 01       	movw	r30, r24
    2d52:	80 81       	ld	r24, Z
    2d54:	91 81       	ldd	r25, Z+1	; 0x01
    2d56:	4c ef       	ldi	r20, 0xFC	; 252
    2d58:	51 e0       	ldi	r21, 0x01	; 1
    2d5a:	9e 01       	movw	r18, r28
    2d5c:	28 56       	subi	r18, 0x68	; 104
    2d5e:	3f 4f       	sbci	r19, 0xFF	; 255
    2d60:	ba 01       	movw	r22, r20
    2d62:	a9 01       	movw	r20, r18
    2d64:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <split>
    2d68:	9b 87       	std	Y+11, r25	; 0x0b
    2d6a:	8a 87       	std	Y+10, r24	; 0x0a

				pinCode = textContent[0];
    2d6c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d6e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d70:	fc 01       	movw	r30, r24
    2d72:	80 81       	ld	r24, Z
    2d74:	91 81       	ldd	r25, Z+1	; 0x01
    2d76:	90 93 02 04 	sts	0x0402, r25
    2d7a:	80 93 01 04 	sts	0x0401, r24
				vmCode = textContent[1];
    2d7e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d80:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d82:	02 96       	adiw	r24, 0x02	; 2
    2d84:	fc 01       	movw	r30, r24
    2d86:	80 81       	ld	r24, Z
    2d88:	91 81       	ldd	r25, Z+1	; 0x01
    2d8a:	90 93 06 04 	sts	0x0406, r25
    2d8e:	80 93 05 04 	sts	0x0405, r24
				productCode = textContent[2];
    2d92:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d94:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d96:	04 96       	adiw	r24, 0x04	; 4
    2d98:	fc 01       	movw	r30, r24
    2d9a:	80 81       	ld	r24, Z
    2d9c:	91 81       	ldd	r25, Z+1	; 0x01
    2d9e:	90 93 04 04 	sts	0x0404, r25
    2da2:	80 93 03 04 	sts	0x0403, r24
				//@1 Complete

				//@2 Check for 6 digit pinCode
				if (length(pinCode) == 6){
    2da6:	80 91 01 04 	lds	r24, 0x0401
    2daa:	90 91 02 04 	lds	r25, 0x0402
    2dae:	0e 94 18 08 	call	0x1030	; 0x1030 <length>
    2db2:	86 30       	cpi	r24, 0x06	; 6
    2db4:	91 05       	cpc	r25, r1
    2db6:	09 f0       	breq	.+2      	; 0x2dba <main+0x11da>
    2db8:	96 c1       	rjmp	.+812    	; 0x30e6 <main+0x1506>
					//@3 check for vmMachine code
					if (equals(vmCode, "vm001") == 1){
    2dba:	80 91 05 04 	lds	r24, 0x0405
    2dbe:	90 91 06 04 	lds	r25, 0x0406
    2dc2:	2e ef       	ldi	r18, 0xFE	; 254
    2dc4:	31 e0       	ldi	r19, 0x01	; 1
    2dc6:	b9 01       	movw	r22, r18
    2dc8:	0e 94 94 09 	call	0x1328	; 0x1328 <equals>
    2dcc:	81 30       	cpi	r24, 0x01	; 1
    2dce:	09 f0       	breq	.+2      	; 0x2dd2 <main+0x11f2>
    2dd0:	7f c1       	rjmp	.+766    	; 0x30d0 <main+0x14f0>
						//@4 check for itemcode
						char *subSubString;
						subSubString = subString(productCode, 0, 1);
    2dd2:	80 91 03 04 	lds	r24, 0x0403
    2dd6:	90 91 04 04 	lds	r25, 0x0404
    2dda:	60 e0       	ldi	r22, 0x00	; 0
    2ddc:	70 e0       	ldi	r23, 0x00	; 0
    2dde:	41 e0       	ldi	r20, 0x01	; 1
    2de0:	50 e0       	ldi	r21, 0x00	; 0
    2de2:	0e 94 47 09 	call	0x128e	; 0x128e <subString>
    2de6:	9d 8b       	std	Y+21, r25	; 0x15
    2de8:	8c 8b       	std	Y+20, r24	; 0x14
						if (equals(subSubString, "a")){
    2dea:	8c 89       	ldd	r24, Y+20	; 0x14
    2dec:	9d 89       	ldd	r25, Y+21	; 0x15
    2dee:	24 e0       	ldi	r18, 0x04	; 4
    2df0:	32 e0       	ldi	r19, 0x02	; 2
    2df2:	b9 01       	movw	r22, r18
    2df4:	0e 94 94 09 	call	0x1328	; 0x1328 <equals>
    2df8:	88 23       	and	r24, r24
    2dfa:	09 f4       	brne	.+2      	; 0x2dfe <main+0x121e>
    2dfc:	5a c1       	rjmp	.+692    	; 0x30b2 <main+0x14d2>
							char *subSubString2;

							//@5 check for productValue
							int productValue;
							subSubString2 = subString(productCode, 1, 2);
    2dfe:	80 91 03 04 	lds	r24, 0x0403
    2e02:	90 91 04 04 	lds	r25, 0x0404
    2e06:	61 e0       	ldi	r22, 0x01	; 1
    2e08:	70 e0       	ldi	r23, 0x00	; 0
    2e0a:	42 e0       	ldi	r20, 0x02	; 2
    2e0c:	50 e0       	ldi	r21, 0x00	; 0
    2e0e:	0e 94 47 09 	call	0x128e	; 0x128e <subString>
    2e12:	9f 8b       	std	Y+23, r25	; 0x17
    2e14:	8e 8b       	std	Y+22, r24	; 0x16
							productValue = toInteger(subSubString2);
    2e16:	8e 89       	ldd	r24, Y+22	; 0x16
    2e18:	9f 89       	ldd	r25, Y+23	; 0x17
    2e1a:	0e 94 c1 0c 	call	0x1982	; 0x1982 <toInteger>
    2e1e:	99 8f       	std	Y+25, r25	; 0x19
    2e20:	88 8f       	std	Y+24, r24	; 0x18
							if (productValue > 6 || productValue < 1){
    2e22:	88 8d       	ldd	r24, Y+24	; 0x18
    2e24:	99 8d       	ldd	r25, Y+25	; 0x19
    2e26:	87 30       	cpi	r24, 0x07	; 7
    2e28:	91 05       	cpc	r25, r1
    2e2a:	2c f4       	brge	.+10     	; 0x2e36 <main+0x1256>
    2e2c:	88 8d       	ldd	r24, Y+24	; 0x18
    2e2e:	99 8d       	ldd	r25, Y+25	; 0x19
    2e30:	18 16       	cp	r1, r24
    2e32:	19 06       	cpc	r1, r25
    2e34:	5c f0       	brlt	.+22     	; 0x2e4c <main+0x126c>
								/**** unavailable product ***********/
								LCDPrintLines("Error: ", "unavailable product");
    2e36:	8a e1       	ldi	r24, 0x1A	; 26
    2e38:	92 e0       	ldi	r25, 0x02	; 2
    2e3a:	26 e0       	ldi	r18, 0x06	; 6
    2e3c:	32 e0       	ldi	r19, 0x02	; 2
    2e3e:	b9 01       	movw	r22, r18
    2e40:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <LCDPrintLines>
								whatIsGoingOn = ERRORA;
    2e44:	89 e0       	ldi	r24, 0x09	; 9
    2e46:	80 93 ff 03 	sts	0x03FF, r24
    2e4a:	2e c1       	rjmp	.+604    	; 0x30a8 <main+0x14c8>
								/************************************/
							} else {
								/******** Every thing is correct drop the product *****/
								//@6 drop the product and display in LCD
								PORTC = (1 << (5 - (productValue - 1)));
    2e4c:	85 e3       	ldi	r24, 0x35	; 53
    2e4e:	90 e0       	ldi	r25, 0x00	; 0
    2e50:	46 e0       	ldi	r20, 0x06	; 6
    2e52:	50 e0       	ldi	r21, 0x00	; 0
    2e54:	28 8d       	ldd	r18, Y+24	; 0x18
    2e56:	39 8d       	ldd	r19, Y+25	; 0x19
    2e58:	42 1b       	sub	r20, r18
    2e5a:	53 0b       	sbc	r21, r19
    2e5c:	21 e0       	ldi	r18, 0x01	; 1
    2e5e:	30 e0       	ldi	r19, 0x00	; 0
    2e60:	02 c0       	rjmp	.+4      	; 0x2e66 <main+0x1286>
    2e62:	22 0f       	add	r18, r18
    2e64:	33 1f       	adc	r19, r19
    2e66:	4a 95       	dec	r20
    2e68:	e2 f7       	brpl	.-8      	; 0x2e62 <main+0x1282>
    2e6a:	fc 01       	movw	r30, r24
    2e6c:	20 83       	st	Z, r18
								LCDPrintLines("Dropping", "Product: ");
    2e6e:	82 e2       	ldi	r24, 0x22	; 34
    2e70:	92 e0       	ldi	r25, 0x02	; 2
    2e72:	2b e2       	ldi	r18, 0x2B	; 43
    2e74:	32 e0       	ldi	r19, 0x02	; 2
    2e76:	b9 01       	movw	r22, r18
    2e78:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <LCDPrintLines>
								LCDPrint(subSubString2);
    2e7c:	8e 89       	ldd	r24, Y+22	; 0x16
    2e7e:	9f 89       	ldd	r25, Y+23	; 0x17
    2e80:	0e 94 b9 04 	call	0x972	; 0x972 <LCDPrint>
								//@6 (drop the product and display in LCD) complete

								//@7 start motor and count for 2 sec
								unsigned int fallCounter = 0;
    2e84:	1d 82       	std	Y+5, r1	; 0x05
    2e86:	1c 82       	std	Y+4, r1	; 0x04
								while ((!(bit_is_set(PINA, PA6))) && (!(bit_is_set(PINA, PA7)))) {
    2e88:	dd c0       	rjmp	.+442    	; 0x3044 <main+0x1464>
    2e8a:	9e 01       	movw	r18, r28
    2e8c:	24 58       	subi	r18, 0x84	; 132
    2e8e:	3f 4f       	sbci	r19, 0xFF	; 255
    2e90:	80 e0       	ldi	r24, 0x00	; 0
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	a0 e8       	ldi	r26, 0x80	; 128
    2e96:	bf e3       	ldi	r27, 0x3F	; 63
    2e98:	f9 01       	movw	r30, r18
    2e9a:	80 83       	st	Z, r24
    2e9c:	91 83       	std	Z+1, r25	; 0x01
    2e9e:	a2 83       	std	Z+2, r26	; 0x02
    2ea0:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    2ea2:	8e 01       	movw	r16, r28
    2ea4:	00 58       	subi	r16, 0x80	; 128
    2ea6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ea8:	ce 01       	movw	r24, r28
    2eaa:	84 58       	subi	r24, 0x84	; 132
    2eac:	9f 4f       	sbci	r25, 0xFF	; 255
    2eae:	fc 01       	movw	r30, r24
    2eb0:	60 81       	ld	r22, Z
    2eb2:	71 81       	ldd	r23, Z+1	; 0x01
    2eb4:	82 81       	ldd	r24, Z+2	; 0x02
    2eb6:	93 81       	ldd	r25, Z+3	; 0x03
    2eb8:	20 e0       	ldi	r18, 0x00	; 0
    2eba:	30 e8       	ldi	r19, 0x80	; 128
    2ebc:	4b e3       	ldi	r20, 0x3B	; 59
    2ebe:	55 e4       	ldi	r21, 0x45	; 69
    2ec0:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <__mulsf3>
    2ec4:	dc 01       	movw	r26, r24
    2ec6:	cb 01       	movw	r24, r22
    2ec8:	f8 01       	movw	r30, r16
    2eca:	80 83       	st	Z, r24
    2ecc:	91 83       	std	Z+1, r25	; 0x01
    2ece:	a2 83       	std	Z+2, r26	; 0x02
    2ed0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ed2:	ce 01       	movw	r24, r28
    2ed4:	80 58       	subi	r24, 0x80	; 128
    2ed6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ed8:	11 e0       	ldi	r17, 0x01	; 1
    2eda:	fc 01       	movw	r30, r24
    2edc:	60 81       	ld	r22, Z
    2ede:	71 81       	ldd	r23, Z+1	; 0x01
    2ee0:	82 81       	ldd	r24, Z+2	; 0x02
    2ee2:	93 81       	ldd	r25, Z+3	; 0x03
    2ee4:	20 e0       	ldi	r18, 0x00	; 0
    2ee6:	30 e0       	ldi	r19, 0x00	; 0
    2ee8:	40 e8       	ldi	r20, 0x80	; 128
    2eea:	5f e3       	ldi	r21, 0x3F	; 63
    2eec:	0e 94 ae 1c 	call	0x395c	; 0x395c <__ltsf2>
    2ef0:	88 23       	and	r24, r24
    2ef2:	0c f0       	brlt	.+2      	; 0x2ef6 <main+0x1316>
    2ef4:	10 e0       	ldi	r17, 0x00	; 0
    2ef6:	11 23       	and	r17, r17
    2ef8:	49 f0       	breq	.+18     	; 0x2f0c <main+0x132c>
		__ticks = 1;
    2efa:	ce 01       	movw	r24, r28
    2efc:	8c 57       	subi	r24, 0x7C	; 124
    2efe:	9f 4f       	sbci	r25, 0xFF	; 255
    2f00:	21 e0       	ldi	r18, 0x01	; 1
    2f02:	30 e0       	ldi	r19, 0x00	; 0
    2f04:	fc 01       	movw	r30, r24
    2f06:	31 83       	std	Z+1, r19	; 0x01
    2f08:	20 83       	st	Z, r18
    2f0a:	74 c0       	rjmp	.+232    	; 0x2ff4 <main+0x1414>
	else if (__tmp > 65535)
    2f0c:	ce 01       	movw	r24, r28
    2f0e:	80 58       	subi	r24, 0x80	; 128
    2f10:	9f 4f       	sbci	r25, 0xFF	; 255
    2f12:	11 e0       	ldi	r17, 0x01	; 1
    2f14:	fc 01       	movw	r30, r24
    2f16:	60 81       	ld	r22, Z
    2f18:	71 81       	ldd	r23, Z+1	; 0x01
    2f1a:	82 81       	ldd	r24, Z+2	; 0x02
    2f1c:	93 81       	ldd	r25, Z+3	; 0x03
    2f1e:	20 e0       	ldi	r18, 0x00	; 0
    2f20:	3f ef       	ldi	r19, 0xFF	; 255
    2f22:	4f e7       	ldi	r20, 0x7F	; 127
    2f24:	57 e4       	ldi	r21, 0x47	; 71
    2f26:	0e 94 4e 1c 	call	0x389c	; 0x389c <__gtsf2>
    2f2a:	18 16       	cp	r1, r24
    2f2c:	0c f0       	brlt	.+2      	; 0x2f30 <main+0x1350>
    2f2e:	10 e0       	ldi	r17, 0x00	; 0
    2f30:	11 23       	and	r17, r17
    2f32:	09 f4       	brne	.+2      	; 0x2f36 <main+0x1356>
    2f34:	4d c0       	rjmp	.+154    	; 0x2fd0 <main+0x13f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f36:	ce 01       	movw	r24, r28
    2f38:	84 58       	subi	r24, 0x84	; 132
    2f3a:	9f 4f       	sbci	r25, 0xFF	; 255
    2f3c:	fc 01       	movw	r30, r24
    2f3e:	60 81       	ld	r22, Z
    2f40:	71 81       	ldd	r23, Z+1	; 0x01
    2f42:	82 81       	ldd	r24, Z+2	; 0x02
    2f44:	93 81       	ldd	r25, Z+3	; 0x03
    2f46:	20 e0       	ldi	r18, 0x00	; 0
    2f48:	30 e0       	ldi	r19, 0x00	; 0
    2f4a:	40 e2       	ldi	r20, 0x20	; 32
    2f4c:	51 e4       	ldi	r21, 0x41	; 65
    2f4e:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <__mulsf3>
    2f52:	dc 01       	movw	r26, r24
    2f54:	cb 01       	movw	r24, r22
    2f56:	8e 01       	movw	r16, r28
    2f58:	0c 57       	subi	r16, 0x7C	; 124
    2f5a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f5c:	bc 01       	movw	r22, r24
    2f5e:	cd 01       	movw	r24, r26
    2f60:	0e 94 80 19 	call	0x3300	; 0x3300 <__fixunssfsi>
    2f64:	dc 01       	movw	r26, r24
    2f66:	cb 01       	movw	r24, r22
    2f68:	f8 01       	movw	r30, r16
    2f6a:	91 83       	std	Z+1, r25	; 0x01
    2f6c:	80 83       	st	Z, r24
    2f6e:	27 c0       	rjmp	.+78     	; 0x2fbe <main+0x13de>
    2f70:	ce 01       	movw	r24, r28
    2f72:	8a 57       	subi	r24, 0x7A	; 122
    2f74:	9f 4f       	sbci	r25, 0xFF	; 255
    2f76:	2c e2       	ldi	r18, 0x2C	; 44
    2f78:	31 e0       	ldi	r19, 0x01	; 1
    2f7a:	fc 01       	movw	r30, r24
    2f7c:	31 83       	std	Z+1, r19	; 0x01
    2f7e:	20 83       	st	Z, r18
    2f80:	ce 01       	movw	r24, r28
    2f82:	8a 57       	subi	r24, 0x7A	; 122
    2f84:	9f 4f       	sbci	r25, 0xFF	; 255
    2f86:	fc 01       	movw	r30, r24
    2f88:	80 81       	ld	r24, Z
    2f8a:	91 81       	ldd	r25, Z+1	; 0x01
    2f8c:	8c 01       	movw	r16, r24
    2f8e:	c8 01       	movw	r24, r16
    2f90:	01 97       	sbiw	r24, 0x01	; 1
    2f92:	f1 f7       	brne	.-4      	; 0x2f90 <main+0x13b0>
    2f94:	8c 01       	movw	r16, r24
    2f96:	ce 01       	movw	r24, r28
    2f98:	8a 57       	subi	r24, 0x7A	; 122
    2f9a:	9f 4f       	sbci	r25, 0xFF	; 255
    2f9c:	fc 01       	movw	r30, r24
    2f9e:	11 83       	std	Z+1, r17	; 0x01
    2fa0:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fa2:	ce 01       	movw	r24, r28
    2fa4:	8c 57       	subi	r24, 0x7C	; 124
    2fa6:	9f 4f       	sbci	r25, 0xFF	; 255
    2fa8:	9e 01       	movw	r18, r28
    2faa:	2c 57       	subi	r18, 0x7C	; 124
    2fac:	3f 4f       	sbci	r19, 0xFF	; 255
    2fae:	f9 01       	movw	r30, r18
    2fb0:	20 81       	ld	r18, Z
    2fb2:	31 81       	ldd	r19, Z+1	; 0x01
    2fb4:	21 50       	subi	r18, 0x01	; 1
    2fb6:	30 40       	sbci	r19, 0x00	; 0
    2fb8:	fc 01       	movw	r30, r24
    2fba:	31 83       	std	Z+1, r19	; 0x01
    2fbc:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fbe:	ce 01       	movw	r24, r28
    2fc0:	8c 57       	subi	r24, 0x7C	; 124
    2fc2:	9f 4f       	sbci	r25, 0xFF	; 255
    2fc4:	fc 01       	movw	r30, r24
    2fc6:	80 81       	ld	r24, Z
    2fc8:	91 81       	ldd	r25, Z+1	; 0x01
    2fca:	00 97       	sbiw	r24, 0x00	; 0
    2fcc:	89 f6       	brne	.-94     	; 0x2f70 <main+0x1390>
    2fce:	2f c0       	rjmp	.+94     	; 0x302e <main+0x144e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fd0:	8e 01       	movw	r16, r28
    2fd2:	0c 57       	subi	r16, 0x7C	; 124
    2fd4:	1f 4f       	sbci	r17, 0xFF	; 255
    2fd6:	ce 01       	movw	r24, r28
    2fd8:	80 58       	subi	r24, 0x80	; 128
    2fda:	9f 4f       	sbci	r25, 0xFF	; 255
    2fdc:	fc 01       	movw	r30, r24
    2fde:	60 81       	ld	r22, Z
    2fe0:	71 81       	ldd	r23, Z+1	; 0x01
    2fe2:	82 81       	ldd	r24, Z+2	; 0x02
    2fe4:	93 81       	ldd	r25, Z+3	; 0x03
    2fe6:	0e 94 80 19 	call	0x3300	; 0x3300 <__fixunssfsi>
    2fea:	dc 01       	movw	r26, r24
    2fec:	cb 01       	movw	r24, r22
    2fee:	f8 01       	movw	r30, r16
    2ff0:	91 83       	std	Z+1, r25	; 0x01
    2ff2:	80 83       	st	Z, r24
    2ff4:	ce 01       	movw	r24, r28
    2ff6:	88 57       	subi	r24, 0x78	; 120
    2ff8:	9f 4f       	sbci	r25, 0xFF	; 255
    2ffa:	9e 01       	movw	r18, r28
    2ffc:	2c 57       	subi	r18, 0x7C	; 124
    2ffe:	3f 4f       	sbci	r19, 0xFF	; 255
    3000:	f9 01       	movw	r30, r18
    3002:	20 81       	ld	r18, Z
    3004:	31 81       	ldd	r19, Z+1	; 0x01
    3006:	fc 01       	movw	r30, r24
    3008:	31 83       	std	Z+1, r19	; 0x01
    300a:	20 83       	st	Z, r18
    300c:	ce 01       	movw	r24, r28
    300e:	88 57       	subi	r24, 0x78	; 120
    3010:	9f 4f       	sbci	r25, 0xFF	; 255
    3012:	fc 01       	movw	r30, r24
    3014:	80 81       	ld	r24, Z
    3016:	91 81       	ldd	r25, Z+1	; 0x01
    3018:	8c 01       	movw	r16, r24
    301a:	c8 01       	movw	r24, r16
    301c:	01 97       	sbiw	r24, 0x01	; 1
    301e:	f1 f7       	brne	.-4      	; 0x301c <main+0x143c>
    3020:	8c 01       	movw	r16, r24
    3022:	ce 01       	movw	r24, r28
    3024:	88 57       	subi	r24, 0x78	; 120
    3026:	9f 4f       	sbci	r25, 0xFF	; 255
    3028:	fc 01       	movw	r30, r24
    302a:	11 83       	std	Z+1, r17	; 0x01
    302c:	00 83       	st	Z, r16
									/******* find out time take here *******/
									_delay_ms(1);
									if (fallCounter > 2000){
    302e:	8c 81       	ldd	r24, Y+4	; 0x04
    3030:	9d 81       	ldd	r25, Y+5	; 0x05
    3032:	f7 e0       	ldi	r31, 0x07	; 7
    3034:	81 3d       	cpi	r24, 0xD1	; 209
    3036:	9f 07       	cpc	r25, r31
    3038:	b8 f4       	brcc	.+46     	; 0x3068 <main+0x1488>
										break;
									}
									fallCounter++;
    303a:	8c 81       	ldd	r24, Y+4	; 0x04
    303c:	9d 81       	ldd	r25, Y+5	; 0x05
    303e:	01 96       	adiw	r24, 0x01	; 1
    3040:	9d 83       	std	Y+5, r25	; 0x05
    3042:	8c 83       	std	Y+4, r24	; 0x04
								LCDPrint(subSubString2);
								//@6 (drop the product and display in LCD) complete

								//@7 start motor and count for 2 sec
								unsigned int fallCounter = 0;
								while ((!(bit_is_set(PINA, PA6))) && (!(bit_is_set(PINA, PA7)))) {
    3044:	89 e3       	ldi	r24, 0x39	; 57
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	fc 01       	movw	r30, r24
    304a:	80 81       	ld	r24, Z
    304c:	88 2f       	mov	r24, r24
    304e:	90 e0       	ldi	r25, 0x00	; 0
    3050:	80 74       	andi	r24, 0x40	; 64
    3052:	90 70       	andi	r25, 0x00	; 0
    3054:	00 97       	sbiw	r24, 0x00	; 0
    3056:	49 f4       	brne	.+18     	; 0x306a <main+0x148a>
    3058:	89 e3       	ldi	r24, 0x39	; 57
    305a:	90 e0       	ldi	r25, 0x00	; 0
    305c:	fc 01       	movw	r30, r24
    305e:	80 81       	ld	r24, Z
    3060:	88 23       	and	r24, r24
    3062:	0c f0       	brlt	.+2      	; 0x3066 <main+0x1486>
    3064:	12 cf       	rjmp	.-476    	; 0x2e8a <main+0x12aa>
    3066:	01 c0       	rjmp	.+2      	; 0x306a <main+0x148a>
									/******* find out time take here *******/
									_delay_ms(1);
									if (fallCounter > 2000){
										break;
    3068:	00 00       	nop
									}
									fallCounter++;
									/****************************************/
								}
								//@8 stop the motor and check for time
								PORTC = 0x00;
    306a:	85 e3       	ldi	r24, 0x35	; 53
    306c:	90 e0       	ldi	r25, 0x00	; 0
    306e:	fc 01       	movw	r30, r24
    3070:	10 82       	st	Z, r1
								if (fallCounter >= 2000) {
    3072:	8c 81       	ldd	r24, Y+4	; 0x04
    3074:	9d 81       	ldd	r25, Y+5	; 0x05
    3076:	f7 e0       	ldi	r31, 0x07	; 7
    3078:	80 3d       	cpi	r24, 0xD0	; 208
    307a:	9f 07       	cpc	r25, r31
    307c:	58 f0       	brcs	.+22     	; 0x3094 <main+0x14b4>
									/*********** overFall error **************/
									LCDPrintLines("Error: ", "Overfall");
    307e:	8a e1       	ldi	r24, 0x1A	; 26
    3080:	92 e0       	ldi	r25, 0x02	; 2
    3082:	2e e8       	ldi	r18, 0x8E	; 142
    3084:	31 e0       	ldi	r19, 0x01	; 1
    3086:	b9 01       	movw	r22, r18
    3088:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <LCDPrintLines>
									whatIsGoingOn = ERRORO;
    308c:	88 e0       	ldi	r24, 0x08	; 8
    308e:	80 93 ff 03 	sts	0x03FF, r24
    3092:	0a c0       	rjmp	.+20     	; 0x30a8 <main+0x14c8>
									/*****************************************/
								} else {
									/*********** success **************/
									LCDPrintLines("Error: ", "success");
    3094:	8a e1       	ldi	r24, 0x1A	; 26
    3096:	92 e0       	ldi	r25, 0x02	; 2
    3098:	24 e4       	ldi	r18, 0x44	; 68
    309a:	32 e0       	ldi	r19, 0x02	; 2
    309c:	b9 01       	movw	r22, r18
    309e:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <LCDPrintLines>
									whatIsGoingOn = MESSAGE_SEND_SUCCESSFULLY;
    30a2:	81 e0       	ldi	r24, 0x01	; 1
    30a4:	80 93 ff 03 	sts	0x03FF, r24
									/*****************************************/
								}
								//@7 () Complete
								/******************************************************/
							}
							free (subSubString2);
    30a8:	8e 89       	ldd	r24, Y+22	; 0x16
    30aa:	9f 89       	ldd	r25, Y+23	; 0x17
    30ac:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <free>
    30b0:	0a c0       	rjmp	.+20     	; 0x30c6 <main+0x14e6>
							//@5 (Product value check) complete
						} else {
							/****** invalid vmCode *******/
							LCDPrintLines("Error: ", "productCode invalid");
    30b2:	8a e1       	ldi	r24, 0x1A	; 26
    30b4:	92 e0       	ldi	r25, 0x02	; 2
    30b6:	2c e4       	ldi	r18, 0x4C	; 76
    30b8:	32 e0       	ldi	r19, 0x02	; 2
    30ba:	b9 01       	movw	r22, r18
    30bc:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <LCDPrintLines>
							whatIsGoingOn = ERRORP;
    30c0:	86 e0       	ldi	r24, 0x06	; 6
    30c2:	80 93 ff 03 	sts	0x03FF, r24
							/*****************************/
						}
						free (subSubString);
    30c6:	8c 89       	ldd	r24, Y+20	; 0x14
    30c8:	9d 89       	ldd	r25, Y+21	; 0x15
    30ca:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <free>
    30ce:	15 c0       	rjmp	.+42     	; 0x30fa <main+0x151a>
						//@4 (check for itemcode) complete
					} else {
						/****** invalid vmCode *******/
						LCDPrintLines("Error: ", "vmCode invalid");
    30d0:	8a e1       	ldi	r24, 0x1A	; 26
    30d2:	92 e0       	ldi	r25, 0x02	; 2
    30d4:	2e e5       	ldi	r18, 0x5E	; 94
    30d6:	31 e0       	ldi	r19, 0x01	; 1
    30d8:	b9 01       	movw	r22, r18
    30da:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <LCDPrintLines>
						whatIsGoingOn = ERRORV;
    30de:	8a e0       	ldi	r24, 0x0A	; 10
    30e0:	80 93 ff 03 	sts	0x03FF, r24
    30e4:	0a c0       	rjmp	.+20     	; 0x30fa <main+0x151a>
						/*****************************/
					}
					//@3 (check for vmMachine code) completed
				} else {
					/******* invalid pinCode *******/
					LCDPrintLines("Error: und.", "pinCode length");
    30e6:	80 e7       	ldi	r24, 0x70	; 112
    30e8:	92 e0       	ldi	r25, 0x02	; 2
    30ea:	2c e7       	ldi	r18, 0x7C	; 124
    30ec:	32 e0       	ldi	r19, 0x02	; 2
    30ee:	b9 01       	movw	r22, r18
    30f0:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <LCDPrintLines>
					whatIsGoingOn = ERRORPA;
    30f4:	84 e0       	ldi	r24, 0x04	; 4
    30f6:	80 93 ff 03 	sts	0x03FF, r24
					/*******************************/
				}
				//@2 (check for 6 digit pinCode) complete
				freeSplitedString (a, counter);
    30fa:	20 91 fd 03 	lds	r18, 0x03FD
    30fe:	30 91 fe 03 	lds	r19, 0x03FE
    3102:	88 85       	ldd	r24, Y+8	; 0x08
    3104:	99 85       	ldd	r25, Y+9	; 0x09
    3106:	b9 01       	movw	r22, r18
    3108:	0e 94 04 0b 	call	0x1608	; 0x1608 <freeSplitedString>
				freeSplitedString (textContent, textContentCounter);
    310c:	ce 01       	movw	r24, r28
    310e:	88 56       	subi	r24, 0x68	; 104
    3110:	9f 4f       	sbci	r25, 0xFF	; 255
    3112:	fc 01       	movw	r30, r24
    3114:	20 81       	ld	r18, Z
    3116:	31 81       	ldd	r19, Z+1	; 0x01
    3118:	8a 85       	ldd	r24, Y+10	; 0x0a
    311a:	9b 85       	ldd	r25, Y+11	; 0x0b
    311c:	b9 01       	movw	r22, r18
    311e:	0e 94 04 0b 	call	0x1608	; 0x1608 <freeSplitedString>
    3122:	0e c0       	rjmp	.+28     	; 0x3140 <main+0x1560>
				/******************************************************/

				/******************************************************/
			} else if (okComplete == 2){
    3124:	80 91 f8 02 	lds	r24, 0x02F8
    3128:	82 30       	cpi	r24, 0x02	; 2
    312a:	51 f4       	brne	.+20     	; 0x3140 <main+0x1560>
				/**************** error reading sms *******************/
				LCDPrintLines("Err Reading SMS", "5 Retries Error");
    312c:	80 eb       	ldi	r24, 0xB0	; 176
    312e:	92 e0       	ldi	r25, 0x02	; 2
    3130:	2e e7       	ldi	r18, 0x7E	; 126
    3132:	31 e0       	ldi	r19, 0x01	; 1
    3134:	b9 01       	movw	r22, r18
    3136:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <LCDPrintLines>
				whatIsGoingOn = ERRORR;
    313a:	87 e0       	ldi	r24, 0x07	; 7
    313c:	80 93 ff 03 	sts	0x03FF, r24
    3140:	9e 01       	movw	r18, r28
    3142:	26 57       	subi	r18, 0x76	; 118
    3144:	3f 4f       	sbci	r19, 0xFF	; 255
    3146:	80 e0       	ldi	r24, 0x00	; 0
    3148:	90 e0       	ldi	r25, 0x00	; 0
    314a:	aa e7       	ldi	r26, 0x7A	; 122
    314c:	b4 e4       	ldi	r27, 0x44	; 68
    314e:	f9 01       	movw	r30, r18
    3150:	80 83       	st	Z, r24
    3152:	91 83       	std	Z+1, r25	; 0x01
    3154:	a2 83       	std	Z+2, r26	; 0x02
    3156:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    3158:	8e 01       	movw	r16, r28
    315a:	02 57       	subi	r16, 0x72	; 114
    315c:	1f 4f       	sbci	r17, 0xFF	; 255
    315e:	ce 01       	movw	r24, r28
    3160:	86 57       	subi	r24, 0x76	; 118
    3162:	9f 4f       	sbci	r25, 0xFF	; 255
    3164:	fc 01       	movw	r30, r24
    3166:	60 81       	ld	r22, Z
    3168:	71 81       	ldd	r23, Z+1	; 0x01
    316a:	82 81       	ldd	r24, Z+2	; 0x02
    316c:	93 81       	ldd	r25, Z+3	; 0x03
    316e:	20 e0       	ldi	r18, 0x00	; 0
    3170:	30 e8       	ldi	r19, 0x80	; 128
    3172:	4b e3       	ldi	r20, 0x3B	; 59
    3174:	55 e4       	ldi	r21, 0x45	; 69
    3176:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <__mulsf3>
    317a:	dc 01       	movw	r26, r24
    317c:	cb 01       	movw	r24, r22
    317e:	f8 01       	movw	r30, r16
    3180:	80 83       	st	Z, r24
    3182:	91 83       	std	Z+1, r25	; 0x01
    3184:	a2 83       	std	Z+2, r26	; 0x02
    3186:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3188:	ce 01       	movw	r24, r28
    318a:	82 57       	subi	r24, 0x72	; 114
    318c:	9f 4f       	sbci	r25, 0xFF	; 255
    318e:	11 e0       	ldi	r17, 0x01	; 1
    3190:	fc 01       	movw	r30, r24
    3192:	60 81       	ld	r22, Z
    3194:	71 81       	ldd	r23, Z+1	; 0x01
    3196:	82 81       	ldd	r24, Z+2	; 0x02
    3198:	93 81       	ldd	r25, Z+3	; 0x03
    319a:	20 e0       	ldi	r18, 0x00	; 0
    319c:	30 e0       	ldi	r19, 0x00	; 0
    319e:	40 e8       	ldi	r20, 0x80	; 128
    31a0:	5f e3       	ldi	r21, 0x3F	; 63
    31a2:	0e 94 ae 1c 	call	0x395c	; 0x395c <__ltsf2>
    31a6:	88 23       	and	r24, r24
    31a8:	0c f0       	brlt	.+2      	; 0x31ac <main+0x15cc>
    31aa:	10 e0       	ldi	r17, 0x00	; 0
    31ac:	11 23       	and	r17, r17
    31ae:	49 f0       	breq	.+18     	; 0x31c2 <main+0x15e2>
		__ticks = 1;
    31b0:	ce 01       	movw	r24, r28
    31b2:	8e 56       	subi	r24, 0x6E	; 110
    31b4:	9f 4f       	sbci	r25, 0xFF	; 255
    31b6:	21 e0       	ldi	r18, 0x01	; 1
    31b8:	30 e0       	ldi	r19, 0x00	; 0
    31ba:	fc 01       	movw	r30, r24
    31bc:	31 83       	std	Z+1, r19	; 0x01
    31be:	20 83       	st	Z, r18
    31c0:	74 c0       	rjmp	.+232    	; 0x32aa <main+0x16ca>
	else if (__tmp > 65535)
    31c2:	ce 01       	movw	r24, r28
    31c4:	82 57       	subi	r24, 0x72	; 114
    31c6:	9f 4f       	sbci	r25, 0xFF	; 255
    31c8:	11 e0       	ldi	r17, 0x01	; 1
    31ca:	fc 01       	movw	r30, r24
    31cc:	60 81       	ld	r22, Z
    31ce:	71 81       	ldd	r23, Z+1	; 0x01
    31d0:	82 81       	ldd	r24, Z+2	; 0x02
    31d2:	93 81       	ldd	r25, Z+3	; 0x03
    31d4:	20 e0       	ldi	r18, 0x00	; 0
    31d6:	3f ef       	ldi	r19, 0xFF	; 255
    31d8:	4f e7       	ldi	r20, 0x7F	; 127
    31da:	57 e4       	ldi	r21, 0x47	; 71
    31dc:	0e 94 4e 1c 	call	0x389c	; 0x389c <__gtsf2>
    31e0:	18 16       	cp	r1, r24
    31e2:	0c f0       	brlt	.+2      	; 0x31e6 <main+0x1606>
    31e4:	10 e0       	ldi	r17, 0x00	; 0
    31e6:	11 23       	and	r17, r17
    31e8:	09 f4       	brne	.+2      	; 0x31ec <main+0x160c>
    31ea:	4d c0       	rjmp	.+154    	; 0x3286 <main+0x16a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31ec:	ce 01       	movw	r24, r28
    31ee:	86 57       	subi	r24, 0x76	; 118
    31f0:	9f 4f       	sbci	r25, 0xFF	; 255
    31f2:	fc 01       	movw	r30, r24
    31f4:	60 81       	ld	r22, Z
    31f6:	71 81       	ldd	r23, Z+1	; 0x01
    31f8:	82 81       	ldd	r24, Z+2	; 0x02
    31fa:	93 81       	ldd	r25, Z+3	; 0x03
    31fc:	20 e0       	ldi	r18, 0x00	; 0
    31fe:	30 e0       	ldi	r19, 0x00	; 0
    3200:	40 e2       	ldi	r20, 0x20	; 32
    3202:	51 e4       	ldi	r21, 0x41	; 65
    3204:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <__mulsf3>
    3208:	dc 01       	movw	r26, r24
    320a:	cb 01       	movw	r24, r22
    320c:	8e 01       	movw	r16, r28
    320e:	0e 56       	subi	r16, 0x6E	; 110
    3210:	1f 4f       	sbci	r17, 0xFF	; 255
    3212:	bc 01       	movw	r22, r24
    3214:	cd 01       	movw	r24, r26
    3216:	0e 94 80 19 	call	0x3300	; 0x3300 <__fixunssfsi>
    321a:	dc 01       	movw	r26, r24
    321c:	cb 01       	movw	r24, r22
    321e:	f8 01       	movw	r30, r16
    3220:	91 83       	std	Z+1, r25	; 0x01
    3222:	80 83       	st	Z, r24
    3224:	27 c0       	rjmp	.+78     	; 0x3274 <main+0x1694>
    3226:	ce 01       	movw	r24, r28
    3228:	8c 56       	subi	r24, 0x6C	; 108
    322a:	9f 4f       	sbci	r25, 0xFF	; 255
    322c:	2c e2       	ldi	r18, 0x2C	; 44
    322e:	31 e0       	ldi	r19, 0x01	; 1
    3230:	fc 01       	movw	r30, r24
    3232:	31 83       	std	Z+1, r19	; 0x01
    3234:	20 83       	st	Z, r18
    3236:	ce 01       	movw	r24, r28
    3238:	8c 56       	subi	r24, 0x6C	; 108
    323a:	9f 4f       	sbci	r25, 0xFF	; 255
    323c:	fc 01       	movw	r30, r24
    323e:	80 81       	ld	r24, Z
    3240:	91 81       	ldd	r25, Z+1	; 0x01
    3242:	8c 01       	movw	r16, r24
    3244:	c8 01       	movw	r24, r16
    3246:	01 97       	sbiw	r24, 0x01	; 1
    3248:	f1 f7       	brne	.-4      	; 0x3246 <main+0x1666>
    324a:	8c 01       	movw	r16, r24
    324c:	ce 01       	movw	r24, r28
    324e:	8c 56       	subi	r24, 0x6C	; 108
    3250:	9f 4f       	sbci	r25, 0xFF	; 255
    3252:	fc 01       	movw	r30, r24
    3254:	11 83       	std	Z+1, r17	; 0x01
    3256:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3258:	ce 01       	movw	r24, r28
    325a:	8e 56       	subi	r24, 0x6E	; 110
    325c:	9f 4f       	sbci	r25, 0xFF	; 255
    325e:	9e 01       	movw	r18, r28
    3260:	2e 56       	subi	r18, 0x6E	; 110
    3262:	3f 4f       	sbci	r19, 0xFF	; 255
    3264:	f9 01       	movw	r30, r18
    3266:	20 81       	ld	r18, Z
    3268:	31 81       	ldd	r19, Z+1	; 0x01
    326a:	21 50       	subi	r18, 0x01	; 1
    326c:	30 40       	sbci	r19, 0x00	; 0
    326e:	fc 01       	movw	r30, r24
    3270:	31 83       	std	Z+1, r19	; 0x01
    3272:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3274:	ce 01       	movw	r24, r28
    3276:	8e 56       	subi	r24, 0x6E	; 110
    3278:	9f 4f       	sbci	r25, 0xFF	; 255
    327a:	fc 01       	movw	r30, r24
    327c:	80 81       	ld	r24, Z
    327e:	91 81       	ldd	r25, Z+1	; 0x01
    3280:	00 97       	sbiw	r24, 0x00	; 0
    3282:	89 f6       	brne	.-94     	; 0x3226 <main+0x1646>
    3284:	2f c0       	rjmp	.+94     	; 0x32e4 <main+0x1704>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3286:	8e 01       	movw	r16, r28
    3288:	0e 56       	subi	r16, 0x6E	; 110
    328a:	1f 4f       	sbci	r17, 0xFF	; 255
    328c:	ce 01       	movw	r24, r28
    328e:	82 57       	subi	r24, 0x72	; 114
    3290:	9f 4f       	sbci	r25, 0xFF	; 255
    3292:	fc 01       	movw	r30, r24
    3294:	60 81       	ld	r22, Z
    3296:	71 81       	ldd	r23, Z+1	; 0x01
    3298:	82 81       	ldd	r24, Z+2	; 0x02
    329a:	93 81       	ldd	r25, Z+3	; 0x03
    329c:	0e 94 80 19 	call	0x3300	; 0x3300 <__fixunssfsi>
    32a0:	dc 01       	movw	r26, r24
    32a2:	cb 01       	movw	r24, r22
    32a4:	f8 01       	movw	r30, r16
    32a6:	91 83       	std	Z+1, r25	; 0x01
    32a8:	80 83       	st	Z, r24
    32aa:	ce 01       	movw	r24, r28
    32ac:	8a 56       	subi	r24, 0x6A	; 106
    32ae:	9f 4f       	sbci	r25, 0xFF	; 255
    32b0:	9e 01       	movw	r18, r28
    32b2:	2e 56       	subi	r18, 0x6E	; 110
    32b4:	3f 4f       	sbci	r19, 0xFF	; 255
    32b6:	f9 01       	movw	r30, r18
    32b8:	20 81       	ld	r18, Z
    32ba:	31 81       	ldd	r19, Z+1	; 0x01
    32bc:	fc 01       	movw	r30, r24
    32be:	31 83       	std	Z+1, r19	; 0x01
    32c0:	20 83       	st	Z, r18
    32c2:	ce 01       	movw	r24, r28
    32c4:	8a 56       	subi	r24, 0x6A	; 106
    32c6:	9f 4f       	sbci	r25, 0xFF	; 255
    32c8:	fc 01       	movw	r30, r24
    32ca:	80 81       	ld	r24, Z
    32cc:	91 81       	ldd	r25, Z+1	; 0x01
    32ce:	8c 01       	movw	r16, r24
    32d0:	c8 01       	movw	r24, r16
    32d2:	01 97       	sbiw	r24, 0x01	; 1
    32d4:	f1 f7       	brne	.-4      	; 0x32d2 <main+0x16f2>
    32d6:	8c 01       	movw	r16, r24
    32d8:	ce 01       	movw	r24, r28
    32da:	8a 56       	subi	r24, 0x6A	; 106
    32dc:	9f 4f       	sbci	r25, 0xFF	; 255
    32de:	fc 01       	movw	r30, r24
    32e0:	11 83       	std	Z+1, r17	; 0x01
    32e2:	00 83       	st	Z, r16
			//@2 reset EEPROM
			//@2 (reset EEPROM) complete

			_delay_ms(1000);

			msgNumber = -1;
    32e4:	8f ef       	ldi	r24, 0xFF	; 255
    32e6:	80 93 60 00 	sts	0x0060, r24
			msgNumber1 = -1;
    32ea:	8f ef       	ldi	r24, 0xFF	; 255
    32ec:	80 93 61 00 	sts	0x0061, r24
			msgReceived = 0;
    32f0:	10 92 fa 03 	sts	0x03FA, r1
			/***********************************************************************/

			ringReceived = 0;
    32f4:	10 92 fb 03 	sts	0x03FB, r1
		}
	}
    32f8:	0c 94 56 0f 	jmp	0x1eac	; 0x1eac <main+0x2cc>
    32fc:	0c 94 56 0f 	jmp	0x1eac	; 0x1eac <main+0x2cc>

00003300 <__fixunssfsi>:
    3300:	ef 92       	push	r14
    3302:	ff 92       	push	r15
    3304:	0f 93       	push	r16
    3306:	1f 93       	push	r17
    3308:	7b 01       	movw	r14, r22
    330a:	8c 01       	movw	r16, r24
    330c:	20 e0       	ldi	r18, 0x00	; 0
    330e:	30 e0       	ldi	r19, 0x00	; 0
    3310:	40 e0       	ldi	r20, 0x00	; 0
    3312:	5f e4       	ldi	r21, 0x4F	; 79
    3314:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <__gesf2>
    3318:	87 fd       	sbrc	r24, 7
    331a:	11 c0       	rjmp	.+34     	; 0x333e <__fixunssfsi+0x3e>
    331c:	c8 01       	movw	r24, r16
    331e:	b7 01       	movw	r22, r14
    3320:	20 e0       	ldi	r18, 0x00	; 0
    3322:	30 e0       	ldi	r19, 0x00	; 0
    3324:	40 e0       	ldi	r20, 0x00	; 0
    3326:	5f e4       	ldi	r21, 0x4F	; 79
    3328:	0e 94 23 1b 	call	0x3646	; 0x3646 <__subsf3>
    332c:	0e 94 de 1c 	call	0x39bc	; 0x39bc <__fixsfsi>
    3330:	9b 01       	movw	r18, r22
    3332:	ac 01       	movw	r20, r24
    3334:	20 50       	subi	r18, 0x00	; 0
    3336:	30 40       	sbci	r19, 0x00	; 0
    3338:	40 40       	sbci	r20, 0x00	; 0
    333a:	50 48       	sbci	r21, 0x80	; 128
    333c:	06 c0       	rjmp	.+12     	; 0x334a <__fixunssfsi+0x4a>
    333e:	c8 01       	movw	r24, r16
    3340:	b7 01       	movw	r22, r14
    3342:	0e 94 de 1c 	call	0x39bc	; 0x39bc <__fixsfsi>
    3346:	9b 01       	movw	r18, r22
    3348:	ac 01       	movw	r20, r24
    334a:	b9 01       	movw	r22, r18
    334c:	ca 01       	movw	r24, r20
    334e:	1f 91       	pop	r17
    3350:	0f 91       	pop	r16
    3352:	ff 90       	pop	r15
    3354:	ef 90       	pop	r14
    3356:	08 95       	ret

00003358 <_fpadd_parts>:
    3358:	a0 e0       	ldi	r26, 0x00	; 0
    335a:	b0 e0       	ldi	r27, 0x00	; 0
    335c:	e2 eb       	ldi	r30, 0xB2	; 178
    335e:	f9 e1       	ldi	r31, 0x19	; 25
    3360:	0c 94 c4 1e 	jmp	0x3d88	; 0x3d88 <__prologue_saves__+0x8>
    3364:	fc 01       	movw	r30, r24
    3366:	ea 01       	movw	r28, r20
    3368:	80 81       	ld	r24, Z
    336a:	82 30       	cpi	r24, 0x02	; 2
    336c:	08 f4       	brcc	.+2      	; 0x3370 <_fpadd_parts+0x18>
    336e:	38 c1       	rjmp	.+624    	; 0x35e0 <_fpadd_parts+0x288>
    3370:	db 01       	movw	r26, r22
    3372:	9c 91       	ld	r25, X
    3374:	92 30       	cpi	r25, 0x02	; 2
    3376:	08 f4       	brcc	.+2      	; 0x337a <_fpadd_parts+0x22>
    3378:	30 c1       	rjmp	.+608    	; 0x35da <_fpadd_parts+0x282>
    337a:	84 30       	cpi	r24, 0x04	; 4
    337c:	59 f4       	brne	.+22     	; 0x3394 <_fpadd_parts+0x3c>
    337e:	94 30       	cpi	r25, 0x04	; 4
    3380:	09 f0       	breq	.+2      	; 0x3384 <_fpadd_parts+0x2c>
    3382:	2e c1       	rjmp	.+604    	; 0x35e0 <_fpadd_parts+0x288>
    3384:	91 81       	ldd	r25, Z+1	; 0x01
    3386:	11 96       	adiw	r26, 0x01	; 1
    3388:	8c 91       	ld	r24, X
    338a:	11 97       	sbiw	r26, 0x01	; 1
    338c:	98 17       	cp	r25, r24
    338e:	09 f0       	breq	.+2      	; 0x3392 <_fpadd_parts+0x3a>
    3390:	21 c1       	rjmp	.+578    	; 0x35d4 <_fpadd_parts+0x27c>
    3392:	26 c1       	rjmp	.+588    	; 0x35e0 <_fpadd_parts+0x288>
    3394:	94 30       	cpi	r25, 0x04	; 4
    3396:	09 f4       	brne	.+2      	; 0x339a <_fpadd_parts+0x42>
    3398:	20 c1       	rjmp	.+576    	; 0x35da <_fpadd_parts+0x282>
    339a:	92 30       	cpi	r25, 0x02	; 2
    339c:	b1 f4       	brne	.+44     	; 0x33ca <_fpadd_parts+0x72>
    339e:	82 30       	cpi	r24, 0x02	; 2
    33a0:	09 f0       	breq	.+2      	; 0x33a4 <_fpadd_parts+0x4c>
    33a2:	1e c1       	rjmp	.+572    	; 0x35e0 <_fpadd_parts+0x288>
    33a4:	ca 01       	movw	r24, r20
    33a6:	af 01       	movw	r20, r30
    33a8:	28 e0       	ldi	r18, 0x08	; 8
    33aa:	da 01       	movw	r26, r20
    33ac:	0d 90       	ld	r0, X+
    33ae:	ad 01       	movw	r20, r26
    33b0:	dc 01       	movw	r26, r24
    33b2:	0d 92       	st	X+, r0
    33b4:	cd 01       	movw	r24, r26
    33b6:	21 50       	subi	r18, 0x01	; 1
    33b8:	c1 f7       	brne	.-16     	; 0x33aa <_fpadd_parts+0x52>
    33ba:	db 01       	movw	r26, r22
    33bc:	11 96       	adiw	r26, 0x01	; 1
    33be:	8c 91       	ld	r24, X
    33c0:	11 97       	sbiw	r26, 0x01	; 1
    33c2:	91 81       	ldd	r25, Z+1	; 0x01
    33c4:	89 23       	and	r24, r25
    33c6:	89 83       	std	Y+1, r24	; 0x01
    33c8:	0a c1       	rjmp	.+532    	; 0x35de <_fpadd_parts+0x286>
    33ca:	82 30       	cpi	r24, 0x02	; 2
    33cc:	09 f4       	brne	.+2      	; 0x33d0 <_fpadd_parts+0x78>
    33ce:	05 c1       	rjmp	.+522    	; 0x35da <_fpadd_parts+0x282>
    33d0:	c2 80       	ldd	r12, Z+2	; 0x02
    33d2:	d3 80       	ldd	r13, Z+3	; 0x03
    33d4:	db 01       	movw	r26, r22
    33d6:	12 96       	adiw	r26, 0x02	; 2
    33d8:	6d 90       	ld	r6, X+
    33da:	7c 90       	ld	r7, X
    33dc:	13 97       	sbiw	r26, 0x03	; 3
    33de:	24 81       	ldd	r18, Z+4	; 0x04
    33e0:	35 81       	ldd	r19, Z+5	; 0x05
    33e2:	46 81       	ldd	r20, Z+6	; 0x06
    33e4:	57 81       	ldd	r21, Z+7	; 0x07
    33e6:	14 96       	adiw	r26, 0x04	; 4
    33e8:	ed 90       	ld	r14, X+
    33ea:	fd 90       	ld	r15, X+
    33ec:	0d 91       	ld	r16, X+
    33ee:	1c 91       	ld	r17, X
    33f0:	17 97       	sbiw	r26, 0x07	; 7
    33f2:	c6 01       	movw	r24, r12
    33f4:	86 19       	sub	r24, r6
    33f6:	97 09       	sbc	r25, r7
    33f8:	5c 01       	movw	r10, r24
    33fa:	97 ff       	sbrs	r25, 7
    33fc:	04 c0       	rjmp	.+8      	; 0x3406 <_fpadd_parts+0xae>
    33fe:	aa 24       	eor	r10, r10
    3400:	bb 24       	eor	r11, r11
    3402:	a8 1a       	sub	r10, r24
    3404:	b9 0a       	sbc	r11, r25
    3406:	b0 e2       	ldi	r27, 0x20	; 32
    3408:	ab 16       	cp	r10, r27
    340a:	b1 04       	cpc	r11, r1
    340c:	0c f0       	brlt	.+2      	; 0x3410 <_fpadd_parts+0xb8>
    340e:	61 c0       	rjmp	.+194    	; 0x34d2 <_fpadd_parts+0x17a>
    3410:	18 16       	cp	r1, r24
    3412:	19 06       	cpc	r1, r25
    3414:	6c f5       	brge	.+90     	; 0x3470 <_fpadd_parts+0x118>
    3416:	37 01       	movw	r6, r14
    3418:	48 01       	movw	r8, r16
    341a:	0a 2c       	mov	r0, r10
    341c:	04 c0       	rjmp	.+8      	; 0x3426 <_fpadd_parts+0xce>
    341e:	96 94       	lsr	r9
    3420:	87 94       	ror	r8
    3422:	77 94       	ror	r7
    3424:	67 94       	ror	r6
    3426:	0a 94       	dec	r0
    3428:	d2 f7       	brpl	.-12     	; 0x341e <_fpadd_parts+0xc6>
    342a:	81 e0       	ldi	r24, 0x01	; 1
    342c:	90 e0       	ldi	r25, 0x00	; 0
    342e:	a0 e0       	ldi	r26, 0x00	; 0
    3430:	b0 e0       	ldi	r27, 0x00	; 0
    3432:	0a 2c       	mov	r0, r10
    3434:	04 c0       	rjmp	.+8      	; 0x343e <_fpadd_parts+0xe6>
    3436:	88 0f       	add	r24, r24
    3438:	99 1f       	adc	r25, r25
    343a:	aa 1f       	adc	r26, r26
    343c:	bb 1f       	adc	r27, r27
    343e:	0a 94       	dec	r0
    3440:	d2 f7       	brpl	.-12     	; 0x3436 <_fpadd_parts+0xde>
    3442:	01 97       	sbiw	r24, 0x01	; 1
    3444:	a1 09       	sbc	r26, r1
    3446:	b1 09       	sbc	r27, r1
    3448:	8e 21       	and	r24, r14
    344a:	9f 21       	and	r25, r15
    344c:	a0 23       	and	r26, r16
    344e:	b1 23       	and	r27, r17
    3450:	ee 24       	eor	r14, r14
    3452:	ff 24       	eor	r15, r15
    3454:	87 01       	movw	r16, r14
    3456:	e3 94       	inc	r14
    3458:	00 97       	sbiw	r24, 0x00	; 0
    345a:	a1 05       	cpc	r26, r1
    345c:	b1 05       	cpc	r27, r1
    345e:	19 f4       	brne	.+6      	; 0x3466 <_fpadd_parts+0x10e>
    3460:	ee 24       	eor	r14, r14
    3462:	ff 24       	eor	r15, r15
    3464:	87 01       	movw	r16, r14
    3466:	e6 28       	or	r14, r6
    3468:	f7 28       	or	r15, r7
    346a:	08 29       	or	r16, r8
    346c:	19 29       	or	r17, r9
    346e:	3c c0       	rjmp	.+120    	; 0x34e8 <_fpadd_parts+0x190>
    3470:	00 97       	sbiw	r24, 0x00	; 0
    3472:	d1 f1       	breq	.+116    	; 0x34e8 <_fpadd_parts+0x190>
    3474:	ca 0c       	add	r12, r10
    3476:	db 1c       	adc	r13, r11
    3478:	39 01       	movw	r6, r18
    347a:	4a 01       	movw	r8, r20
    347c:	0a 2c       	mov	r0, r10
    347e:	04 c0       	rjmp	.+8      	; 0x3488 <_fpadd_parts+0x130>
    3480:	96 94       	lsr	r9
    3482:	87 94       	ror	r8
    3484:	77 94       	ror	r7
    3486:	67 94       	ror	r6
    3488:	0a 94       	dec	r0
    348a:	d2 f7       	brpl	.-12     	; 0x3480 <_fpadd_parts+0x128>
    348c:	81 e0       	ldi	r24, 0x01	; 1
    348e:	90 e0       	ldi	r25, 0x00	; 0
    3490:	a0 e0       	ldi	r26, 0x00	; 0
    3492:	b0 e0       	ldi	r27, 0x00	; 0
    3494:	0a 2c       	mov	r0, r10
    3496:	04 c0       	rjmp	.+8      	; 0x34a0 <_fpadd_parts+0x148>
    3498:	88 0f       	add	r24, r24
    349a:	99 1f       	adc	r25, r25
    349c:	aa 1f       	adc	r26, r26
    349e:	bb 1f       	adc	r27, r27
    34a0:	0a 94       	dec	r0
    34a2:	d2 f7       	brpl	.-12     	; 0x3498 <_fpadd_parts+0x140>
    34a4:	01 97       	sbiw	r24, 0x01	; 1
    34a6:	a1 09       	sbc	r26, r1
    34a8:	b1 09       	sbc	r27, r1
    34aa:	82 23       	and	r24, r18
    34ac:	93 23       	and	r25, r19
    34ae:	a4 23       	and	r26, r20
    34b0:	b5 23       	and	r27, r21
    34b2:	21 e0       	ldi	r18, 0x01	; 1
    34b4:	30 e0       	ldi	r19, 0x00	; 0
    34b6:	40 e0       	ldi	r20, 0x00	; 0
    34b8:	50 e0       	ldi	r21, 0x00	; 0
    34ba:	00 97       	sbiw	r24, 0x00	; 0
    34bc:	a1 05       	cpc	r26, r1
    34be:	b1 05       	cpc	r27, r1
    34c0:	19 f4       	brne	.+6      	; 0x34c8 <_fpadd_parts+0x170>
    34c2:	20 e0       	ldi	r18, 0x00	; 0
    34c4:	30 e0       	ldi	r19, 0x00	; 0
    34c6:	a9 01       	movw	r20, r18
    34c8:	26 29       	or	r18, r6
    34ca:	37 29       	or	r19, r7
    34cc:	48 29       	or	r20, r8
    34ce:	59 29       	or	r21, r9
    34d0:	0b c0       	rjmp	.+22     	; 0x34e8 <_fpadd_parts+0x190>
    34d2:	6c 14       	cp	r6, r12
    34d4:	7d 04       	cpc	r7, r13
    34d6:	24 f4       	brge	.+8      	; 0x34e0 <_fpadd_parts+0x188>
    34d8:	ee 24       	eor	r14, r14
    34da:	ff 24       	eor	r15, r15
    34dc:	87 01       	movw	r16, r14
    34de:	04 c0       	rjmp	.+8      	; 0x34e8 <_fpadd_parts+0x190>
    34e0:	63 01       	movw	r12, r6
    34e2:	20 e0       	ldi	r18, 0x00	; 0
    34e4:	30 e0       	ldi	r19, 0x00	; 0
    34e6:	a9 01       	movw	r20, r18
    34e8:	81 81       	ldd	r24, Z+1	; 0x01
    34ea:	fb 01       	movw	r30, r22
    34ec:	91 81       	ldd	r25, Z+1	; 0x01
    34ee:	89 17       	cp	r24, r25
    34f0:	09 f4       	brne	.+2      	; 0x34f4 <_fpadd_parts+0x19c>
    34f2:	45 c0       	rjmp	.+138    	; 0x357e <_fpadd_parts+0x226>
    34f4:	88 23       	and	r24, r24
    34f6:	49 f0       	breq	.+18     	; 0x350a <_fpadd_parts+0x1b2>
    34f8:	d8 01       	movw	r26, r16
    34fa:	c7 01       	movw	r24, r14
    34fc:	82 1b       	sub	r24, r18
    34fe:	93 0b       	sbc	r25, r19
    3500:	a4 0b       	sbc	r26, r20
    3502:	b5 0b       	sbc	r27, r21
    3504:	9c 01       	movw	r18, r24
    3506:	ad 01       	movw	r20, r26
    3508:	04 c0       	rjmp	.+8      	; 0x3512 <_fpadd_parts+0x1ba>
    350a:	2e 19       	sub	r18, r14
    350c:	3f 09       	sbc	r19, r15
    350e:	40 0b       	sbc	r20, r16
    3510:	51 0b       	sbc	r21, r17
    3512:	57 fd       	sbrc	r21, 7
    3514:	04 c0       	rjmp	.+8      	; 0x351e <_fpadd_parts+0x1c6>
    3516:	19 82       	std	Y+1, r1	; 0x01
    3518:	db 82       	std	Y+3, r13	; 0x03
    351a:	ca 82       	std	Y+2, r12	; 0x02
    351c:	0b c0       	rjmp	.+22     	; 0x3534 <_fpadd_parts+0x1dc>
    351e:	81 e0       	ldi	r24, 0x01	; 1
    3520:	89 83       	std	Y+1, r24	; 0x01
    3522:	db 82       	std	Y+3, r13	; 0x03
    3524:	ca 82       	std	Y+2, r12	; 0x02
    3526:	50 95       	com	r21
    3528:	40 95       	com	r20
    352a:	30 95       	com	r19
    352c:	21 95       	neg	r18
    352e:	3f 4f       	sbci	r19, 0xFF	; 255
    3530:	4f 4f       	sbci	r20, 0xFF	; 255
    3532:	5f 4f       	sbci	r21, 0xFF	; 255
    3534:	2c 83       	std	Y+4, r18	; 0x04
    3536:	3d 83       	std	Y+5, r19	; 0x05
    3538:	4e 83       	std	Y+6, r20	; 0x06
    353a:	5f 83       	std	Y+7, r21	; 0x07
    353c:	0d c0       	rjmp	.+26     	; 0x3558 <_fpadd_parts+0x200>
    353e:	88 0f       	add	r24, r24
    3540:	99 1f       	adc	r25, r25
    3542:	aa 1f       	adc	r26, r26
    3544:	bb 1f       	adc	r27, r27
    3546:	8c 83       	std	Y+4, r24	; 0x04
    3548:	9d 83       	std	Y+5, r25	; 0x05
    354a:	ae 83       	std	Y+6, r26	; 0x06
    354c:	bf 83       	std	Y+7, r27	; 0x07
    354e:	8a 81       	ldd	r24, Y+2	; 0x02
    3550:	9b 81       	ldd	r25, Y+3	; 0x03
    3552:	01 97       	sbiw	r24, 0x01	; 1
    3554:	9b 83       	std	Y+3, r25	; 0x03
    3556:	8a 83       	std	Y+2, r24	; 0x02
    3558:	8c 81       	ldd	r24, Y+4	; 0x04
    355a:	9d 81       	ldd	r25, Y+5	; 0x05
    355c:	ae 81       	ldd	r26, Y+6	; 0x06
    355e:	bf 81       	ldd	r27, Y+7	; 0x07
    3560:	9c 01       	movw	r18, r24
    3562:	ad 01       	movw	r20, r26
    3564:	21 50       	subi	r18, 0x01	; 1
    3566:	30 40       	sbci	r19, 0x00	; 0
    3568:	40 40       	sbci	r20, 0x00	; 0
    356a:	50 40       	sbci	r21, 0x00	; 0
    356c:	2f 3f       	cpi	r18, 0xFF	; 255
    356e:	ef ef       	ldi	r30, 0xFF	; 255
    3570:	3e 07       	cpc	r19, r30
    3572:	ef ef       	ldi	r30, 0xFF	; 255
    3574:	4e 07       	cpc	r20, r30
    3576:	ef e3       	ldi	r30, 0x3F	; 63
    3578:	5e 07       	cpc	r21, r30
    357a:	08 f3       	brcs	.-62     	; 0x353e <_fpadd_parts+0x1e6>
    357c:	0b c0       	rjmp	.+22     	; 0x3594 <_fpadd_parts+0x23c>
    357e:	89 83       	std	Y+1, r24	; 0x01
    3580:	db 82       	std	Y+3, r13	; 0x03
    3582:	ca 82       	std	Y+2, r12	; 0x02
    3584:	2e 0d       	add	r18, r14
    3586:	3f 1d       	adc	r19, r15
    3588:	40 1f       	adc	r20, r16
    358a:	51 1f       	adc	r21, r17
    358c:	2c 83       	std	Y+4, r18	; 0x04
    358e:	3d 83       	std	Y+5, r19	; 0x05
    3590:	4e 83       	std	Y+6, r20	; 0x06
    3592:	5f 83       	std	Y+7, r21	; 0x07
    3594:	83 e0       	ldi	r24, 0x03	; 3
    3596:	88 83       	st	Y, r24
    3598:	2c 81       	ldd	r18, Y+4	; 0x04
    359a:	3d 81       	ldd	r19, Y+5	; 0x05
    359c:	4e 81       	ldd	r20, Y+6	; 0x06
    359e:	5f 81       	ldd	r21, Y+7	; 0x07
    35a0:	57 ff       	sbrs	r21, 7
    35a2:	1d c0       	rjmp	.+58     	; 0x35de <_fpadd_parts+0x286>
    35a4:	da 01       	movw	r26, r20
    35a6:	c9 01       	movw	r24, r18
    35a8:	81 70       	andi	r24, 0x01	; 1
    35aa:	90 70       	andi	r25, 0x00	; 0
    35ac:	a0 70       	andi	r26, 0x00	; 0
    35ae:	b0 70       	andi	r27, 0x00	; 0
    35b0:	56 95       	lsr	r21
    35b2:	47 95       	ror	r20
    35b4:	37 95       	ror	r19
    35b6:	27 95       	ror	r18
    35b8:	82 2b       	or	r24, r18
    35ba:	93 2b       	or	r25, r19
    35bc:	a4 2b       	or	r26, r20
    35be:	b5 2b       	or	r27, r21
    35c0:	8c 83       	std	Y+4, r24	; 0x04
    35c2:	9d 83       	std	Y+5, r25	; 0x05
    35c4:	ae 83       	std	Y+6, r26	; 0x06
    35c6:	bf 83       	std	Y+7, r27	; 0x07
    35c8:	8a 81       	ldd	r24, Y+2	; 0x02
    35ca:	9b 81       	ldd	r25, Y+3	; 0x03
    35cc:	01 96       	adiw	r24, 0x01	; 1
    35ce:	9b 83       	std	Y+3, r25	; 0x03
    35d0:	8a 83       	std	Y+2, r24	; 0x02
    35d2:	05 c0       	rjmp	.+10     	; 0x35de <_fpadd_parts+0x286>
    35d4:	e9 ee       	ldi	r30, 0xE9	; 233
    35d6:	f2 e0       	ldi	r31, 0x02	; 2
    35d8:	03 c0       	rjmp	.+6      	; 0x35e0 <_fpadd_parts+0x288>
    35da:	fb 01       	movw	r30, r22
    35dc:	01 c0       	rjmp	.+2      	; 0x35e0 <_fpadd_parts+0x288>
    35de:	fe 01       	movw	r30, r28
    35e0:	cf 01       	movw	r24, r30
    35e2:	cd b7       	in	r28, 0x3d	; 61
    35e4:	de b7       	in	r29, 0x3e	; 62
    35e6:	ee e0       	ldi	r30, 0x0E	; 14
    35e8:	0c 94 e0 1e 	jmp	0x3dc0	; 0x3dc0 <__epilogue_restores__+0x8>

000035ec <__addsf3>:
    35ec:	a0 e2       	ldi	r26, 0x20	; 32
    35ee:	b0 e0       	ldi	r27, 0x00	; 0
    35f0:	ec ef       	ldi	r30, 0xFC	; 252
    35f2:	fa e1       	ldi	r31, 0x1A	; 26
    35f4:	0c 94 cc 1e 	jmp	0x3d98	; 0x3d98 <__prologue_saves__+0x18>
    35f8:	69 83       	std	Y+1, r22	; 0x01
    35fa:	7a 83       	std	Y+2, r23	; 0x02
    35fc:	8b 83       	std	Y+3, r24	; 0x03
    35fe:	9c 83       	std	Y+4, r25	; 0x04
    3600:	2d 83       	std	Y+5, r18	; 0x05
    3602:	3e 83       	std	Y+6, r19	; 0x06
    3604:	4f 83       	std	Y+7, r20	; 0x07
    3606:	58 87       	std	Y+8, r21	; 0x08
    3608:	89 e0       	ldi	r24, 0x09	; 9
    360a:	e8 2e       	mov	r14, r24
    360c:	f1 2c       	mov	r15, r1
    360e:	ec 0e       	add	r14, r28
    3610:	fd 1e       	adc	r15, r29
    3612:	ce 01       	movw	r24, r28
    3614:	01 96       	adiw	r24, 0x01	; 1
    3616:	b7 01       	movw	r22, r14
    3618:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <__unpack_f>
    361c:	8e 01       	movw	r16, r28
    361e:	0f 5e       	subi	r16, 0xEF	; 239
    3620:	1f 4f       	sbci	r17, 0xFF	; 255
    3622:	ce 01       	movw	r24, r28
    3624:	05 96       	adiw	r24, 0x05	; 5
    3626:	b8 01       	movw	r22, r16
    3628:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <__unpack_f>
    362c:	c7 01       	movw	r24, r14
    362e:	b8 01       	movw	r22, r16
    3630:	ae 01       	movw	r20, r28
    3632:	47 5e       	subi	r20, 0xE7	; 231
    3634:	5f 4f       	sbci	r21, 0xFF	; 255
    3636:	0e 94 ac 19 	call	0x3358	; 0x3358 <_fpadd_parts>
    363a:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <__pack_f>
    363e:	a0 96       	adiw	r28, 0x20	; 32
    3640:	e6 e0       	ldi	r30, 0x06	; 6
    3642:	0c 94 e8 1e 	jmp	0x3dd0	; 0x3dd0 <__epilogue_restores__+0x18>

00003646 <__subsf3>:
    3646:	a0 e2       	ldi	r26, 0x20	; 32
    3648:	b0 e0       	ldi	r27, 0x00	; 0
    364a:	e9 e2       	ldi	r30, 0x29	; 41
    364c:	fb e1       	ldi	r31, 0x1B	; 27
    364e:	0c 94 cc 1e 	jmp	0x3d98	; 0x3d98 <__prologue_saves__+0x18>
    3652:	69 83       	std	Y+1, r22	; 0x01
    3654:	7a 83       	std	Y+2, r23	; 0x02
    3656:	8b 83       	std	Y+3, r24	; 0x03
    3658:	9c 83       	std	Y+4, r25	; 0x04
    365a:	2d 83       	std	Y+5, r18	; 0x05
    365c:	3e 83       	std	Y+6, r19	; 0x06
    365e:	4f 83       	std	Y+7, r20	; 0x07
    3660:	58 87       	std	Y+8, r21	; 0x08
    3662:	8e 01       	movw	r16, r28
    3664:	07 5f       	subi	r16, 0xF7	; 247
    3666:	1f 4f       	sbci	r17, 0xFF	; 255
    3668:	ce 01       	movw	r24, r28
    366a:	01 96       	adiw	r24, 0x01	; 1
    366c:	b8 01       	movw	r22, r16
    366e:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <__unpack_f>
    3672:	91 e1       	ldi	r25, 0x11	; 17
    3674:	e9 2e       	mov	r14, r25
    3676:	f1 2c       	mov	r15, r1
    3678:	ec 0e       	add	r14, r28
    367a:	fd 1e       	adc	r15, r29
    367c:	ce 01       	movw	r24, r28
    367e:	05 96       	adiw	r24, 0x05	; 5
    3680:	b7 01       	movw	r22, r14
    3682:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <__unpack_f>
    3686:	8a 89       	ldd	r24, Y+18	; 0x12
    3688:	91 e0       	ldi	r25, 0x01	; 1
    368a:	89 27       	eor	r24, r25
    368c:	8a 8b       	std	Y+18, r24	; 0x12
    368e:	c8 01       	movw	r24, r16
    3690:	b7 01       	movw	r22, r14
    3692:	ae 01       	movw	r20, r28
    3694:	47 5e       	subi	r20, 0xE7	; 231
    3696:	5f 4f       	sbci	r21, 0xFF	; 255
    3698:	0e 94 ac 19 	call	0x3358	; 0x3358 <_fpadd_parts>
    369c:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <__pack_f>
    36a0:	a0 96       	adiw	r28, 0x20	; 32
    36a2:	e6 e0       	ldi	r30, 0x06	; 6
    36a4:	0c 94 e8 1e 	jmp	0x3dd0	; 0x3dd0 <__epilogue_restores__+0x18>

000036a8 <__mulsf3>:
    36a8:	a0 e2       	ldi	r26, 0x20	; 32
    36aa:	b0 e0       	ldi	r27, 0x00	; 0
    36ac:	ea e5       	ldi	r30, 0x5A	; 90
    36ae:	fb e1       	ldi	r31, 0x1B	; 27
    36b0:	0c 94 c0 1e 	jmp	0x3d80	; 0x3d80 <__prologue_saves__>
    36b4:	69 83       	std	Y+1, r22	; 0x01
    36b6:	7a 83       	std	Y+2, r23	; 0x02
    36b8:	8b 83       	std	Y+3, r24	; 0x03
    36ba:	9c 83       	std	Y+4, r25	; 0x04
    36bc:	2d 83       	std	Y+5, r18	; 0x05
    36be:	3e 83       	std	Y+6, r19	; 0x06
    36c0:	4f 83       	std	Y+7, r20	; 0x07
    36c2:	58 87       	std	Y+8, r21	; 0x08
    36c4:	ce 01       	movw	r24, r28
    36c6:	01 96       	adiw	r24, 0x01	; 1
    36c8:	be 01       	movw	r22, r28
    36ca:	67 5f       	subi	r22, 0xF7	; 247
    36cc:	7f 4f       	sbci	r23, 0xFF	; 255
    36ce:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <__unpack_f>
    36d2:	ce 01       	movw	r24, r28
    36d4:	05 96       	adiw	r24, 0x05	; 5
    36d6:	be 01       	movw	r22, r28
    36d8:	6f 5e       	subi	r22, 0xEF	; 239
    36da:	7f 4f       	sbci	r23, 0xFF	; 255
    36dc:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <__unpack_f>
    36e0:	99 85       	ldd	r25, Y+9	; 0x09
    36e2:	92 30       	cpi	r25, 0x02	; 2
    36e4:	78 f0       	brcs	.+30     	; 0x3704 <__mulsf3+0x5c>
    36e6:	89 89       	ldd	r24, Y+17	; 0x11
    36e8:	82 30       	cpi	r24, 0x02	; 2
    36ea:	c0 f0       	brcs	.+48     	; 0x371c <__mulsf3+0x74>
    36ec:	94 30       	cpi	r25, 0x04	; 4
    36ee:	19 f4       	brne	.+6      	; 0x36f6 <__mulsf3+0x4e>
    36f0:	82 30       	cpi	r24, 0x02	; 2
    36f2:	41 f4       	brne	.+16     	; 0x3704 <__mulsf3+0x5c>
    36f4:	cb c0       	rjmp	.+406    	; 0x388c <__mulsf3+0x1e4>
    36f6:	84 30       	cpi	r24, 0x04	; 4
    36f8:	19 f4       	brne	.+6      	; 0x3700 <__mulsf3+0x58>
    36fa:	92 30       	cpi	r25, 0x02	; 2
    36fc:	79 f4       	brne	.+30     	; 0x371c <__mulsf3+0x74>
    36fe:	c6 c0       	rjmp	.+396    	; 0x388c <__mulsf3+0x1e4>
    3700:	92 30       	cpi	r25, 0x02	; 2
    3702:	51 f4       	brne	.+20     	; 0x3718 <__mulsf3+0x70>
    3704:	81 e0       	ldi	r24, 0x01	; 1
    3706:	2a 85       	ldd	r18, Y+10	; 0x0a
    3708:	9a 89       	ldd	r25, Y+18	; 0x12
    370a:	29 17       	cp	r18, r25
    370c:	09 f4       	brne	.+2      	; 0x3710 <__mulsf3+0x68>
    370e:	80 e0       	ldi	r24, 0x00	; 0
    3710:	8a 87       	std	Y+10, r24	; 0x0a
    3712:	ce 01       	movw	r24, r28
    3714:	09 96       	adiw	r24, 0x09	; 9
    3716:	bc c0       	rjmp	.+376    	; 0x3890 <__mulsf3+0x1e8>
    3718:	82 30       	cpi	r24, 0x02	; 2
    371a:	51 f4       	brne	.+20     	; 0x3730 <__mulsf3+0x88>
    371c:	81 e0       	ldi	r24, 0x01	; 1
    371e:	2a 85       	ldd	r18, Y+10	; 0x0a
    3720:	9a 89       	ldd	r25, Y+18	; 0x12
    3722:	29 17       	cp	r18, r25
    3724:	09 f4       	brne	.+2      	; 0x3728 <__mulsf3+0x80>
    3726:	80 e0       	ldi	r24, 0x00	; 0
    3728:	8a 8b       	std	Y+18, r24	; 0x12
    372a:	ce 01       	movw	r24, r28
    372c:	41 96       	adiw	r24, 0x11	; 17
    372e:	b0 c0       	rjmp	.+352    	; 0x3890 <__mulsf3+0x1e8>
    3730:	6d 84       	ldd	r6, Y+13	; 0x0d
    3732:	7e 84       	ldd	r7, Y+14	; 0x0e
    3734:	8f 84       	ldd	r8, Y+15	; 0x0f
    3736:	98 88       	ldd	r9, Y+16	; 0x10
    3738:	ed 88       	ldd	r14, Y+21	; 0x15
    373a:	fe 88       	ldd	r15, Y+22	; 0x16
    373c:	0f 89       	ldd	r16, Y+23	; 0x17
    373e:	18 8d       	ldd	r17, Y+24	; 0x18
    3740:	e0 e2       	ldi	r30, 0x20	; 32
    3742:	f0 e0       	ldi	r31, 0x00	; 0
    3744:	80 e0       	ldi	r24, 0x00	; 0
    3746:	90 e0       	ldi	r25, 0x00	; 0
    3748:	dc 01       	movw	r26, r24
    374a:	aa 24       	eor	r10, r10
    374c:	bb 24       	eor	r11, r11
    374e:	65 01       	movw	r12, r10
    3750:	20 e0       	ldi	r18, 0x00	; 0
    3752:	30 e0       	ldi	r19, 0x00	; 0
    3754:	a9 01       	movw	r20, r18
    3756:	b3 01       	movw	r22, r6
    3758:	61 70       	andi	r22, 0x01	; 1
    375a:	70 70       	andi	r23, 0x00	; 0
    375c:	61 15       	cp	r22, r1
    375e:	71 05       	cpc	r23, r1
    3760:	d1 f0       	breq	.+52     	; 0x3796 <__mulsf3+0xee>
    3762:	2e 0d       	add	r18, r14
    3764:	3f 1d       	adc	r19, r15
    3766:	40 1f       	adc	r20, r16
    3768:	51 1f       	adc	r21, r17
    376a:	15 01       	movw	r2, r10
    376c:	26 01       	movw	r4, r12
    376e:	28 0e       	add	r2, r24
    3770:	39 1e       	adc	r3, r25
    3772:	4a 1e       	adc	r4, r26
    3774:	5b 1e       	adc	r5, r27
    3776:	81 e0       	ldi	r24, 0x01	; 1
    3778:	90 e0       	ldi	r25, 0x00	; 0
    377a:	a0 e0       	ldi	r26, 0x00	; 0
    377c:	b0 e0       	ldi	r27, 0x00	; 0
    377e:	2e 15       	cp	r18, r14
    3780:	3f 05       	cpc	r19, r15
    3782:	40 07       	cpc	r20, r16
    3784:	51 07       	cpc	r21, r17
    3786:	18 f0       	brcs	.+6      	; 0x378e <__mulsf3+0xe6>
    3788:	80 e0       	ldi	r24, 0x00	; 0
    378a:	90 e0       	ldi	r25, 0x00	; 0
    378c:	dc 01       	movw	r26, r24
    378e:	82 0d       	add	r24, r2
    3790:	93 1d       	adc	r25, r3
    3792:	a4 1d       	adc	r26, r4
    3794:	b5 1d       	adc	r27, r5
    3796:	aa 0c       	add	r10, r10
    3798:	bb 1c       	adc	r11, r11
    379a:	cc 1c       	adc	r12, r12
    379c:	dd 1c       	adc	r13, r13
    379e:	17 ff       	sbrs	r17, 7
    37a0:	09 c0       	rjmp	.+18     	; 0x37b4 <__mulsf3+0x10c>
    37a2:	61 e0       	ldi	r22, 0x01	; 1
    37a4:	26 2e       	mov	r2, r22
    37a6:	31 2c       	mov	r3, r1
    37a8:	41 2c       	mov	r4, r1
    37aa:	51 2c       	mov	r5, r1
    37ac:	a2 28       	or	r10, r2
    37ae:	b3 28       	or	r11, r3
    37b0:	c4 28       	or	r12, r4
    37b2:	d5 28       	or	r13, r5
    37b4:	31 97       	sbiw	r30, 0x01	; 1
    37b6:	49 f0       	breq	.+18     	; 0x37ca <__mulsf3+0x122>
    37b8:	ee 0c       	add	r14, r14
    37ba:	ff 1c       	adc	r15, r15
    37bc:	00 1f       	adc	r16, r16
    37be:	11 1f       	adc	r17, r17
    37c0:	96 94       	lsr	r9
    37c2:	87 94       	ror	r8
    37c4:	77 94       	ror	r7
    37c6:	67 94       	ror	r6
    37c8:	c6 cf       	rjmp	.-116    	; 0x3756 <__mulsf3+0xae>
    37ca:	6b 89       	ldd	r22, Y+19	; 0x13
    37cc:	7c 89       	ldd	r23, Y+20	; 0x14
    37ce:	eb 85       	ldd	r30, Y+11	; 0x0b
    37d0:	fc 85       	ldd	r31, Y+12	; 0x0c
    37d2:	6e 0f       	add	r22, r30
    37d4:	7f 1f       	adc	r23, r31
    37d6:	6e 5f       	subi	r22, 0xFE	; 254
    37d8:	7f 4f       	sbci	r23, 0xFF	; 255
    37da:	7c 8f       	std	Y+28, r23	; 0x1c
    37dc:	6b 8f       	std	Y+27, r22	; 0x1b
    37de:	61 e0       	ldi	r22, 0x01	; 1
    37e0:	ea 85       	ldd	r30, Y+10	; 0x0a
    37e2:	7a 89       	ldd	r23, Y+18	; 0x12
    37e4:	e7 17       	cp	r30, r23
    37e6:	09 f4       	brne	.+2      	; 0x37ea <__mulsf3+0x142>
    37e8:	60 e0       	ldi	r22, 0x00	; 0
    37ea:	6a 8f       	std	Y+26, r22	; 0x1a
    37ec:	6b 8d       	ldd	r22, Y+27	; 0x1b
    37ee:	7c 8d       	ldd	r23, Y+28	; 0x1c
    37f0:	10 c0       	rjmp	.+32     	; 0x3812 <__mulsf3+0x16a>
    37f2:	fc 01       	movw	r30, r24
    37f4:	e1 70       	andi	r30, 0x01	; 1
    37f6:	f0 70       	andi	r31, 0x00	; 0
    37f8:	30 97       	sbiw	r30, 0x00	; 0
    37fa:	29 f0       	breq	.+10     	; 0x3806 <__mulsf3+0x15e>
    37fc:	56 95       	lsr	r21
    37fe:	47 95       	ror	r20
    3800:	37 95       	ror	r19
    3802:	27 95       	ror	r18
    3804:	50 68       	ori	r21, 0x80	; 128
    3806:	b6 95       	lsr	r27
    3808:	a7 95       	ror	r26
    380a:	97 95       	ror	r25
    380c:	87 95       	ror	r24
    380e:	6f 5f       	subi	r22, 0xFF	; 255
    3810:	7f 4f       	sbci	r23, 0xFF	; 255
    3812:	b7 fd       	sbrc	r27, 7
    3814:	ee cf       	rjmp	.-36     	; 0x37f2 <__mulsf3+0x14a>
    3816:	0c c0       	rjmp	.+24     	; 0x3830 <__mulsf3+0x188>
    3818:	88 0f       	add	r24, r24
    381a:	99 1f       	adc	r25, r25
    381c:	aa 1f       	adc	r26, r26
    381e:	bb 1f       	adc	r27, r27
    3820:	57 fd       	sbrc	r21, 7
    3822:	81 60       	ori	r24, 0x01	; 1
    3824:	22 0f       	add	r18, r18
    3826:	33 1f       	adc	r19, r19
    3828:	44 1f       	adc	r20, r20
    382a:	55 1f       	adc	r21, r21
    382c:	61 50       	subi	r22, 0x01	; 1
    382e:	70 40       	sbci	r23, 0x00	; 0
    3830:	80 30       	cpi	r24, 0x00	; 0
    3832:	e0 e0       	ldi	r30, 0x00	; 0
    3834:	9e 07       	cpc	r25, r30
    3836:	e0 e0       	ldi	r30, 0x00	; 0
    3838:	ae 07       	cpc	r26, r30
    383a:	e0 e4       	ldi	r30, 0x40	; 64
    383c:	be 07       	cpc	r27, r30
    383e:	60 f3       	brcs	.-40     	; 0x3818 <__mulsf3+0x170>
    3840:	6b 8f       	std	Y+27, r22	; 0x1b
    3842:	7c 8f       	std	Y+28, r23	; 0x1c
    3844:	6f e7       	ldi	r22, 0x7F	; 127
    3846:	e6 2e       	mov	r14, r22
    3848:	f1 2c       	mov	r15, r1
    384a:	01 2d       	mov	r16, r1
    384c:	11 2d       	mov	r17, r1
    384e:	e8 22       	and	r14, r24
    3850:	f9 22       	and	r15, r25
    3852:	0a 23       	and	r16, r26
    3854:	1b 23       	and	r17, r27
    3856:	60 e4       	ldi	r22, 0x40	; 64
    3858:	e6 16       	cp	r14, r22
    385a:	f1 04       	cpc	r15, r1
    385c:	01 05       	cpc	r16, r1
    385e:	11 05       	cpc	r17, r1
    3860:	61 f4       	brne	.+24     	; 0x387a <__mulsf3+0x1d2>
    3862:	87 fd       	sbrc	r24, 7
    3864:	0a c0       	rjmp	.+20     	; 0x387a <__mulsf3+0x1d2>
    3866:	21 15       	cp	r18, r1
    3868:	31 05       	cpc	r19, r1
    386a:	41 05       	cpc	r20, r1
    386c:	51 05       	cpc	r21, r1
    386e:	29 f0       	breq	.+10     	; 0x387a <__mulsf3+0x1d2>
    3870:	80 5c       	subi	r24, 0xC0	; 192
    3872:	9f 4f       	sbci	r25, 0xFF	; 255
    3874:	af 4f       	sbci	r26, 0xFF	; 255
    3876:	bf 4f       	sbci	r27, 0xFF	; 255
    3878:	80 78       	andi	r24, 0x80	; 128
    387a:	8d 8f       	std	Y+29, r24	; 0x1d
    387c:	9e 8f       	std	Y+30, r25	; 0x1e
    387e:	af 8f       	std	Y+31, r26	; 0x1f
    3880:	b8 a3       	std	Y+32, r27	; 0x20
    3882:	83 e0       	ldi	r24, 0x03	; 3
    3884:	89 8f       	std	Y+25, r24	; 0x19
    3886:	ce 01       	movw	r24, r28
    3888:	49 96       	adiw	r24, 0x19	; 25
    388a:	02 c0       	rjmp	.+4      	; 0x3890 <__mulsf3+0x1e8>
    388c:	89 ee       	ldi	r24, 0xE9	; 233
    388e:	92 e0       	ldi	r25, 0x02	; 2
    3890:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <__pack_f>
    3894:	a0 96       	adiw	r28, 0x20	; 32
    3896:	e2 e1       	ldi	r30, 0x12	; 18
    3898:	0c 94 dc 1e 	jmp	0x3db8	; 0x3db8 <__epilogue_restores__>

0000389c <__gtsf2>:
    389c:	a8 e1       	ldi	r26, 0x18	; 24
    389e:	b0 e0       	ldi	r27, 0x00	; 0
    38a0:	e4 e5       	ldi	r30, 0x54	; 84
    38a2:	fc e1       	ldi	r31, 0x1C	; 28
    38a4:	0c 94 cc 1e 	jmp	0x3d98	; 0x3d98 <__prologue_saves__+0x18>
    38a8:	69 83       	std	Y+1, r22	; 0x01
    38aa:	7a 83       	std	Y+2, r23	; 0x02
    38ac:	8b 83       	std	Y+3, r24	; 0x03
    38ae:	9c 83       	std	Y+4, r25	; 0x04
    38b0:	2d 83       	std	Y+5, r18	; 0x05
    38b2:	3e 83       	std	Y+6, r19	; 0x06
    38b4:	4f 83       	std	Y+7, r20	; 0x07
    38b6:	58 87       	std	Y+8, r21	; 0x08
    38b8:	8e 01       	movw	r16, r28
    38ba:	07 5f       	subi	r16, 0xF7	; 247
    38bc:	1f 4f       	sbci	r17, 0xFF	; 255
    38be:	ce 01       	movw	r24, r28
    38c0:	01 96       	adiw	r24, 0x01	; 1
    38c2:	b8 01       	movw	r22, r16
    38c4:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <__unpack_f>
    38c8:	81 e1       	ldi	r24, 0x11	; 17
    38ca:	e8 2e       	mov	r14, r24
    38cc:	f1 2c       	mov	r15, r1
    38ce:	ec 0e       	add	r14, r28
    38d0:	fd 1e       	adc	r15, r29
    38d2:	ce 01       	movw	r24, r28
    38d4:	05 96       	adiw	r24, 0x05	; 5
    38d6:	b7 01       	movw	r22, r14
    38d8:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <__unpack_f>
    38dc:	89 85       	ldd	r24, Y+9	; 0x09
    38de:	82 30       	cpi	r24, 0x02	; 2
    38e0:	40 f0       	brcs	.+16     	; 0x38f2 <__gtsf2+0x56>
    38e2:	89 89       	ldd	r24, Y+17	; 0x11
    38e4:	82 30       	cpi	r24, 0x02	; 2
    38e6:	28 f0       	brcs	.+10     	; 0x38f2 <__gtsf2+0x56>
    38e8:	c8 01       	movw	r24, r16
    38ea:	b7 01       	movw	r22, r14
    38ec:	0e 94 67 1e 	call	0x3cce	; 0x3cce <__fpcmp_parts_f>
    38f0:	01 c0       	rjmp	.+2      	; 0x38f4 <__gtsf2+0x58>
    38f2:	8f ef       	ldi	r24, 0xFF	; 255
    38f4:	68 96       	adiw	r28, 0x18	; 24
    38f6:	e6 e0       	ldi	r30, 0x06	; 6
    38f8:	0c 94 e8 1e 	jmp	0x3dd0	; 0x3dd0 <__epilogue_restores__+0x18>

000038fc <__gesf2>:
    38fc:	a8 e1       	ldi	r26, 0x18	; 24
    38fe:	b0 e0       	ldi	r27, 0x00	; 0
    3900:	e4 e8       	ldi	r30, 0x84	; 132
    3902:	fc e1       	ldi	r31, 0x1C	; 28
    3904:	0c 94 cc 1e 	jmp	0x3d98	; 0x3d98 <__prologue_saves__+0x18>
    3908:	69 83       	std	Y+1, r22	; 0x01
    390a:	7a 83       	std	Y+2, r23	; 0x02
    390c:	8b 83       	std	Y+3, r24	; 0x03
    390e:	9c 83       	std	Y+4, r25	; 0x04
    3910:	2d 83       	std	Y+5, r18	; 0x05
    3912:	3e 83       	std	Y+6, r19	; 0x06
    3914:	4f 83       	std	Y+7, r20	; 0x07
    3916:	58 87       	std	Y+8, r21	; 0x08
    3918:	8e 01       	movw	r16, r28
    391a:	07 5f       	subi	r16, 0xF7	; 247
    391c:	1f 4f       	sbci	r17, 0xFF	; 255
    391e:	ce 01       	movw	r24, r28
    3920:	01 96       	adiw	r24, 0x01	; 1
    3922:	b8 01       	movw	r22, r16
    3924:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <__unpack_f>
    3928:	81 e1       	ldi	r24, 0x11	; 17
    392a:	e8 2e       	mov	r14, r24
    392c:	f1 2c       	mov	r15, r1
    392e:	ec 0e       	add	r14, r28
    3930:	fd 1e       	adc	r15, r29
    3932:	ce 01       	movw	r24, r28
    3934:	05 96       	adiw	r24, 0x05	; 5
    3936:	b7 01       	movw	r22, r14
    3938:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <__unpack_f>
    393c:	89 85       	ldd	r24, Y+9	; 0x09
    393e:	82 30       	cpi	r24, 0x02	; 2
    3940:	40 f0       	brcs	.+16     	; 0x3952 <__gesf2+0x56>
    3942:	89 89       	ldd	r24, Y+17	; 0x11
    3944:	82 30       	cpi	r24, 0x02	; 2
    3946:	28 f0       	brcs	.+10     	; 0x3952 <__gesf2+0x56>
    3948:	c8 01       	movw	r24, r16
    394a:	b7 01       	movw	r22, r14
    394c:	0e 94 67 1e 	call	0x3cce	; 0x3cce <__fpcmp_parts_f>
    3950:	01 c0       	rjmp	.+2      	; 0x3954 <__gesf2+0x58>
    3952:	8f ef       	ldi	r24, 0xFF	; 255
    3954:	68 96       	adiw	r28, 0x18	; 24
    3956:	e6 e0       	ldi	r30, 0x06	; 6
    3958:	0c 94 e8 1e 	jmp	0x3dd0	; 0x3dd0 <__epilogue_restores__+0x18>

0000395c <__ltsf2>:
    395c:	a8 e1       	ldi	r26, 0x18	; 24
    395e:	b0 e0       	ldi	r27, 0x00	; 0
    3960:	e4 eb       	ldi	r30, 0xB4	; 180
    3962:	fc e1       	ldi	r31, 0x1C	; 28
    3964:	0c 94 cc 1e 	jmp	0x3d98	; 0x3d98 <__prologue_saves__+0x18>
    3968:	69 83       	std	Y+1, r22	; 0x01
    396a:	7a 83       	std	Y+2, r23	; 0x02
    396c:	8b 83       	std	Y+3, r24	; 0x03
    396e:	9c 83       	std	Y+4, r25	; 0x04
    3970:	2d 83       	std	Y+5, r18	; 0x05
    3972:	3e 83       	std	Y+6, r19	; 0x06
    3974:	4f 83       	std	Y+7, r20	; 0x07
    3976:	58 87       	std	Y+8, r21	; 0x08
    3978:	8e 01       	movw	r16, r28
    397a:	07 5f       	subi	r16, 0xF7	; 247
    397c:	1f 4f       	sbci	r17, 0xFF	; 255
    397e:	ce 01       	movw	r24, r28
    3980:	01 96       	adiw	r24, 0x01	; 1
    3982:	b8 01       	movw	r22, r16
    3984:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <__unpack_f>
    3988:	81 e1       	ldi	r24, 0x11	; 17
    398a:	e8 2e       	mov	r14, r24
    398c:	f1 2c       	mov	r15, r1
    398e:	ec 0e       	add	r14, r28
    3990:	fd 1e       	adc	r15, r29
    3992:	ce 01       	movw	r24, r28
    3994:	05 96       	adiw	r24, 0x05	; 5
    3996:	b7 01       	movw	r22, r14
    3998:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <__unpack_f>
    399c:	89 85       	ldd	r24, Y+9	; 0x09
    399e:	82 30       	cpi	r24, 0x02	; 2
    39a0:	40 f0       	brcs	.+16     	; 0x39b2 <__ltsf2+0x56>
    39a2:	89 89       	ldd	r24, Y+17	; 0x11
    39a4:	82 30       	cpi	r24, 0x02	; 2
    39a6:	28 f0       	brcs	.+10     	; 0x39b2 <__ltsf2+0x56>
    39a8:	c8 01       	movw	r24, r16
    39aa:	b7 01       	movw	r22, r14
    39ac:	0e 94 67 1e 	call	0x3cce	; 0x3cce <__fpcmp_parts_f>
    39b0:	01 c0       	rjmp	.+2      	; 0x39b4 <__ltsf2+0x58>
    39b2:	81 e0       	ldi	r24, 0x01	; 1
    39b4:	68 96       	adiw	r28, 0x18	; 24
    39b6:	e6 e0       	ldi	r30, 0x06	; 6
    39b8:	0c 94 e8 1e 	jmp	0x3dd0	; 0x3dd0 <__epilogue_restores__+0x18>

000039bc <__fixsfsi>:
    39bc:	ac e0       	ldi	r26, 0x0C	; 12
    39be:	b0 e0       	ldi	r27, 0x00	; 0
    39c0:	e4 ee       	ldi	r30, 0xE4	; 228
    39c2:	fc e1       	ldi	r31, 0x1C	; 28
    39c4:	0c 94 d0 1e 	jmp	0x3da0	; 0x3da0 <__prologue_saves__+0x20>
    39c8:	69 83       	std	Y+1, r22	; 0x01
    39ca:	7a 83       	std	Y+2, r23	; 0x02
    39cc:	8b 83       	std	Y+3, r24	; 0x03
    39ce:	9c 83       	std	Y+4, r25	; 0x04
    39d0:	ce 01       	movw	r24, r28
    39d2:	01 96       	adiw	r24, 0x01	; 1
    39d4:	be 01       	movw	r22, r28
    39d6:	6b 5f       	subi	r22, 0xFB	; 251
    39d8:	7f 4f       	sbci	r23, 0xFF	; 255
    39da:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <__unpack_f>
    39de:	8d 81       	ldd	r24, Y+5	; 0x05
    39e0:	82 30       	cpi	r24, 0x02	; 2
    39e2:	81 f1       	breq	.+96     	; 0x3a44 <__fixsfsi+0x88>
    39e4:	82 30       	cpi	r24, 0x02	; 2
    39e6:	70 f1       	brcs	.+92     	; 0x3a44 <__fixsfsi+0x88>
    39e8:	84 30       	cpi	r24, 0x04	; 4
    39ea:	21 f4       	brne	.+8      	; 0x39f4 <__fixsfsi+0x38>
    39ec:	8e 81       	ldd	r24, Y+6	; 0x06
    39ee:	88 23       	and	r24, r24
    39f0:	69 f1       	breq	.+90     	; 0x3a4c <__fixsfsi+0x90>
    39f2:	0a c0       	rjmp	.+20     	; 0x3a08 <__fixsfsi+0x4c>
    39f4:	2f 81       	ldd	r18, Y+7	; 0x07
    39f6:	38 85       	ldd	r19, Y+8	; 0x08
    39f8:	37 fd       	sbrc	r19, 7
    39fa:	24 c0       	rjmp	.+72     	; 0x3a44 <__fixsfsi+0x88>
    39fc:	6e 81       	ldd	r22, Y+6	; 0x06
    39fe:	2f 31       	cpi	r18, 0x1F	; 31
    3a00:	31 05       	cpc	r19, r1
    3a02:	3c f0       	brlt	.+14     	; 0x3a12 <__fixsfsi+0x56>
    3a04:	66 23       	and	r22, r22
    3a06:	11 f1       	breq	.+68     	; 0x3a4c <__fixsfsi+0x90>
    3a08:	20 e0       	ldi	r18, 0x00	; 0
    3a0a:	30 e0       	ldi	r19, 0x00	; 0
    3a0c:	40 e0       	ldi	r20, 0x00	; 0
    3a0e:	50 e8       	ldi	r21, 0x80	; 128
    3a10:	21 c0       	rjmp	.+66     	; 0x3a54 <__fixsfsi+0x98>
    3a12:	8e e1       	ldi	r24, 0x1E	; 30
    3a14:	90 e0       	ldi	r25, 0x00	; 0
    3a16:	82 1b       	sub	r24, r18
    3a18:	93 0b       	sbc	r25, r19
    3a1a:	29 85       	ldd	r18, Y+9	; 0x09
    3a1c:	3a 85       	ldd	r19, Y+10	; 0x0a
    3a1e:	4b 85       	ldd	r20, Y+11	; 0x0b
    3a20:	5c 85       	ldd	r21, Y+12	; 0x0c
    3a22:	04 c0       	rjmp	.+8      	; 0x3a2c <__fixsfsi+0x70>
    3a24:	56 95       	lsr	r21
    3a26:	47 95       	ror	r20
    3a28:	37 95       	ror	r19
    3a2a:	27 95       	ror	r18
    3a2c:	8a 95       	dec	r24
    3a2e:	d2 f7       	brpl	.-12     	; 0x3a24 <__fixsfsi+0x68>
    3a30:	66 23       	and	r22, r22
    3a32:	81 f0       	breq	.+32     	; 0x3a54 <__fixsfsi+0x98>
    3a34:	50 95       	com	r21
    3a36:	40 95       	com	r20
    3a38:	30 95       	com	r19
    3a3a:	21 95       	neg	r18
    3a3c:	3f 4f       	sbci	r19, 0xFF	; 255
    3a3e:	4f 4f       	sbci	r20, 0xFF	; 255
    3a40:	5f 4f       	sbci	r21, 0xFF	; 255
    3a42:	08 c0       	rjmp	.+16     	; 0x3a54 <__fixsfsi+0x98>
    3a44:	20 e0       	ldi	r18, 0x00	; 0
    3a46:	30 e0       	ldi	r19, 0x00	; 0
    3a48:	a9 01       	movw	r20, r18
    3a4a:	04 c0       	rjmp	.+8      	; 0x3a54 <__fixsfsi+0x98>
    3a4c:	2f ef       	ldi	r18, 0xFF	; 255
    3a4e:	3f ef       	ldi	r19, 0xFF	; 255
    3a50:	4f ef       	ldi	r20, 0xFF	; 255
    3a52:	5f e7       	ldi	r21, 0x7F	; 127
    3a54:	b9 01       	movw	r22, r18
    3a56:	ca 01       	movw	r24, r20
    3a58:	2c 96       	adiw	r28, 0x0c	; 12
    3a5a:	e2 e0       	ldi	r30, 0x02	; 2
    3a5c:	0c 94 ec 1e 	jmp	0x3dd8	; 0x3dd8 <__epilogue_restores__+0x20>

00003a60 <__pack_f>:
    3a60:	ef 92       	push	r14
    3a62:	ff 92       	push	r15
    3a64:	0f 93       	push	r16
    3a66:	1f 93       	push	r17
    3a68:	cf 93       	push	r28
    3a6a:	df 93       	push	r29
    3a6c:	fc 01       	movw	r30, r24
    3a6e:	24 81       	ldd	r18, Z+4	; 0x04
    3a70:	35 81       	ldd	r19, Z+5	; 0x05
    3a72:	46 81       	ldd	r20, Z+6	; 0x06
    3a74:	57 81       	ldd	r21, Z+7	; 0x07
    3a76:	61 81       	ldd	r22, Z+1	; 0x01
    3a78:	80 81       	ld	r24, Z
    3a7a:	82 30       	cpi	r24, 0x02	; 2
    3a7c:	20 f4       	brcc	.+8      	; 0x3a86 <__pack_f+0x26>
    3a7e:	40 61       	ori	r20, 0x10	; 16
    3a80:	ef ef       	ldi	r30, 0xFF	; 255
    3a82:	f0 e0       	ldi	r31, 0x00	; 0
    3a84:	a3 c0       	rjmp	.+326    	; 0x3bcc <__pack_f+0x16c>
    3a86:	84 30       	cpi	r24, 0x04	; 4
    3a88:	09 f4       	brne	.+2      	; 0x3a8c <__pack_f+0x2c>
    3a8a:	9b c0       	rjmp	.+310    	; 0x3bc2 <__pack_f+0x162>
    3a8c:	82 30       	cpi	r24, 0x02	; 2
    3a8e:	09 f4       	brne	.+2      	; 0x3a92 <__pack_f+0x32>
    3a90:	92 c0       	rjmp	.+292    	; 0x3bb6 <__pack_f+0x156>
    3a92:	21 15       	cp	r18, r1
    3a94:	31 05       	cpc	r19, r1
    3a96:	41 05       	cpc	r20, r1
    3a98:	51 05       	cpc	r21, r1
    3a9a:	09 f4       	brne	.+2      	; 0x3a9e <__pack_f+0x3e>
    3a9c:	8f c0       	rjmp	.+286    	; 0x3bbc <__pack_f+0x15c>
    3a9e:	02 80       	ldd	r0, Z+2	; 0x02
    3aa0:	f3 81       	ldd	r31, Z+3	; 0x03
    3aa2:	e0 2d       	mov	r30, r0
    3aa4:	8f ef       	ldi	r24, 0xFF	; 255
    3aa6:	e2 38       	cpi	r30, 0x82	; 130
    3aa8:	f8 07       	cpc	r31, r24
    3aaa:	0c f0       	brlt	.+2      	; 0x3aae <__pack_f+0x4e>
    3aac:	5a c0       	rjmp	.+180    	; 0x3b62 <__pack_f+0x102>
    3aae:	c2 e8       	ldi	r28, 0x82	; 130
    3ab0:	df ef       	ldi	r29, 0xFF	; 255
    3ab2:	ce 1b       	sub	r28, r30
    3ab4:	df 0b       	sbc	r29, r31
    3ab6:	ca 31       	cpi	r28, 0x1A	; 26
    3ab8:	d1 05       	cpc	r29, r1
    3aba:	6c f5       	brge	.+90     	; 0x3b16 <__pack_f+0xb6>
    3abc:	79 01       	movw	r14, r18
    3abe:	8a 01       	movw	r16, r20
    3ac0:	0c 2e       	mov	r0, r28
    3ac2:	04 c0       	rjmp	.+8      	; 0x3acc <__pack_f+0x6c>
    3ac4:	16 95       	lsr	r17
    3ac6:	07 95       	ror	r16
    3ac8:	f7 94       	ror	r15
    3aca:	e7 94       	ror	r14
    3acc:	0a 94       	dec	r0
    3ace:	d2 f7       	brpl	.-12     	; 0x3ac4 <__pack_f+0x64>
    3ad0:	81 e0       	ldi	r24, 0x01	; 1
    3ad2:	90 e0       	ldi	r25, 0x00	; 0
    3ad4:	a0 e0       	ldi	r26, 0x00	; 0
    3ad6:	b0 e0       	ldi	r27, 0x00	; 0
    3ad8:	0c 2e       	mov	r0, r28
    3ada:	04 c0       	rjmp	.+8      	; 0x3ae4 <__pack_f+0x84>
    3adc:	88 0f       	add	r24, r24
    3ade:	99 1f       	adc	r25, r25
    3ae0:	aa 1f       	adc	r26, r26
    3ae2:	bb 1f       	adc	r27, r27
    3ae4:	0a 94       	dec	r0
    3ae6:	d2 f7       	brpl	.-12     	; 0x3adc <__pack_f+0x7c>
    3ae8:	01 97       	sbiw	r24, 0x01	; 1
    3aea:	a1 09       	sbc	r26, r1
    3aec:	b1 09       	sbc	r27, r1
    3aee:	82 23       	and	r24, r18
    3af0:	93 23       	and	r25, r19
    3af2:	a4 23       	and	r26, r20
    3af4:	b5 23       	and	r27, r21
    3af6:	21 e0       	ldi	r18, 0x01	; 1
    3af8:	30 e0       	ldi	r19, 0x00	; 0
    3afa:	40 e0       	ldi	r20, 0x00	; 0
    3afc:	50 e0       	ldi	r21, 0x00	; 0
    3afe:	00 97       	sbiw	r24, 0x00	; 0
    3b00:	a1 05       	cpc	r26, r1
    3b02:	b1 05       	cpc	r27, r1
    3b04:	19 f4       	brne	.+6      	; 0x3b0c <__pack_f+0xac>
    3b06:	20 e0       	ldi	r18, 0x00	; 0
    3b08:	30 e0       	ldi	r19, 0x00	; 0
    3b0a:	a9 01       	movw	r20, r18
    3b0c:	2e 29       	or	r18, r14
    3b0e:	3f 29       	or	r19, r15
    3b10:	40 2b       	or	r20, r16
    3b12:	51 2b       	or	r21, r17
    3b14:	03 c0       	rjmp	.+6      	; 0x3b1c <__pack_f+0xbc>
    3b16:	20 e0       	ldi	r18, 0x00	; 0
    3b18:	30 e0       	ldi	r19, 0x00	; 0
    3b1a:	a9 01       	movw	r20, r18
    3b1c:	da 01       	movw	r26, r20
    3b1e:	c9 01       	movw	r24, r18
    3b20:	8f 77       	andi	r24, 0x7F	; 127
    3b22:	90 70       	andi	r25, 0x00	; 0
    3b24:	a0 70       	andi	r26, 0x00	; 0
    3b26:	b0 70       	andi	r27, 0x00	; 0
    3b28:	80 34       	cpi	r24, 0x40	; 64
    3b2a:	91 05       	cpc	r25, r1
    3b2c:	a1 05       	cpc	r26, r1
    3b2e:	b1 05       	cpc	r27, r1
    3b30:	39 f4       	brne	.+14     	; 0x3b40 <__pack_f+0xe0>
    3b32:	27 ff       	sbrs	r18, 7
    3b34:	09 c0       	rjmp	.+18     	; 0x3b48 <__pack_f+0xe8>
    3b36:	20 5c       	subi	r18, 0xC0	; 192
    3b38:	3f 4f       	sbci	r19, 0xFF	; 255
    3b3a:	4f 4f       	sbci	r20, 0xFF	; 255
    3b3c:	5f 4f       	sbci	r21, 0xFF	; 255
    3b3e:	04 c0       	rjmp	.+8      	; 0x3b48 <__pack_f+0xe8>
    3b40:	21 5c       	subi	r18, 0xC1	; 193
    3b42:	3f 4f       	sbci	r19, 0xFF	; 255
    3b44:	4f 4f       	sbci	r20, 0xFF	; 255
    3b46:	5f 4f       	sbci	r21, 0xFF	; 255
    3b48:	e1 e0       	ldi	r30, 0x01	; 1
    3b4a:	f0 e0       	ldi	r31, 0x00	; 0
    3b4c:	20 30       	cpi	r18, 0x00	; 0
    3b4e:	80 e0       	ldi	r24, 0x00	; 0
    3b50:	38 07       	cpc	r19, r24
    3b52:	80 e0       	ldi	r24, 0x00	; 0
    3b54:	48 07       	cpc	r20, r24
    3b56:	80 e4       	ldi	r24, 0x40	; 64
    3b58:	58 07       	cpc	r21, r24
    3b5a:	28 f5       	brcc	.+74     	; 0x3ba6 <__pack_f+0x146>
    3b5c:	e0 e0       	ldi	r30, 0x00	; 0
    3b5e:	f0 e0       	ldi	r31, 0x00	; 0
    3b60:	22 c0       	rjmp	.+68     	; 0x3ba6 <__pack_f+0x146>
    3b62:	e0 38       	cpi	r30, 0x80	; 128
    3b64:	f1 05       	cpc	r31, r1
    3b66:	6c f5       	brge	.+90     	; 0x3bc2 <__pack_f+0x162>
    3b68:	e1 58       	subi	r30, 0x81	; 129
    3b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b6c:	da 01       	movw	r26, r20
    3b6e:	c9 01       	movw	r24, r18
    3b70:	8f 77       	andi	r24, 0x7F	; 127
    3b72:	90 70       	andi	r25, 0x00	; 0
    3b74:	a0 70       	andi	r26, 0x00	; 0
    3b76:	b0 70       	andi	r27, 0x00	; 0
    3b78:	80 34       	cpi	r24, 0x40	; 64
    3b7a:	91 05       	cpc	r25, r1
    3b7c:	a1 05       	cpc	r26, r1
    3b7e:	b1 05       	cpc	r27, r1
    3b80:	39 f4       	brne	.+14     	; 0x3b90 <__pack_f+0x130>
    3b82:	27 ff       	sbrs	r18, 7
    3b84:	09 c0       	rjmp	.+18     	; 0x3b98 <__pack_f+0x138>
    3b86:	20 5c       	subi	r18, 0xC0	; 192
    3b88:	3f 4f       	sbci	r19, 0xFF	; 255
    3b8a:	4f 4f       	sbci	r20, 0xFF	; 255
    3b8c:	5f 4f       	sbci	r21, 0xFF	; 255
    3b8e:	04 c0       	rjmp	.+8      	; 0x3b98 <__pack_f+0x138>
    3b90:	21 5c       	subi	r18, 0xC1	; 193
    3b92:	3f 4f       	sbci	r19, 0xFF	; 255
    3b94:	4f 4f       	sbci	r20, 0xFF	; 255
    3b96:	5f 4f       	sbci	r21, 0xFF	; 255
    3b98:	57 ff       	sbrs	r21, 7
    3b9a:	05 c0       	rjmp	.+10     	; 0x3ba6 <__pack_f+0x146>
    3b9c:	56 95       	lsr	r21
    3b9e:	47 95       	ror	r20
    3ba0:	37 95       	ror	r19
    3ba2:	27 95       	ror	r18
    3ba4:	31 96       	adiw	r30, 0x01	; 1
    3ba6:	87 e0       	ldi	r24, 0x07	; 7
    3ba8:	56 95       	lsr	r21
    3baa:	47 95       	ror	r20
    3bac:	37 95       	ror	r19
    3bae:	27 95       	ror	r18
    3bb0:	8a 95       	dec	r24
    3bb2:	d1 f7       	brne	.-12     	; 0x3ba8 <__pack_f+0x148>
    3bb4:	0b c0       	rjmp	.+22     	; 0x3bcc <__pack_f+0x16c>
    3bb6:	e0 e0       	ldi	r30, 0x00	; 0
    3bb8:	f0 e0       	ldi	r31, 0x00	; 0
    3bba:	05 c0       	rjmp	.+10     	; 0x3bc6 <__pack_f+0x166>
    3bbc:	e0 e0       	ldi	r30, 0x00	; 0
    3bbe:	f0 e0       	ldi	r31, 0x00	; 0
    3bc0:	05 c0       	rjmp	.+10     	; 0x3bcc <__pack_f+0x16c>
    3bc2:	ef ef       	ldi	r30, 0xFF	; 255
    3bc4:	f0 e0       	ldi	r31, 0x00	; 0
    3bc6:	20 e0       	ldi	r18, 0x00	; 0
    3bc8:	30 e0       	ldi	r19, 0x00	; 0
    3bca:	a9 01       	movw	r20, r18
    3bcc:	8e 2f       	mov	r24, r30
    3bce:	87 95       	ror	r24
    3bd0:	88 27       	eor	r24, r24
    3bd2:	87 95       	ror	r24
    3bd4:	94 2f       	mov	r25, r20
    3bd6:	9f 77       	andi	r25, 0x7F	; 127
    3bd8:	67 95       	ror	r22
    3bda:	66 27       	eor	r22, r22
    3bdc:	67 95       	ror	r22
    3bde:	e6 95       	lsr	r30
    3be0:	e2 2e       	mov	r14, r18
    3be2:	a9 2f       	mov	r26, r25
    3be4:	a8 2b       	or	r26, r24
    3be6:	fe 2f       	mov	r31, r30
    3be8:	f6 2b       	or	r31, r22
    3bea:	62 2f       	mov	r22, r18
    3bec:	73 2f       	mov	r23, r19
    3bee:	8a 2f       	mov	r24, r26
    3bf0:	9f 2f       	mov	r25, r31
    3bf2:	cd b7       	in	r28, 0x3d	; 61
    3bf4:	de b7       	in	r29, 0x3e	; 62
    3bf6:	e6 e0       	ldi	r30, 0x06	; 6
    3bf8:	0c 94 e8 1e 	jmp	0x3dd0	; 0x3dd0 <__epilogue_restores__+0x18>

00003bfc <__unpack_f>:
    3bfc:	dc 01       	movw	r26, r24
    3bfe:	fb 01       	movw	r30, r22
    3c00:	2c 91       	ld	r18, X
    3c02:	11 96       	adiw	r26, 0x01	; 1
    3c04:	3c 91       	ld	r19, X
    3c06:	11 97       	sbiw	r26, 0x01	; 1
    3c08:	12 96       	adiw	r26, 0x02	; 2
    3c0a:	8c 91       	ld	r24, X
    3c0c:	12 97       	sbiw	r26, 0x02	; 2
    3c0e:	48 2f       	mov	r20, r24
    3c10:	4f 77       	andi	r20, 0x7F	; 127
    3c12:	50 e0       	ldi	r21, 0x00	; 0
    3c14:	98 2f       	mov	r25, r24
    3c16:	99 1f       	adc	r25, r25
    3c18:	99 27       	eor	r25, r25
    3c1a:	99 1f       	adc	r25, r25
    3c1c:	13 96       	adiw	r26, 0x03	; 3
    3c1e:	6c 91       	ld	r22, X
    3c20:	13 97       	sbiw	r26, 0x03	; 3
    3c22:	86 2f       	mov	r24, r22
    3c24:	88 0f       	add	r24, r24
    3c26:	89 2b       	or	r24, r25
    3c28:	90 e0       	ldi	r25, 0x00	; 0
    3c2a:	66 1f       	adc	r22, r22
    3c2c:	66 27       	eor	r22, r22
    3c2e:	66 1f       	adc	r22, r22
    3c30:	61 83       	std	Z+1, r22	; 0x01
    3c32:	00 97       	sbiw	r24, 0x00	; 0
    3c34:	39 f5       	brne	.+78     	; 0x3c84 <__unpack_f+0x88>
    3c36:	21 15       	cp	r18, r1
    3c38:	31 05       	cpc	r19, r1
    3c3a:	41 05       	cpc	r20, r1
    3c3c:	51 05       	cpc	r21, r1
    3c3e:	11 f4       	brne	.+4      	; 0x3c44 <__unpack_f+0x48>
    3c40:	82 e0       	ldi	r24, 0x02	; 2
    3c42:	29 c0       	rjmp	.+82     	; 0x3c96 <__unpack_f+0x9a>
    3c44:	82 e8       	ldi	r24, 0x82	; 130
    3c46:	9f ef       	ldi	r25, 0xFF	; 255
    3c48:	93 83       	std	Z+3, r25	; 0x03
    3c4a:	82 83       	std	Z+2, r24	; 0x02
    3c4c:	67 e0       	ldi	r22, 0x07	; 7
    3c4e:	22 0f       	add	r18, r18
    3c50:	33 1f       	adc	r19, r19
    3c52:	44 1f       	adc	r20, r20
    3c54:	55 1f       	adc	r21, r21
    3c56:	6a 95       	dec	r22
    3c58:	d1 f7       	brne	.-12     	; 0x3c4e <__unpack_f+0x52>
    3c5a:	83 e0       	ldi	r24, 0x03	; 3
    3c5c:	80 83       	st	Z, r24
    3c5e:	09 c0       	rjmp	.+18     	; 0x3c72 <__unpack_f+0x76>
    3c60:	22 0f       	add	r18, r18
    3c62:	33 1f       	adc	r19, r19
    3c64:	44 1f       	adc	r20, r20
    3c66:	55 1f       	adc	r21, r21
    3c68:	82 81       	ldd	r24, Z+2	; 0x02
    3c6a:	93 81       	ldd	r25, Z+3	; 0x03
    3c6c:	01 97       	sbiw	r24, 0x01	; 1
    3c6e:	93 83       	std	Z+3, r25	; 0x03
    3c70:	82 83       	std	Z+2, r24	; 0x02
    3c72:	20 30       	cpi	r18, 0x00	; 0
    3c74:	80 e0       	ldi	r24, 0x00	; 0
    3c76:	38 07       	cpc	r19, r24
    3c78:	80 e0       	ldi	r24, 0x00	; 0
    3c7a:	48 07       	cpc	r20, r24
    3c7c:	80 e4       	ldi	r24, 0x40	; 64
    3c7e:	58 07       	cpc	r21, r24
    3c80:	78 f3       	brcs	.-34     	; 0x3c60 <__unpack_f+0x64>
    3c82:	20 c0       	rjmp	.+64     	; 0x3cc4 <__unpack_f+0xc8>
    3c84:	8f 3f       	cpi	r24, 0xFF	; 255
    3c86:	91 05       	cpc	r25, r1
    3c88:	79 f4       	brne	.+30     	; 0x3ca8 <__unpack_f+0xac>
    3c8a:	21 15       	cp	r18, r1
    3c8c:	31 05       	cpc	r19, r1
    3c8e:	41 05       	cpc	r20, r1
    3c90:	51 05       	cpc	r21, r1
    3c92:	19 f4       	brne	.+6      	; 0x3c9a <__unpack_f+0x9e>
    3c94:	84 e0       	ldi	r24, 0x04	; 4
    3c96:	80 83       	st	Z, r24
    3c98:	08 95       	ret
    3c9a:	44 ff       	sbrs	r20, 4
    3c9c:	03 c0       	rjmp	.+6      	; 0x3ca4 <__unpack_f+0xa8>
    3c9e:	81 e0       	ldi	r24, 0x01	; 1
    3ca0:	80 83       	st	Z, r24
    3ca2:	10 c0       	rjmp	.+32     	; 0x3cc4 <__unpack_f+0xc8>
    3ca4:	10 82       	st	Z, r1
    3ca6:	0e c0       	rjmp	.+28     	; 0x3cc4 <__unpack_f+0xc8>
    3ca8:	8f 57       	subi	r24, 0x7F	; 127
    3caa:	90 40       	sbci	r25, 0x00	; 0
    3cac:	93 83       	std	Z+3, r25	; 0x03
    3cae:	82 83       	std	Z+2, r24	; 0x02
    3cb0:	83 e0       	ldi	r24, 0x03	; 3
    3cb2:	80 83       	st	Z, r24
    3cb4:	87 e0       	ldi	r24, 0x07	; 7
    3cb6:	22 0f       	add	r18, r18
    3cb8:	33 1f       	adc	r19, r19
    3cba:	44 1f       	adc	r20, r20
    3cbc:	55 1f       	adc	r21, r21
    3cbe:	8a 95       	dec	r24
    3cc0:	d1 f7       	brne	.-12     	; 0x3cb6 <__unpack_f+0xba>
    3cc2:	50 64       	ori	r21, 0x40	; 64
    3cc4:	24 83       	std	Z+4, r18	; 0x04
    3cc6:	35 83       	std	Z+5, r19	; 0x05
    3cc8:	46 83       	std	Z+6, r20	; 0x06
    3cca:	57 83       	std	Z+7, r21	; 0x07
    3ccc:	08 95       	ret

00003cce <__fpcmp_parts_f>:
    3cce:	fc 01       	movw	r30, r24
    3cd0:	db 01       	movw	r26, r22
    3cd2:	90 81       	ld	r25, Z
    3cd4:	92 30       	cpi	r25, 0x02	; 2
    3cd6:	08 f4       	brcc	.+2      	; 0x3cda <__fpcmp_parts_f+0xc>
    3cd8:	49 c0       	rjmp	.+146    	; 0x3d6c <__fpcmp_parts_f+0x9e>
    3cda:	8c 91       	ld	r24, X
    3cdc:	82 30       	cpi	r24, 0x02	; 2
    3cde:	08 f4       	brcc	.+2      	; 0x3ce2 <__fpcmp_parts_f+0x14>
    3ce0:	45 c0       	rjmp	.+138    	; 0x3d6c <__fpcmp_parts_f+0x9e>
    3ce2:	94 30       	cpi	r25, 0x04	; 4
    3ce4:	51 f4       	brne	.+20     	; 0x3cfa <__fpcmp_parts_f+0x2c>
    3ce6:	61 81       	ldd	r22, Z+1	; 0x01
    3ce8:	84 30       	cpi	r24, 0x04	; 4
    3cea:	b1 f5       	brne	.+108    	; 0x3d58 <__fpcmp_parts_f+0x8a>
    3cec:	11 96       	adiw	r26, 0x01	; 1
    3cee:	2c 91       	ld	r18, X
    3cf0:	11 97       	sbiw	r26, 0x01	; 1
    3cf2:	30 e0       	ldi	r19, 0x00	; 0
    3cf4:	26 1b       	sub	r18, r22
    3cf6:	31 09       	sbc	r19, r1
    3cf8:	41 c0       	rjmp	.+130    	; 0x3d7c <__fpcmp_parts_f+0xae>
    3cfa:	84 30       	cpi	r24, 0x04	; 4
    3cfc:	21 f0       	breq	.+8      	; 0x3d06 <__fpcmp_parts_f+0x38>
    3cfe:	92 30       	cpi	r25, 0x02	; 2
    3d00:	41 f4       	brne	.+16     	; 0x3d12 <__fpcmp_parts_f+0x44>
    3d02:	82 30       	cpi	r24, 0x02	; 2
    3d04:	b1 f1       	breq	.+108    	; 0x3d72 <__fpcmp_parts_f+0xa4>
    3d06:	11 96       	adiw	r26, 0x01	; 1
    3d08:	8c 91       	ld	r24, X
    3d0a:	11 97       	sbiw	r26, 0x01	; 1
    3d0c:	88 23       	and	r24, r24
    3d0e:	a1 f1       	breq	.+104    	; 0x3d78 <__fpcmp_parts_f+0xaa>
    3d10:	2d c0       	rjmp	.+90     	; 0x3d6c <__fpcmp_parts_f+0x9e>
    3d12:	61 81       	ldd	r22, Z+1	; 0x01
    3d14:	82 30       	cpi	r24, 0x02	; 2
    3d16:	01 f1       	breq	.+64     	; 0x3d58 <__fpcmp_parts_f+0x8a>
    3d18:	11 96       	adiw	r26, 0x01	; 1
    3d1a:	8c 91       	ld	r24, X
    3d1c:	11 97       	sbiw	r26, 0x01	; 1
    3d1e:	68 17       	cp	r22, r24
    3d20:	d9 f4       	brne	.+54     	; 0x3d58 <__fpcmp_parts_f+0x8a>
    3d22:	22 81       	ldd	r18, Z+2	; 0x02
    3d24:	33 81       	ldd	r19, Z+3	; 0x03
    3d26:	12 96       	adiw	r26, 0x02	; 2
    3d28:	8d 91       	ld	r24, X+
    3d2a:	9c 91       	ld	r25, X
    3d2c:	13 97       	sbiw	r26, 0x03	; 3
    3d2e:	82 17       	cp	r24, r18
    3d30:	93 07       	cpc	r25, r19
    3d32:	94 f0       	brlt	.+36     	; 0x3d58 <__fpcmp_parts_f+0x8a>
    3d34:	28 17       	cp	r18, r24
    3d36:	39 07       	cpc	r19, r25
    3d38:	bc f0       	brlt	.+46     	; 0x3d68 <__fpcmp_parts_f+0x9a>
    3d3a:	24 81       	ldd	r18, Z+4	; 0x04
    3d3c:	35 81       	ldd	r19, Z+5	; 0x05
    3d3e:	46 81       	ldd	r20, Z+6	; 0x06
    3d40:	57 81       	ldd	r21, Z+7	; 0x07
    3d42:	14 96       	adiw	r26, 0x04	; 4
    3d44:	8d 91       	ld	r24, X+
    3d46:	9d 91       	ld	r25, X+
    3d48:	0d 90       	ld	r0, X+
    3d4a:	bc 91       	ld	r27, X
    3d4c:	a0 2d       	mov	r26, r0
    3d4e:	82 17       	cp	r24, r18
    3d50:	93 07       	cpc	r25, r19
    3d52:	a4 07       	cpc	r26, r20
    3d54:	b5 07       	cpc	r27, r21
    3d56:	18 f4       	brcc	.+6      	; 0x3d5e <__fpcmp_parts_f+0x90>
    3d58:	66 23       	and	r22, r22
    3d5a:	41 f0       	breq	.+16     	; 0x3d6c <__fpcmp_parts_f+0x9e>
    3d5c:	0d c0       	rjmp	.+26     	; 0x3d78 <__fpcmp_parts_f+0xaa>
    3d5e:	28 17       	cp	r18, r24
    3d60:	39 07       	cpc	r19, r25
    3d62:	4a 07       	cpc	r20, r26
    3d64:	5b 07       	cpc	r21, r27
    3d66:	28 f4       	brcc	.+10     	; 0x3d72 <__fpcmp_parts_f+0xa4>
    3d68:	66 23       	and	r22, r22
    3d6a:	31 f0       	breq	.+12     	; 0x3d78 <__fpcmp_parts_f+0xaa>
    3d6c:	21 e0       	ldi	r18, 0x01	; 1
    3d6e:	30 e0       	ldi	r19, 0x00	; 0
    3d70:	05 c0       	rjmp	.+10     	; 0x3d7c <__fpcmp_parts_f+0xae>
    3d72:	20 e0       	ldi	r18, 0x00	; 0
    3d74:	30 e0       	ldi	r19, 0x00	; 0
    3d76:	02 c0       	rjmp	.+4      	; 0x3d7c <__fpcmp_parts_f+0xae>
    3d78:	2f ef       	ldi	r18, 0xFF	; 255
    3d7a:	3f ef       	ldi	r19, 0xFF	; 255
    3d7c:	c9 01       	movw	r24, r18
    3d7e:	08 95       	ret

00003d80 <__prologue_saves__>:
    3d80:	2f 92       	push	r2
    3d82:	3f 92       	push	r3
    3d84:	4f 92       	push	r4
    3d86:	5f 92       	push	r5
    3d88:	6f 92       	push	r6
    3d8a:	7f 92       	push	r7
    3d8c:	8f 92       	push	r8
    3d8e:	9f 92       	push	r9
    3d90:	af 92       	push	r10
    3d92:	bf 92       	push	r11
    3d94:	cf 92       	push	r12
    3d96:	df 92       	push	r13
    3d98:	ef 92       	push	r14
    3d9a:	ff 92       	push	r15
    3d9c:	0f 93       	push	r16
    3d9e:	1f 93       	push	r17
    3da0:	cf 93       	push	r28
    3da2:	df 93       	push	r29
    3da4:	cd b7       	in	r28, 0x3d	; 61
    3da6:	de b7       	in	r29, 0x3e	; 62
    3da8:	ca 1b       	sub	r28, r26
    3daa:	db 0b       	sbc	r29, r27
    3dac:	0f b6       	in	r0, 0x3f	; 63
    3dae:	f8 94       	cli
    3db0:	de bf       	out	0x3e, r29	; 62
    3db2:	0f be       	out	0x3f, r0	; 63
    3db4:	cd bf       	out	0x3d, r28	; 61
    3db6:	09 94       	ijmp

00003db8 <__epilogue_restores__>:
    3db8:	2a 88       	ldd	r2, Y+18	; 0x12
    3dba:	39 88       	ldd	r3, Y+17	; 0x11
    3dbc:	48 88       	ldd	r4, Y+16	; 0x10
    3dbe:	5f 84       	ldd	r5, Y+15	; 0x0f
    3dc0:	6e 84       	ldd	r6, Y+14	; 0x0e
    3dc2:	7d 84       	ldd	r7, Y+13	; 0x0d
    3dc4:	8c 84       	ldd	r8, Y+12	; 0x0c
    3dc6:	9b 84       	ldd	r9, Y+11	; 0x0b
    3dc8:	aa 84       	ldd	r10, Y+10	; 0x0a
    3dca:	b9 84       	ldd	r11, Y+9	; 0x09
    3dcc:	c8 84       	ldd	r12, Y+8	; 0x08
    3dce:	df 80       	ldd	r13, Y+7	; 0x07
    3dd0:	ee 80       	ldd	r14, Y+6	; 0x06
    3dd2:	fd 80       	ldd	r15, Y+5	; 0x05
    3dd4:	0c 81       	ldd	r16, Y+4	; 0x04
    3dd6:	1b 81       	ldd	r17, Y+3	; 0x03
    3dd8:	aa 81       	ldd	r26, Y+2	; 0x02
    3dda:	b9 81       	ldd	r27, Y+1	; 0x01
    3ddc:	ce 0f       	add	r28, r30
    3dde:	d1 1d       	adc	r29, r1
    3de0:	0f b6       	in	r0, 0x3f	; 63
    3de2:	f8 94       	cli
    3de4:	de bf       	out	0x3e, r29	; 62
    3de6:	0f be       	out	0x3f, r0	; 63
    3de8:	cd bf       	out	0x3d, r28	; 61
    3dea:	ed 01       	movw	r28, r26
    3dec:	08 95       	ret

00003dee <malloc>:
    3dee:	cf 93       	push	r28
    3df0:	df 93       	push	r29
    3df2:	82 30       	cpi	r24, 0x02	; 2
    3df4:	91 05       	cpc	r25, r1
    3df6:	10 f4       	brcc	.+4      	; 0x3dfc <malloc+0xe>
    3df8:	82 e0       	ldi	r24, 0x02	; 2
    3dfa:	90 e0       	ldi	r25, 0x00	; 0
    3dfc:	e0 91 09 04 	lds	r30, 0x0409
    3e00:	f0 91 0a 04 	lds	r31, 0x040A
    3e04:	40 e0       	ldi	r20, 0x00	; 0
    3e06:	50 e0       	ldi	r21, 0x00	; 0
    3e08:	20 e0       	ldi	r18, 0x00	; 0
    3e0a:	30 e0       	ldi	r19, 0x00	; 0
    3e0c:	26 c0       	rjmp	.+76     	; 0x3e5a <malloc+0x6c>
    3e0e:	60 81       	ld	r22, Z
    3e10:	71 81       	ldd	r23, Z+1	; 0x01
    3e12:	68 17       	cp	r22, r24
    3e14:	79 07       	cpc	r23, r25
    3e16:	e0 f0       	brcs	.+56     	; 0x3e50 <malloc+0x62>
    3e18:	68 17       	cp	r22, r24
    3e1a:	79 07       	cpc	r23, r25
    3e1c:	81 f4       	brne	.+32     	; 0x3e3e <malloc+0x50>
    3e1e:	82 81       	ldd	r24, Z+2	; 0x02
    3e20:	93 81       	ldd	r25, Z+3	; 0x03
    3e22:	21 15       	cp	r18, r1
    3e24:	31 05       	cpc	r19, r1
    3e26:	31 f0       	breq	.+12     	; 0x3e34 <malloc+0x46>
    3e28:	d9 01       	movw	r26, r18
    3e2a:	13 96       	adiw	r26, 0x03	; 3
    3e2c:	9c 93       	st	X, r25
    3e2e:	8e 93       	st	-X, r24
    3e30:	12 97       	sbiw	r26, 0x02	; 2
    3e32:	2b c0       	rjmp	.+86     	; 0x3e8a <malloc+0x9c>
    3e34:	90 93 0a 04 	sts	0x040A, r25
    3e38:	80 93 09 04 	sts	0x0409, r24
    3e3c:	26 c0       	rjmp	.+76     	; 0x3e8a <malloc+0x9c>
    3e3e:	41 15       	cp	r20, r1
    3e40:	51 05       	cpc	r21, r1
    3e42:	19 f0       	breq	.+6      	; 0x3e4a <malloc+0x5c>
    3e44:	64 17       	cp	r22, r20
    3e46:	75 07       	cpc	r23, r21
    3e48:	18 f4       	brcc	.+6      	; 0x3e50 <malloc+0x62>
    3e4a:	ab 01       	movw	r20, r22
    3e4c:	e9 01       	movw	r28, r18
    3e4e:	df 01       	movw	r26, r30
    3e50:	9f 01       	movw	r18, r30
    3e52:	72 81       	ldd	r23, Z+2	; 0x02
    3e54:	63 81       	ldd	r22, Z+3	; 0x03
    3e56:	e7 2f       	mov	r30, r23
    3e58:	f6 2f       	mov	r31, r22
    3e5a:	30 97       	sbiw	r30, 0x00	; 0
    3e5c:	c1 f6       	brne	.-80     	; 0x3e0e <malloc+0x20>
    3e5e:	41 15       	cp	r20, r1
    3e60:	51 05       	cpc	r21, r1
    3e62:	01 f1       	breq	.+64     	; 0x3ea4 <malloc+0xb6>
    3e64:	48 1b       	sub	r20, r24
    3e66:	59 0b       	sbc	r21, r25
    3e68:	44 30       	cpi	r20, 0x04	; 4
    3e6a:	51 05       	cpc	r21, r1
    3e6c:	80 f4       	brcc	.+32     	; 0x3e8e <malloc+0xa0>
    3e6e:	12 96       	adiw	r26, 0x02	; 2
    3e70:	8d 91       	ld	r24, X+
    3e72:	9c 91       	ld	r25, X
    3e74:	13 97       	sbiw	r26, 0x03	; 3
    3e76:	20 97       	sbiw	r28, 0x00	; 0
    3e78:	19 f0       	breq	.+6      	; 0x3e80 <malloc+0x92>
    3e7a:	9b 83       	std	Y+3, r25	; 0x03
    3e7c:	8a 83       	std	Y+2, r24	; 0x02
    3e7e:	04 c0       	rjmp	.+8      	; 0x3e88 <malloc+0x9a>
    3e80:	90 93 0a 04 	sts	0x040A, r25
    3e84:	80 93 09 04 	sts	0x0409, r24
    3e88:	fd 01       	movw	r30, r26
    3e8a:	32 96       	adiw	r30, 0x02	; 2
    3e8c:	46 c0       	rjmp	.+140    	; 0x3f1a <malloc+0x12c>
    3e8e:	fd 01       	movw	r30, r26
    3e90:	e4 0f       	add	r30, r20
    3e92:	f5 1f       	adc	r31, r21
    3e94:	81 93       	st	Z+, r24
    3e96:	91 93       	st	Z+, r25
    3e98:	42 50       	subi	r20, 0x02	; 2
    3e9a:	50 40       	sbci	r21, 0x00	; 0
    3e9c:	11 96       	adiw	r26, 0x01	; 1
    3e9e:	5c 93       	st	X, r21
    3ea0:	4e 93       	st	-X, r20
    3ea2:	3b c0       	rjmp	.+118    	; 0x3f1a <malloc+0x12c>
    3ea4:	20 91 07 04 	lds	r18, 0x0407
    3ea8:	30 91 08 04 	lds	r19, 0x0408
    3eac:	21 15       	cp	r18, r1
    3eae:	31 05       	cpc	r19, r1
    3eb0:	41 f4       	brne	.+16     	; 0x3ec2 <malloc+0xd4>
    3eb2:	20 91 f3 02 	lds	r18, 0x02F3
    3eb6:	30 91 f4 02 	lds	r19, 0x02F4
    3eba:	30 93 08 04 	sts	0x0408, r19
    3ebe:	20 93 07 04 	sts	0x0407, r18
    3ec2:	20 91 f5 02 	lds	r18, 0x02F5
    3ec6:	30 91 f6 02 	lds	r19, 0x02F6
    3eca:	21 15       	cp	r18, r1
    3ecc:	31 05       	cpc	r19, r1
    3ece:	41 f4       	brne	.+16     	; 0x3ee0 <malloc+0xf2>
    3ed0:	2d b7       	in	r18, 0x3d	; 61
    3ed2:	3e b7       	in	r19, 0x3e	; 62
    3ed4:	40 91 f1 02 	lds	r20, 0x02F1
    3ed8:	50 91 f2 02 	lds	r21, 0x02F2
    3edc:	24 1b       	sub	r18, r20
    3ede:	35 0b       	sbc	r19, r21
    3ee0:	e0 91 07 04 	lds	r30, 0x0407
    3ee4:	f0 91 08 04 	lds	r31, 0x0408
    3ee8:	e2 17       	cp	r30, r18
    3eea:	f3 07       	cpc	r31, r19
    3eec:	a0 f4       	brcc	.+40     	; 0x3f16 <malloc+0x128>
    3eee:	2e 1b       	sub	r18, r30
    3ef0:	3f 0b       	sbc	r19, r31
    3ef2:	28 17       	cp	r18, r24
    3ef4:	39 07       	cpc	r19, r25
    3ef6:	78 f0       	brcs	.+30     	; 0x3f16 <malloc+0x128>
    3ef8:	ac 01       	movw	r20, r24
    3efa:	4e 5f       	subi	r20, 0xFE	; 254
    3efc:	5f 4f       	sbci	r21, 0xFF	; 255
    3efe:	24 17       	cp	r18, r20
    3f00:	35 07       	cpc	r19, r21
    3f02:	48 f0       	brcs	.+18     	; 0x3f16 <malloc+0x128>
    3f04:	4e 0f       	add	r20, r30
    3f06:	5f 1f       	adc	r21, r31
    3f08:	50 93 08 04 	sts	0x0408, r21
    3f0c:	40 93 07 04 	sts	0x0407, r20
    3f10:	81 93       	st	Z+, r24
    3f12:	91 93       	st	Z+, r25
    3f14:	02 c0       	rjmp	.+4      	; 0x3f1a <malloc+0x12c>
    3f16:	e0 e0       	ldi	r30, 0x00	; 0
    3f18:	f0 e0       	ldi	r31, 0x00	; 0
    3f1a:	cf 01       	movw	r24, r30
    3f1c:	df 91       	pop	r29
    3f1e:	cf 91       	pop	r28
    3f20:	08 95       	ret

00003f22 <free>:
    3f22:	cf 93       	push	r28
    3f24:	df 93       	push	r29
    3f26:	00 97       	sbiw	r24, 0x00	; 0
    3f28:	09 f4       	brne	.+2      	; 0x3f2c <free+0xa>
    3f2a:	91 c0       	rjmp	.+290    	; 0x404e <free+0x12c>
    3f2c:	fc 01       	movw	r30, r24
    3f2e:	32 97       	sbiw	r30, 0x02	; 2
    3f30:	13 82       	std	Z+3, r1	; 0x03
    3f32:	12 82       	std	Z+2, r1	; 0x02
    3f34:	60 91 09 04 	lds	r22, 0x0409
    3f38:	70 91 0a 04 	lds	r23, 0x040A
    3f3c:	61 15       	cp	r22, r1
    3f3e:	71 05       	cpc	r23, r1
    3f40:	81 f4       	brne	.+32     	; 0x3f62 <free+0x40>
    3f42:	20 81       	ld	r18, Z
    3f44:	31 81       	ldd	r19, Z+1	; 0x01
    3f46:	28 0f       	add	r18, r24
    3f48:	39 1f       	adc	r19, r25
    3f4a:	80 91 07 04 	lds	r24, 0x0407
    3f4e:	90 91 08 04 	lds	r25, 0x0408
    3f52:	82 17       	cp	r24, r18
    3f54:	93 07       	cpc	r25, r19
    3f56:	99 f5       	brne	.+102    	; 0x3fbe <free+0x9c>
    3f58:	f0 93 08 04 	sts	0x0408, r31
    3f5c:	e0 93 07 04 	sts	0x0407, r30
    3f60:	76 c0       	rjmp	.+236    	; 0x404e <free+0x12c>
    3f62:	db 01       	movw	r26, r22
    3f64:	80 e0       	ldi	r24, 0x00	; 0
    3f66:	90 e0       	ldi	r25, 0x00	; 0
    3f68:	02 c0       	rjmp	.+4      	; 0x3f6e <free+0x4c>
    3f6a:	cd 01       	movw	r24, r26
    3f6c:	d9 01       	movw	r26, r18
    3f6e:	ae 17       	cp	r26, r30
    3f70:	bf 07       	cpc	r27, r31
    3f72:	48 f4       	brcc	.+18     	; 0x3f86 <free+0x64>
    3f74:	12 96       	adiw	r26, 0x02	; 2
    3f76:	2d 91       	ld	r18, X+
    3f78:	3c 91       	ld	r19, X
    3f7a:	13 97       	sbiw	r26, 0x03	; 3
    3f7c:	21 15       	cp	r18, r1
    3f7e:	31 05       	cpc	r19, r1
    3f80:	a1 f7       	brne	.-24     	; 0x3f6a <free+0x48>
    3f82:	cd 01       	movw	r24, r26
    3f84:	21 c0       	rjmp	.+66     	; 0x3fc8 <free+0xa6>
    3f86:	b3 83       	std	Z+3, r27	; 0x03
    3f88:	a2 83       	std	Z+2, r26	; 0x02
    3f8a:	ef 01       	movw	r28, r30
    3f8c:	49 91       	ld	r20, Y+
    3f8e:	59 91       	ld	r21, Y+
    3f90:	9e 01       	movw	r18, r28
    3f92:	24 0f       	add	r18, r20
    3f94:	35 1f       	adc	r19, r21
    3f96:	a2 17       	cp	r26, r18
    3f98:	b3 07       	cpc	r27, r19
    3f9a:	79 f4       	brne	.+30     	; 0x3fba <free+0x98>
    3f9c:	2d 91       	ld	r18, X+
    3f9e:	3c 91       	ld	r19, X
    3fa0:	11 97       	sbiw	r26, 0x01	; 1
    3fa2:	24 0f       	add	r18, r20
    3fa4:	35 1f       	adc	r19, r21
    3fa6:	2e 5f       	subi	r18, 0xFE	; 254
    3fa8:	3f 4f       	sbci	r19, 0xFF	; 255
    3faa:	31 83       	std	Z+1, r19	; 0x01
    3fac:	20 83       	st	Z, r18
    3fae:	12 96       	adiw	r26, 0x02	; 2
    3fb0:	2d 91       	ld	r18, X+
    3fb2:	3c 91       	ld	r19, X
    3fb4:	13 97       	sbiw	r26, 0x03	; 3
    3fb6:	33 83       	std	Z+3, r19	; 0x03
    3fb8:	22 83       	std	Z+2, r18	; 0x02
    3fba:	00 97       	sbiw	r24, 0x00	; 0
    3fbc:	29 f4       	brne	.+10     	; 0x3fc8 <free+0xa6>
    3fbe:	f0 93 0a 04 	sts	0x040A, r31
    3fc2:	e0 93 09 04 	sts	0x0409, r30
    3fc6:	43 c0       	rjmp	.+134    	; 0x404e <free+0x12c>
    3fc8:	dc 01       	movw	r26, r24
    3fca:	13 96       	adiw	r26, 0x03	; 3
    3fcc:	fc 93       	st	X, r31
    3fce:	ee 93       	st	-X, r30
    3fd0:	12 97       	sbiw	r26, 0x02	; 2
    3fd2:	4d 91       	ld	r20, X+
    3fd4:	5d 91       	ld	r21, X+
    3fd6:	a4 0f       	add	r26, r20
    3fd8:	b5 1f       	adc	r27, r21
    3fda:	ea 17       	cp	r30, r26
    3fdc:	fb 07       	cpc	r31, r27
    3fde:	69 f4       	brne	.+26     	; 0x3ffa <free+0xd8>
    3fe0:	20 81       	ld	r18, Z
    3fe2:	31 81       	ldd	r19, Z+1	; 0x01
    3fe4:	24 0f       	add	r18, r20
    3fe6:	35 1f       	adc	r19, r21
    3fe8:	2e 5f       	subi	r18, 0xFE	; 254
    3fea:	3f 4f       	sbci	r19, 0xFF	; 255
    3fec:	ec 01       	movw	r28, r24
    3fee:	39 83       	std	Y+1, r19	; 0x01
    3ff0:	28 83       	st	Y, r18
    3ff2:	22 81       	ldd	r18, Z+2	; 0x02
    3ff4:	33 81       	ldd	r19, Z+3	; 0x03
    3ff6:	3b 83       	std	Y+3, r19	; 0x03
    3ff8:	2a 83       	std	Y+2, r18	; 0x02
    3ffa:	e0 e0       	ldi	r30, 0x00	; 0
    3ffc:	f0 e0       	ldi	r31, 0x00	; 0
    3ffe:	02 c0       	rjmp	.+4      	; 0x4004 <free+0xe2>
    4000:	fb 01       	movw	r30, r22
    4002:	bc 01       	movw	r22, r24
    4004:	db 01       	movw	r26, r22
    4006:	12 96       	adiw	r26, 0x02	; 2
    4008:	8d 91       	ld	r24, X+
    400a:	9c 91       	ld	r25, X
    400c:	13 97       	sbiw	r26, 0x03	; 3
    400e:	00 97       	sbiw	r24, 0x00	; 0
    4010:	b9 f7       	brne	.-18     	; 0x4000 <free+0xde>
    4012:	9b 01       	movw	r18, r22
    4014:	2e 5f       	subi	r18, 0xFE	; 254
    4016:	3f 4f       	sbci	r19, 0xFF	; 255
    4018:	8d 91       	ld	r24, X+
    401a:	9c 91       	ld	r25, X
    401c:	11 97       	sbiw	r26, 0x01	; 1
    401e:	82 0f       	add	r24, r18
    4020:	93 1f       	adc	r25, r19
    4022:	40 91 07 04 	lds	r20, 0x0407
    4026:	50 91 08 04 	lds	r21, 0x0408
    402a:	48 17       	cp	r20, r24
    402c:	59 07       	cpc	r21, r25
    402e:	79 f4       	brne	.+30     	; 0x404e <free+0x12c>
    4030:	30 97       	sbiw	r30, 0x00	; 0
    4032:	29 f4       	brne	.+10     	; 0x403e <free+0x11c>
    4034:	10 92 0a 04 	sts	0x040A, r1
    4038:	10 92 09 04 	sts	0x0409, r1
    403c:	02 c0       	rjmp	.+4      	; 0x4042 <free+0x120>
    403e:	13 82       	std	Z+3, r1	; 0x03
    4040:	12 82       	std	Z+2, r1	; 0x02
    4042:	22 50       	subi	r18, 0x02	; 2
    4044:	30 40       	sbci	r19, 0x00	; 0
    4046:	30 93 08 04 	sts	0x0408, r19
    404a:	20 93 07 04 	sts	0x0407, r18
    404e:	df 91       	pop	r29
    4050:	cf 91       	pop	r28
    4052:	08 95       	ret

00004054 <_exit>:
    4054:	f8 94       	cli

00004056 <__stop_program>:
    4056:	ff cf       	rjmp	.-2      	; 0x4056 <__stop_program>
